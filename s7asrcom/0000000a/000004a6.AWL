FUNCTION_BLOCK "GCS7_TractionDrive_TEST"
TITLE =MACHINE: Traction Drive (de:Fahrantrieb)
//  
//COPYRIGHT:    (C) 1997  BUHLER AG, CH-9240 UZWIL,  SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        FB 86 MACHINE: Traction Drive (de:Fahrantrieb)
// 
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                       DATE:
//FB86.1.14     I.Salzhenitsin      KIPA                        24-Sep-2014
//              set 2 new states StStartingFwdCal and StStartingRevCal
//              set left side and right side difference counting
//FB86.1.13     Th.Brandl           AEB41                       17-Mar-2010
//              set additional counter position <>0  (actual position)  
//FB86.1.12     M.Wedler            AEB41                       12-Oct-2009
//              Optimized for CPU 319-3 PN/DP              
//FB86.1.11     M.Wedler            AEB41                       06-Nov-2008
//              Cleaning work after changes [1.8]                        
//FB86.1.10     M.Wedler            AEB41                       15-Okt-2008
//              Delay start motor by loading if flow detector is covered.
//FB86.1.9      M.Wedler            AEB41                       04-Feb-2008
//              No Counter-Card with Counter Rounds
//FB86.1.8      U.Kemmesies         AEB31                       07-Dez-2007
//              No Counter-Card
//FB86.1.7      M.Wedler            AEB31                       05-Jan-2007
//              Load counter value after failure
//FB86.1.6      U.Kemmesies         AEB31                       23-Nov-2006
//              Round counter only for Inkremental-Counter               
//FB86.1.5      U.Kemmesies         AEB31                       14-Nov-2006
//              Round counter               
//FB86.1.4      M.Wedler            AEB31                       12-Sep-2006
//              Don't reset "#Ma.CmdSetZeroPoint" after each cycle.               
//FB86.1.3      J.Voss              AEB31                       31-Aug-2006
//              Never clear setpoint speed [#Speed.InOutValuePc]
//FB86.1.2      M.Wedler            AEB31                       31-Aug-2006
//              Round counter forward and reverse for manual     
//              and automatic mode. Stop motor by loading if
//              flow detector is not covered.
//FB86.1.1      A.Egli              CT3                         31-Aug-2006
//              Count forward and reverse
//FB86.1.0      A.Egli              CT3                         22-Mar-2006
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [LL.xxMAN]
//
//RESTRICTIONS: S7
//
//-------------------------------------------------------------------------
AUTHOR : EA
FAMILY : GCS7LL
NAME : StrokeDr
VERSION : 1.8


VAR
  Motor : "GCS7_E_Motor_TEST";	
  Ma : "GCS7_FB86_Data";	
  Speed : "GCS7_E_AnalogOutput";	//Element Analog output
  LSZeroPoint : "GCS7_E_DigInput";	//LS zero point
  Product : "GCS7_E_DigInput";	//Level probe
  SM : "GCS7_E_DigInput_TEST";	//Speed monitoring
  IncCounter : "GCS7_FB85_Counter";	
END_VAR
VAR_TEMP
  tmpFaultStop : BOOL ;	
  tmpFaultSum : BOOL ;	
  tmpEnable : BOOL ;	
  tmpLocal : BOOL ;	
  tmpLenDyn : INT ;	
  tmpOK : BOOL ;	
  tmpTestTime : INT ;	
  tmpAddrIO : DINT ;	
  tmpAddrCounter : DINT ;	
  tmpAddrOffset : DINT ;	
  tmpAdjusted : BOOL ;	
  tmpStartPosition : BOOL ;	
  tmpAngle1 : INT ;	
  tmpAngleLes355 : BOOL ;	
  tmpAngleDelta : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =
//
//
      L     80; 
      T     #tmpLenDyn; 
NETWORK
TITLE =PC Control
//=== Test Object number =====================
      L     "SYS_DirectCtrlDB".PC.ObjectNo; //PCControl.ObjectNo
      L     #Ma.Par.ParObjectNo; //Input ObjectNo
      <>I   ; 
      JC    aEnd; 
//=== Test OType      ========================
      L     2086; //Input object type
      L     "SYS_DirectCtrlDB".PC.ObjectType; //PCControl.ObjectType
      <>I   ; 
      JC    aEnd; 
//=== Test Handshake =========================
      A     "SYS_DirectCtrlDB".PC.Hsk.FExamine; // Handshake.FExamine
      JC    aExa; 
      A     "SYS_DirectCtrlDB".PC.Hsk.FDefineCmd; // Handshake.FDefineCmd
      O     "SYS_DirectCtrlDB".PC.Hsk.FDefinePara; // Handshake.FDefinePara
      JC    aCmd; 
      JU    aEnd; 
// Write new commands from PC to Interface of group 
aCmd: A     "SYS_DirectCtrlDB".PC.Cmd1[8]; //Cmd1[8]=CmdOff
      S     #Ma.CmdOff; 
      A     "SYS_DirectCtrlDB".PC.Cmd1[9]; //Cmd1[9]=CmdUp
      S     #Ma.CmdOnFwd; 
      A     "SYS_DirectCtrlDB".PC.Cmd1[10]; //Cmd1[10]=CmdNext
      S     #Ma.CmdNext; 
      A     "SYS_DirectCtrlDB".PC.Cmd1[11]; //Cmd1[11]=CmdFaultReset
      S     #Ma.CmdFaultReset; 
      A     "SYS_DirectCtrlDB".PC.Cmd1[13]; //Cmd1[13]=CmdManualOn
      S     #Ma.InManual; 
      A     "SYS_DirectCtrlDB".PC.Cmd1[7]; //Cmd1[6]=CmdRev
      S     #Ma.CmdOnRev; 
      A     "SYS_DirectCtrlDB".PC.Cmd2[13]; //Cmd2[13]=CmdManualOff
      R     #Ma.InManual; 
//-----------------------------------------------------------
//Audit Log
aExa: NOP   0; 
//------------------------------------------
      TAR2  ; // Address Dynamic datas
      T     "SYS_DirectCtrlDB".GC.InDynAddr; // -->PCControl.GC.InDynAddr
      L     #tmpLenDyn; // Length Dynamic data
      T     "SYS_DirectCtrlDB".GC.InDynLen; // -->PCControl.GC.InDynLen
      L     0; 
      T     "SYS_DirectCtrlDB".GC.InParaAddr; // -->PCControl.GC.InParaAddr
      T     "SYS_DirectCtrlDB".GC.InParaLen; // -->PCControl.GC.InParaLen
      L     1; // Code FcExamine
      UC    "SYS_DirectCtrl"; 
      L     10; //Revision
      T     "SYS_DirectCtrlDB".GC.Revision; 
aEnd: NOP   0; 
NETWORK
TITLE =Calculate Address for Counter

      NOP   0; 
//Calculate address for counter
      TAR2  ; 
      L     DW#16#FFFFFF; 
      AD    ; 
      T     #tmpAddrOffset; 
      L     P##IncCounter; 
      +D    ; 
      T     #tmpAddrCounter; 
      L     #Ma.Par.ParIOByteNoCounter; 
      SLD   3; 
      T     #tmpAddrIO; 
NETWORK
TITLE =Commands for Counter

      L     0; // [1.8]
      L     #tmpAddrIO; // [1.8]
      ==D   ; // [1.8]
      JC    CTX0; // [1.8]

      NOP   0; 
//Clear command or counter
      A     #Ma.InPowerOk; // [1.7]
      A     #IncCounter.OutpLOAD_VAL; // [1.7]
      AN    #IncCounter.InpSTS_LOAD; // [1.7]
      JC    CTJ9; // [1.7]
      LAR1  #tmpAddrCounter; 
      L     0; 
      T     DID [AR1,P#4.0]; 
CTJ9: NOP   0; // [1.7]
//---------------------------
      SET   ; 
      S     #IncCounter.OutpSW_GATE; 
//---------------------------
      A     #Ma.InPowerOk; 
      AN    #Ma.InPowerOkDelayDone; 
      O     ; // [1.7]
      A     #IncCounter.OutpLOAD_VAL; // [1.7]
      AN    #IncCounter.InpSTS_LOAD; // [1.7]
      JCN   CTJ1; 
      L     #IncCounter.VarInpHold; 
      T     #IncCounter.OutpSetCount; 
//    SET                               // [1.7]
      L     #IncCounter.VarInpHold; // [1.7]
      L     #IncCounter.InpActCount; // [1.7]
      <>D   ; // [1.7]
      S     #IncCounter.OutpLOAD_VAL; 
CTJ1: A     #Ma.InPowerOk; 
      A     #Ma.InPowerOkDelayDone; 
      AN    #IncCounter.InpSTS_LOAD; // [1.7]
      AN    #IncCounter.OutpLOAD_VAL; // [1.7]
      JCN   CTJ0; 
      L     #IncCounter.InpActCount; 
      T     #IncCounter.VarInpHold; 
CTJ0: NOP   0; 

      A     #IncCounter.InpSTS_LOAD; // [1.7]
      R     #IncCounter.OutpLOAD_VAL; // [1.7]

CTX0: NOP   0; // [1.8]
NETWORK
TITLE =Initialisation counter module 

      L     0; // [1.8]
      L     #tmpAddrIO; // [1.8]
      ==D   ; // [1.8]
      JC    InX0; // [1.8]

      NOP   0; 
      A     #IncCounter.InpSTS_LOAD; 
      ON    #Ma.InPowerOkDelayDone; 
      R     #Ma.CmdSetZeroPoint; // [1.4]
      R     #Ma.CmdSetActualPosition; // [1.13]
      JC    InJ0; 
//------------------------------
//When CmdSetZeroPoint then set 0
//------------------------------
      A     #Ma.CmdSetZeroPoint; 
      JCN   InJ1; 
      L     L#0; 
      T     #IncCounter.OutpSetCount; 
      T     #IncCounter.VarInpHold; // [1.7]
      L     L#0; 
      L     #Ma.OutIncrement; 
      <>I   ; 
      S     #IncCounter.OutpLOAD_VAL; //--> Command to counter to set target value
//      SET                             // [1.4]
//      R     #Ma.CmdSetZeroPoint       // [1.4]
      L     #IncCounter.InpActCount; // [1.4]
      L     #IncCounter.OutpSetCount; // [1.4]
      ==D   ; // [1.4]
      ON    #IncCounter.OutpLOAD_VAL; // [1.4] //--> Command to counter to set target value
      R     #Ma.CmdSetZeroPoint; // [1.4]
//------------------------------
//When angle >360° then set 0
//------------------------------
InJ1: L     #IncCounter.InpActCount; 
      ITD   ; 
      L     #Ma.Par.ParIncrementsPerRound; 
      <=I   ; 
      ON    #Ma.Par.ParEndless; 
      JC    InJ2; 
      S     #IncCounter.OutpLOAD_VAL; //--> Command to counter to set target value
      L     L#0; 
      T     #IncCounter.OutpSetCount; 
      T     #IncCounter.VarInpHold; // [1.7]
//------------------------------
//When angle < 0° then set 360°
//------------------------------
InJ2: L     #IncCounter.InpActCount; 
      ITD   ; 
      L     0; 
      >=I   ; 
      ON    #Ma.Par.ParEndless; 
      JC    InJ0; 
      S     #IncCounter.OutpLOAD_VAL; //--> Command to counter to set target value
      L     #Ma.Par.ParIncrementsPerRound; 
      T     #IncCounter.OutpSetCount; 
      T     #IncCounter.VarInpHold; // [1.7]
InJ0: NOP   0; 
//-------------------------------------------------------// [1.13]---->
//When CmdSetPositionValue then set #Ma.Ma.InActualPosition
//------------------------------
      A     #Ma.Par.ParEndless; 
      JC    InJ3; 
      A     #Ma.CmdSetActualPosition; // [1.13]
      JCN   InJ3; 
      L     #Ma.Par.ParIncrementsPerRound; 
      DTR   ; 
      L     3.600000e+003; 
      /R    ; 
      L     #Ma.InActualPosition; // setpoint position
      DTR   ; 
      TAK   ; 
      *R    ; 
      RND   ; 
      T     #IncCounter.OutpSetCount; 
      T     #IncCounter.VarInpHold; 
      L     #IncCounter.OutpSetCount; 
      L     #Ma.OutIncrement; 
      <>I   ; 
      S     #IncCounter.OutpLOAD_VAL; //--> Command to counter to set target value

      L     #IncCounter.InpActCount; 
      L     #IncCounter.OutpSetCount; 
      ==D   ; 
      ON    #IncCounter.OutpLOAD_VAL; //--> Command to counter to set target value
      R     #Ma.CmdSetActualPosition; 
InJ3: NOP   0; 
//-------------------------------------------------------// [1.13]<---
      JU    InEN; 

InX0: NOP   0; // [1.8]

//------------------------------
//When CmdSetZeroPoint then set 0
//------------------------------
      A     #Ma.CmdSetZeroPoint; // [1.8]
      JCN   InJ7; // [1.8]
      L     L#0; // [1.8]
      T     #IncCounter.OutpSetCount; // [1.8]
      T     #IncCounter.VarInpHold; // [1.8]
      T     #Ma.OutIncrement; // [1.8]
      T     #IncCounter.InpActCount; // [1.8]

      L     #IncCounter.InpActCount; // [1.8]
      L     #IncCounter.OutpSetCount; // [1.8]
      ==D   ; // [1.8]
      R     #Ma.CmdSetZeroPoint; // [1.8]
//------------------------------
//When angle >360° then set 0
//------------------------------
InJ7: L     #IncCounter.InpActCount; // [1.8]
      ITD   ; // [1.8]
      L     #Ma.Par.ParIncrementsPerRound; // [1.8]
      <=I   ; // [1.8]
      ON    #Ma.Par.ParEndless; // [1.8]
      JC    InJ8; // [1.8]
      L     L#0; // [1.8]
      T     #IncCounter.OutpSetCount; // [1.8]
      T     #IncCounter.VarInpHold; // [1.8]
      T     #IncCounter.InpActCount; // [1.8]
//------------------------------
//When angle < 0° then set 360°
//------------------------------
InJ8: L     #IncCounter.InpActCount; // [1.8]
      ITD   ; // [1.8]
      L     0; // [1.8]
      >=I   ; // [1.8]
      ON    #Ma.Par.ParEndless; // [1.8]
      JC    InJ9; // [1.8]
      L     #Ma.Par.ParIncrementsPerRound; // [1.8]
      T     #IncCounter.OutpSetCount; // [1.8]
      T     #IncCounter.VarInpHold; // [1.8]
      T     #IncCounter.InpActCount; // [1.8]
InJ9: NOP   0; // [1.8]
//-------------------------------------------------------// [1.13]---->
//When CmdSetPositionValue then set #Ma.Ma.spare1
//------------------------------
      A     #Ma.Par.ParEndless; 
      JC    InJ5; 
      A     #Ma.CmdSetActualPosition; 
      JCN   InJ5; 
      L     #Ma.Par.ParIncrementsPerRound; 
      DTR   ; 
      L     3.600000e+003; 
      /R    ; 
      L     #Ma.InActualPosition; // setpoint position
      DTR   ; 
      TAK   ; 
      *R    ; 
      RND   ; 
      T     #IncCounter.OutpSetCount; 
      T     #IncCounter.VarInpHold; 
//      T     #Ma.OutIncrement
      T     #IncCounter.InpActCount; 

      L     #IncCounter.InpActCount; 
      L     #IncCounter.OutpSetCount; 
      ==D   ; 
      R     #Ma.CmdSetActualPosition; 
InJ5: NOP   0; 
//-------------------------------------------------------// [1.13]<---

InEN: NOP   0; // [1.8]

NETWORK
TITLE =Read Global Command

      A     "GCS7_Gr_OutFaultReset"; // OutFaultReset
      S     #Ma.CmdFaultReset; 
NETWORK
TITLE =Write Outputs of counter

      L     0; 
//    L     #tmpAddrCounter             // [1.11]
      L     #tmpAddrIO; // [1.11]
      ==D   ; 
      JC    WCJ0; 
///Write Outputs  Counter left
      LAR1  #tmpAddrCounter; 
      L     DID [AR1,P#0.0]; 
      LAR1  #tmpAddrIO; 
      T     PQD [AR1,P#0.0]; 
      LAR1  #tmpAddrCounter; 
//      L     DID [AR1,P#4.0]             //[1.12]
//      LAR1  #tmpAddrIO                  //[1.12]
//      T     PAD [AR1,P#4.0]             //[1.12]
      L     DIW [AR1,P#4.0]; //[1.12]
      LAR1  #tmpAddrIO; //[1.12]
      T     PQW [AR1,P#4.0]; //[1.12]
WCJ0: NOP   0; 
NETWORK
TITLE =Read Counter

      L     0; 
//      L     #tmpAddrCounter   // JV [1.3]
      L     #tmpAddrIO; // JV [1.3]
      ==D   ; 
      JC    RCJ0; 
//Read IO Counter left
      LAR1  #tmpAddrIO; 
      L     PID [AR1,P#0.0]; 
      LAR1  #tmpAddrCounter; 
      T     DID [AR1,P#8.0]; 
      LAR1  #tmpAddrIO; 
      L     PID [AR1,P#4.0]; 
      LAR1  #tmpAddrCounter; 
      T     DID [AR1,P#12.0]; 
RCJ0: NOP   0; 
NETWORK
TITLE =Speed monitoring

      NOP   0; 
//==========================================================
//Speed Monitoring Left
//==========================================================
//- Check if increment is changing
      A(    ; 
      L     #IncCounter.InpActCount; 
      ITD   ; 
      L     #Ma.OutIncrement; 
      ==D   ; 
      )     ; 
      A(    ; 
      O     #Motor.OutpRunFwd; 
      O     #Motor.OutpRunRev; 
      )     ; 
      AN    #Ma.CmdFaultReset; 
      JC    M1J1; 
      L     #Ma.Par.ParMonTime; //5s
      T     #Ma.Par.OutMonTime; 
      S     #SM.InpTrue; 
//---Run monitoring time
M1J1: AN    "GCS7_Gr_OutTick200ms"; 
      JC    M1J2; 
      L     #Ma.Par.OutMonTime; 
      +     -2; 
      T     #Ma.Par.OutMonTime; 
      L     0; 
      >=I   ; 
      JC    M1J2; 
      T     #Ma.Par.OutMonTime; 
      R     #SM.InpTrue; 
//---Store old counter value
M1J2: L     #IncCounter.InpActCount; 
      ITD   ; 
      T     #Ma.OutIncrement; 
NETWORK
TITLE =Calculation position

      NOP   0; 
//-----
      L     3.600000e+003; 
      L     #Ma.Par.ParIncrementsPerRound; 
      DTR   ; 
      /R    ; 
      L     #Ma.OutIncrement; 
      DTR   ; 
      TAK   ; 
      *R    ; 
      RND   ; 
      T     #Ma.OutPositionAngle; //Position [0.1°]
//--------
      L     1.000000e+003; 
      L     #Ma.Par.ParIncrementsPerRound; 
      DTR   ; 
      /R    ; 
      L     #Ma.OutIncrement; 
      DTR   ; 
      TAK   ; 
      *R    ; 
//      TRUNC 
      RND   ; 
      T     #Ma.OutPositionRel; //Position [0.1%]
NETWORK
TITLE =Check Adjusted
//Test is actual prosition is in range:
//    InPositionTarget+Ma.Par.ParTolPosition  OutPositionLeft
      NOP   0; 
//------------------
      L     #Ma.OutPositionAngle; 
      L     #Ma.InPositionTarget; 
      -I    ; 
      JP    A1J1; 
      NEGI  ; 
A1J1: T     #tmpAngle1; 
      L     1800; 
      <=I   ; 
      ON    #Ma.Par.ParEndless; 
      TAK   ; 
      JC    A1J2; 
      L     3600; 
      L     #tmpAngle1; 
      -I    ; 
A1J2: L     #Ma.Par.ParTolPosition; 
      <=I   ; 
      =     #Ma.OutAdjusted; 
      A     #Ma.OutAdjusted; 
      A     #Ma.InAdjusting; 
      =     #tmpAdjusted; 
NETWORK
TITLE =Round counter

      L     0; //[1.9]
      L     #tmpAddrIO; //[1.9]
      ==D   ; //[1.9]
      JCN   rcj0; //[1.9]

      AN    #Ma.Par.ParEndless; //[1.9]
      JC    rcj9; //[1.9]
      AN    #Ma.CmdNewJob; 
      JC    rcj1; //[1.9]
      S     #Ma.OutEdgeCntRoundFwd; 
      S     #Ma.OutEdgeCntRoundRev; 
      R     #Ma.CmdNewJob; 
      L     0; 
      T     #Ma.OutCntRound; 
      T     #Ma.OutPositionStart; 
rcj1: NOP   0; 
//------------------
//Calculate Delta angel between OutStartPosition and OutPositionAngle 
//------------------
      L     #Ma.OutPositionAngle; 
      L     #Ma.OutPositionStart; 
      -I    ; 
      JP    rcj2; //[1.9]
      NEGI  ; 
rcj2: T     #tmpAngle1; 
      L     1800; 
      <=I   ; 
      TAK   ; 
      JC    rcj3; //[1.9]
      L     3600; 
      L     #tmpAngle1; 
      -I    ; 
rcj3: T     #tmpAngleDelta; 
      L     1700; //Delta angle 170°
      >I    ; 
      R     #Ma.OutEdgeCntRoundFwd; 
      R     #Ma.OutEdgeCntRoundRev; 
//----------------------                
//Round Counter                         
//---------------------                 
      A(    ; 
      L     #tmpAngleDelta; 
      L     #Ma.Par.ParTolPosition; //[1.1]Delta angle 1°
      <=I   ; 
      )     ; 
      JCN   rcj9; //[1.9]
      AN    #Ma.StStartedFwd; 
      AN    #Ma.StStartedFwdCal; //[1.14]
      AN    #Motor.InEnableFwd; 
      JC    rcj4; //[1.9]
      A     #Ma.OutEdgeCntRoundFwd; 
      JC    rcj9; //[1.9]
      S     #Ma.OutEdgeCntRoundFwd; 
      R     #Ma.OutEdgeCntRoundRev; 
      L     #Ma.OutCntRound; 
      L     L#1; 
      +D    ; 
      T     #Ma.OutCntRound; 
      JU    rcj9; //[1.9]
rcj4: AN    #Ma.StStartedRev; //[1.9]
      AN    #Ma.StStartedRevCal; //[1.14]
      AN    #Motor.InEnableRev; //[1.9]
      JC    rcj9; //[1.9]
      A     #Ma.OutEdgeCntRoundRev; 
      JC    rcj9; //[1.9]
      S     #Ma.OutEdgeCntRoundRev; 
      R     #Ma.OutEdgeCntRoundFwd; 
      L     #Ma.OutCntRound; 
      L     L#1; 
      -D    ; 
      T     #Ma.OutCntRound; 
      L     0; 
      >=D   ; 
      JC    rcj9; //[1.9]
      L     0; 
      T     #Ma.OutCntRound; 
rcj9: NOP   0; //[1.9]
      JU    RCJ9; //[1.9]
rcj0: NOP   0; //[1.9]

      AN    #Ma.Par.ParEndless; //[1.2]
      JC    RCJ9; //[1.2]
      AN    #Ma.CmdNewJob; 
      JC    RCJ1; 
      S     #Ma.OutEdgeCntRoundFwd; //[1.1]
      S     #Ma.OutEdgeCntRoundRev; //[1.1]
      R     #Ma.CmdNewJob; 
      L     0; 
      T     #Ma.OutCntRound; 
//      L     #Ma.OutPositionAngle    //[1.5]  // UK 9.11.2006 geändert
      T     #Ma.OutPositionStart; 
RCJ1: NOP   0; 
//------------------
//Calculate Delta angel between OutStartPosition and OutPositionAngle 
//------------------
      L     #Ma.OutPositionAngle; 
      L     #Ma.OutPositionStart; 
      -I    ; 
      JP    RCJ2; 
      NEGI  ; 
RCJ2: T     #tmpAngle1; 
      L     1800; 
      <=I   ; 
      TAK   ; 
      JC    RCJ3; 
      L     3600; 
      L     #tmpAngle1; 
      -I    ; 
RCJ3: T     #tmpAngleDelta; 
      L     1700; //Delta angle 170°
      >I    ; 
      R     #Ma.OutEdgeCntRoundFwd; //[1.1]
      R     #Ma.OutEdgeCntRoundRev; //[1.1]
//----------------------                //[1.1]
//Round Counter                         //[1.1]
//---------------------                 //[1.1]
      A(    ; //[1.1]
      L     #tmpAngleDelta; //[1.1]
      L     #Ma.Par.ParTolPosition; //[1.1]Delta angle 1°
      <=I   ; //[1.1]
      )     ; //[1.1]
      JCN   RCJ9; //[1.1]
//      UN    #Ma.StStartedFwd            //[1.2]
//      UN    #Motor.InEnableFwd          //[1.1]
      AN    #IncCounter.InpSTS_C_UP; //[1.6]       UK 23.11.2006 geändert
      JC    RCJ4; //[1.1]
      A     #Ma.OutEdgeCntRoundFwd; //[1.1]
      JC    RCJ9; //[1.1]
      S     #Ma.OutEdgeCntRoundFwd; //[1.1]
      R     #Ma.OutEdgeCntRoundRev; //[1.1]
      L     #Ma.OutCntRound; //[1.1]
//      +     L#1                         //[1.1]  // UK 14.11.2006 geändert
      L     L#1; //[1.5]       UK 14.11.2006 geändert
      +D    ; //[1.5]       UK 14.11.2006 geändert
      T     #Ma.OutCntRound; //[1.1]
      JU    RCJ9; //[1.1]
// RCJ4: UN    #Ma.StStartedRev            //[1.2]
// RCJ4: UN    #Motor.InEnableRev          //[1.1]
RCJ4: AN    #IncCounter.InpSTS_C_DN; //[1.6]       UK 23.11.2006 geändert
      JC    RCJ9; //[1.1]
      A     #Ma.OutEdgeCntRoundRev; //[1.1]
      JC    RCJ9; //[1.1]
      S     #Ma.OutEdgeCntRoundRev; //[1.1]
      R     #Ma.OutEdgeCntRoundFwd; //[1.1]
      L     #Ma.OutCntRound; //[1.1]
      L     L#1; //[1.1]
      -D    ; //[1.1]
      T     #Ma.OutCntRound; //[1.1]
      L     0; //[1.1]
      >=D   ; //[1.1]
      JC    RCJ9; //[1.1]
      L     0; //[1.1]
      T     #Ma.OutCntRound; //[1.1]
RCJ9: NOP   0; 
NETWORK
TITLE =Interlocking
//===Global Group Orders===
      A     "GCS7_Gr_OutManualOff"; //Gr.OutManualOff
      R     #Ma.InManual; 
      A     #Ma.InManual; 
      S     "GCS7_Gr_InManual"; //Gr.InManual
//--------------
      A     #Ma.CmdOnFwd; 
      S     #Ma.OutManStartReqFwd; 
      R     #Ma.OutManStartReqRev; 
      A     #Ma.CmdOnRev; 
      R     #Ma.OutManStartReqFwd; 
      S     #Ma.OutManStartReqRev; 
      A     #Ma.CmdOff; 
      ON    #Ma.InManual; 
      R     #Ma.OutManStartReqFwd; 
      R     #Ma.OutManStartReqRev; 
//--- Fault----
      A     #Motor.StFault; 
      O     #Speed.StFault; 
      O     #LSZeroPoint.StFault; 
      O     #Product.StFault; 
      O     #SM.StFault; 
      =     #tmpFaultSum; 
//--- InLocal----
      A     #Ma.InLocal; 
      AN    #Ma.InManual; 
      =     #tmpLocal; 
      =     #Motor.InLocal; 
      =     #Speed.InLocal; 
      =     #LSZeroPoint.InLocal; 
      =     #Product.InLocal; 
      =     #SM.InLocal; 
//--- Fault Reset -------------
      A     #Ma.CmdFaultReset; 
      S     #Motor.CmdFaultReset; 
      S     #Speed.CmdFaultReset; 
      S     #LSZeroPoint.CmdFaultReset; 
      S     #Product.CmdFaultReset; 
      S     #SM.CmdFaultReset; 
NETWORK
TITLE =Interlocking Motor

      AN    #tmpFaultSum; 
      ON    #Ma.InInterlocked; 
      A(    ; 
      AN    #tmpAdjusted; 
      ON    #Ma.InAdjusting; 
      AN    #Ma.InManual; 
      O     #Ma.OutManStartReqRev; 
      )     ; 
      A     #Ma.InEnableRev; 
      A     #Ma.InPowerOkDelayDone; 
      =     #Motor.InEnableRev; 

      AN    #tmpFaultSum; 
      ON    #Ma.InInterlocked; 
      A(    ; 
      AN    #tmpAdjusted; 
      ON    #Ma.InAdjusting; 
      AN    #Ma.InManual; 
      O     #Ma.OutManStartReqFwd; 
      )     ; 
//      U(                                //[1.2]
//      U     #Ma.InLoading               //[1.2]
//      U     #Product.InpTrue            //[1.2]
//      ON    #Ma.InLoading               //[1.2]
//      )                                 //[1.2]
//      U(                                //[1.10]
//      U     #Product.StCtoTrue          //[1.10]
//      O     #Product.StTrue             //[1.10]
//      U     #Ma.InLoading               //[1.10]
//      O                                 //[1.10]
//      UN    #Ma.InLoading               //[1.10]
//      )     
      A(    ; 
      A     #Ma.InLoading; //[1.12]
      A     #Product.StTrue; //[1.12]
      ON    #Ma.InLoading; //[1.12]
      )     ; //[1.12]
      A     #Ma.InEnableFwd; 
      A     #Ma.InPowerOkDelayDone; 
      =     #Motor.InEnableFwd; 

      A     #Ma.CmdNext; 
      O     #Ma.InManual; 
      S     #Motor.CmdNext; 
NETWORK
TITLE =Interlocking Speed

      AN    #Motor.InEnableRev; 
      AN    #Motor.InEnableFwd; 
      AN    #Ma.InManual; 
      AN    #Motor.InManual; 
      A     "SYS_infLog0"; // never disable JV [1.3]
      =     #Speed.InDisable; 
      L     0; 
      JC    SpJ1; 
      L     #Ma.InSpeed; 
SpJ1: T     #Speed.InOutValuePc; 
      SET   ; 
      =     #Speed.Par.ParValuePc; 
NETWORK
TITLE =Interlocking Flow control
//At start of loading:
//   If the flow detector is covered then generate alarm
//
//During loading:
//   If the flowdectecor is to long covered then generate alarm
      CLR   ; 
      =     #Product.InMonTrue; 
      =     #Product.Par.Par2WorkingCond; 
      A     #Ma.InLoading; 
      =     #Product.InMonFalse; 
      A     #Product.InpTrue; 
      FP    #Ma.OutEdgeLoading; 
      S     #Product.CmdRunTimeoutTime; 
NETWORK
TITLE =Control Element SM

      A     #Motor.StStartedRev; 
      O     #Motor.StStartedFwd; 
      =     #SM.InMonTrue; 
NETWORK
TITLE =Control Element LSZeroPoint
//      CLR   
//      =     #LSZeroPoint.InpTrue
//      =     #LSZeroPoint.InMonTrue
      A     #Ma.InManual; 
      O     #Motor.InManual; 
      A     #LSZeroPoint.OutFlagPos; 
      S     #Motor.CmdOff; 
NETWORK
TITLE =Call Motor

      CALL #Motor ;

NETWORK
TITLE =Call Analog Output: Speed

      CALL #Speed ;

NETWORK
TITLE =Call Digital Input: LSZeroPoint

      CALL #LSZeroPoint ;

NETWORK
TITLE =Call Digital Input: Product

      CALL #Product ;

NETWORK
TITLE =Call Digital Input: SM

      CALL #SM ;

NETWORK
TITLE =States

      A     #Ma.StStopped; 
      JC    S0; 
      A     #Ma.StAdjusted; 
      JC    S6; 
      A     #Ma.StStartedFwd; 
      JC    S2; 
      A     #Ma.StStartedRev; 
      JC    S5; 
      A     #Ma.StStopping; 
      JC    S3; 
      A     #Ma.StStarting; 
      JC    S1; 
      A     #Ma.StFault; 
      JC    S4; 
      A     #Ma.StStartedFwdCal; 
      JC    S7; 
      A     #Ma.StStartedRevCal; 
      JC    S8; 
      JU    xxS0; //Initialise: goto StStopped

NETWORK
TITLE =StStopped

xxS0: S     #Ma.StStopped; 
      JU    SAVE; 
//---Transition -> StFault
S0:   A     #tmpFaultSum; 
      R     #Ma.StStopped; 
      JC    xxS4; 
//---Transition -> StStarting
      A     #Ma.OutManStartReqFwd; 
      O     #Ma.OutManStartReqRev; 
      A     #Ma.InManual; 
      ON    #Motor.StStopped; 
      R     #Ma.StStopped; 
      JC    xxS1; 
//---Transition for StAdjusted
      A     #tmpAdjusted; 
      AN    #tmpLocal; 
      R     #Ma.StStopped; 
      JC    xxS6; 
      JU    SAVE; 
NETWORK
TITLE =StStarting
//== Any transition to StStarting
xxS1: SET   ; 
      S     #Ma.StStarting; 
      JU    SAVE; 
//== Logic ====
//---Transition -> StFault
S1:   A     #tmpFaultSum; 
      R     #Ma.StStarting; 
      JC    xxS4; 
//---Transition -> StStartedUn
      A     #Motor.StStartedFwd; 
      AN    #Motor.StCalibrating; 
      R     #Ma.StStarting; 
      JC    xxS2; 
//---Transition -> StStartingRev
      A     #Motor.StStartedRev; 
      AN    #Motor.StCalibrating; 
      R     #Ma.StStarting; 
      JC    xxS5; 
//---Transition -> StStartedFwdCal
      A     #Motor.StStartedFwd; 
      A     #Motor.StCalibrating; 
      R     #Ma.StStarting; 
      JC    xxS7; 
//---Transition -> StStartingRevCal
      A     #Motor.StStartedRev; 
      A     #Motor.StCalibrating; 
      R     #Ma.StStarting; 
      JC    xxS8; 
//---Transition for StStopping
      A     #Motor.StStopped; 
      AN    #Ma.OutManStartReqFwd; 
      AN    #Ma.OutManStartReqRev; 
      O     #tmpLocal; 
      R     #Ma.StStarting; 
      JC    xxS3; 
//---Transition for StAdjusted
      A     #tmpAdjusted; 
      AN    #tmpLocal; 
      R     #Ma.StStarting; 
      JC    xxS6; 
      JU    SAVE; 
NETWORK
TITLE =StStartedFwd

xxS2: SET   ; 
      S     #Ma.StStartedFwd; 
      JU    SAVE; 
//---Transition -> StFault
S2:   A     #tmpFaultSum; //---Condition for StFault
      R     #Ma.StStartedFwd; 
      JC    xxS4; 
//---Transition -> StStartedFwdCal
      A     #Motor.StStartedFwd; 
      A     #Motor.StCalibrating; 
      R     #Ma.StStartedFwd; 
      JC    xxS7; 
//---Transition -> StStoppting
      AN    #Motor.StStartedFwd; 
      R     #Ma.StStartedFwd; 
      JC    xxS3; 
      JU    SAVE; 
NETWORK
TITLE =StStartedRev

xxS5: SET   ; 
      S     #Ma.StStartedRev; 
      JU    SAVE; 
//---Transition -> StFault
S5:   A     #tmpFaultSum; //---Condition for StFault
      R     #Ma.StStartedRev; 
      JC    xxS4; 
//---Transition -> StStartingRevCal
      A     #Motor.StStartedRev; 
      A     #Motor.StCalibrating; 
      R     #Ma.StStartedRev; 
      JC    xxS8; 
//---Transition -> StStoppting
      AN    #Motor.StStartedRev; 
      R     #Ma.StStartedRev; 
      JC    xxS3; 
      JU    SAVE; 
NETWORK
TITLE =StAdjusted

xxS6: SET   ; 
      S     #Ma.StAdjusted; 
//---Transition -> StFault
S6:   A     #tmpFaultSum; 
      R     #Ma.StAdjusted; 
      JC    xxS4; 
//---Transition for StStarting
      AN    #Motor.StStopped; 
      R     #Ma.StAdjusted; 
      JC    xxS1; 
//---Transition -> StStopping
      AN    #tmpAdjusted; 
      O     #tmpLocal; 
      R     #Ma.StAdjusted; 
      JC    xxS3; 
      JU    SAVE; 
NETWORK
TITLE =StStopping
//===Any transition to StStopping
xxS3: SET   ; 
      S     #Ma.StStopping; 
      JU    SAVE; 
//===Logic =======================
//---Transtition -> StFault
S3:   A     #tmpFaultSum; 
      R     #Ma.StStopping; 
      JC    xxS4; 
//---Transition for StAdjusted
      A     #tmpAdjusted; 
      A     #Motor.StStopped; 
      AN    #tmpLocal; // [1.2]
      R     #Ma.StStopping; 
      JC    xxS6; 
//---Transition -> StStopped
      A     #Motor.StStopped; 
      R     #Ma.StStopping; 
      JC    xxS0; 
//---Transition -> StStarting
      AN    #Motor.StStopping; 
      R     #Ma.StStopping; 
      JC    xxS1; 
      JU    SAVE; 
NETWORK
TITLE = StFault
// Any transiton to Fault  
xxS4: SET   ; 
      S     #Ma.StFault; 
//===logic
//---Transition -> StStopping
S4:   AN    #tmpFaultSum; 
      R     #Ma.StFault; 
      JC    xxS3; 
      JU    SAVE; 
NETWORK
TITLE =StStartedFwdCal

xxS7: SET   ; 
      S     #Ma.StStartedFwdCal; 
      JU    SAVE; 
//---Transition -> StFault
S7:   A     #tmpFaultSum; //---Condition for StFault
      R     #Ma.StStartedFwdCal; 
      JC    xxS4; 
//---Transition -> StStartedFwd
      A     #Motor.StStartedFwd; 
      AN    #Motor.StCalibrating; 
      R     #Ma.StStartedFwdCal; 
      JC    xxS2; 
//---Transition -> StStoppting
      AN    #Motor.StStartedFwd; 
      R     #Ma.StStartedFwdCal; 
      JC    xxS3; 
      JU    SAVE; 
NETWORK
TITLE =StStartedRevCal

xxS8: SET   ; 
      S     #Ma.StStartedRevCal; 
      JU    SAVE; 
//---Transition -> StFault
S8:   A     #tmpFaultSum; //---Condition for StFault
      R     #Ma.StStartedRevCal; 
      JC    xxS4; 
//---Transition -> StStartingRev
      A     #Motor.StStartedRev; 
      AN    #Motor.StCalibrating; 
      R     #Ma.StStartedRevCal; 
      JC    xxS5; 
//---Transition -> StStoppting
      AN    #Motor.StStartedRev; 
      R     #Ma.StStartedRevCal; 
      JC    xxS3; 
      JU    SAVE; 
NETWORK
TITLE =Global End

SAVE: SET   ; //---Clear all commands
      R     #Ma.CmdOnFwd; 
      R     #Ma.CmdOnRev; 
      R     #Ma.CmdOff; 
      R     #Ma.CmdNext; 
      R     #Ma.CmdFaultReset; 
//---------------------------------
      AN    #Motor.StStarting; 
      AN    #Motor.StStartedFwd; 
      AN    #Motor.StStartedRev; 
      ON    #Ma.InManual; 
      R     #Ma.OutManStartReqRev; 
      R     #Ma.OutManStartReqFwd; 
NETWORK
TITLE =State Code
//--Stopped, Substate ---
      A     #Ma.StStopped; 
      L     1; 
      JC    STC9; 
      A     #Ma.StStarting; 
      L     2; 
      JC    STC9; 
      A     #Ma.StStartedFwd; 
      L     3; 
      JC    STC9; 
      A     #Ma.StStartedRev; 
      L     5; 
      JC    STC9; 
      A     #Ma.StAdjusted; 
      L     6; 
      JC    STC9; 
      A     #Ma.StStopping; 
      L     7; 
      JC    STC9; 
      A     #Ma.StStartedFwdCal; 
      L     8; 
      JC    STC9; 
      A     #Ma.StStartedRevCal; 
      L     9; 
      JC    STC9; 
      L     32; // Code: fault
STC9: L     #Ma.StCode; // Old state code
      TAK   ; 
      T     #Ma.StCode; // Save state code
      <>I   ; 
      L     3; // Load code for CBit methode
      CC    "SYS_CBitCtrl"; 
END_FUNCTION_BLOCK

