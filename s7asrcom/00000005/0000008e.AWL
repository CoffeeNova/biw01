FUNCTION_BLOCK "GCS7_M_Flift1Airlock"
TITLE =Fluidlift Blower with 1 Airlock
//  
//COPYRIGHT:    (C) 1997  BUHLER AG, CH-9240 UZWIL, SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        FB 66 Machine Control:Fluidlift with 1 Airlock 
//              Blower, Blow off valve and Airlock
//
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                       DATE:
//
//FB66.4.2      A. Egli             CT3                         24-Nov-2004
//              Starting condition Airlock: Pressure.StMinP 
//FB66.4.1      A. Egli             CT3                         18-Aug-2003
//              No blow off, when Blower is started in manual mode 
//FB66.4.0      A. Egli             CT3                         17-Jun-2002
//              New Release with one block 
//FB66.3.4      A.Egli              CT3                         18-Mar-2002
//              Pressure.InLocal moved to segment "Global End"
//FB66.3.3      S. Kalberer         CT3                         23-Oct-2000
//              Blower stopped: Do not open BlowOff valve
//FB66.3.2      A. Egli             CT3                         25-Mai-2000
//              InNoWaitMinP 
//FB66.3.1      A. Egli             CT3                         2-Mai-2000
//              InMonMinP moved from segment "Interlocking" to "Gloabl End"
//FB66.3.0      A. Egli             CT3                         11-Oct-1999
//              Local data reduced
//FB66.2C       A. Egli             CT3                         27-Aug-1999
//              Interlocking Airlock with InEnable 
//FB66.2B       K. Tischer          MU664                       06-Mrz-1999
//              CC FC2 not UC FC2
//FB66.2A       A. Egli             CT3                         04-Mai-1998
//              StFault = StCode 32
//FB66.1A       A.Egli              AEE61                       5-Jul-1997
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [LL.FL1xxMAN]
//
//RESTRICTIONS: S7
//              ACCU2: Pointer to dynamic datas of the machine
//              ACCU1: Pointer to parameter datas of the machine
//
//-------------------------------------------------------------------------
AUTHOR : EA
FAMILY : GCS7LL
NAME : Fluid1
VERSION : 4.2


VAR
  Ma : "GCS7_M_FB66_Data";	
  Pressure : "GCS7_E_PressureRange";	//Element
  BlowOff : "GCS7_E_ValveControl";	//Element
  Blower : "GCS7_E_Motor";	//Element
  Airlock : "GCS7_E_Motor";	//Element
  HLInlet : "GCS7_E_DigInput";	//Element
END_VAR
VAR_TEMP
  tmpFaultStop : BOOL ;	
  tmpFaultSum : BOOL ;	
  tmpBlowerStopped : BOOL ;	
  tmpBlowerStarted : BOOL ;	
  tmpBlowOffStLN : BOOL ;	
  tmpLenDyn : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =

      L     18; 
      T     #tmpLenDyn; 

NETWORK
TITLE =PC Control
//=== Test Object number =====================
      L     "SYS_DirectCtrlDB".PC.ObjectNo; //PCControl.ObjectNo
      L     #Ma.Par.ParObjectNo; //Input ObjectNo
      <>I   ; 
      SPB   aEnd; 
//=== Test OType      ========================
      L     2066; //Input object type
      L     "SYS_DirectCtrlDB".PC.ObjectType; //PCControl.ObjectType
      <>I   ; 
      SPB   aEnd; 
//=== Test Handshake =========================
      U     "SYS_DirectCtrlDB".PC.Hsk.FExamine; // Handshake.FExamine
      SPB   aExa; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefineCmd; // Handshake.FDefineCmd
      SPB   aCmd; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefinePara; // Handshake.FDefinePara
      SPB   pPar; 
aIni: L     2; // FcInit
      UC    "SYS_DirectCtrl"; 
      SPA   aEnd; 
// Write parameter 
pPar: LAR1  P#DBX 58.0; 
      L     P#6.0; 
      +AR1  ; 
      L     DBW [AR1,P#4.0]; 
      T     #Ma.Par.ParClearingTime; 
// Write new commands from PC to Interface of group 
aCmd: U     "SYS_DirectCtrlDB".PC.Cmd1[8]; //Cmd1[8]=CmdOff
      S     #Ma.CmdOff; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[9]; //Cmd1[9]=CmdOn
      S     #Ma.CmdOn; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[10]; //Cmd1[10]=CmdNext
      S     #Ma.CmdNext; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[11]; //Cmd1[11]=CmdFaultReset
      S     #Ma.CmdFaultReset; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[13]; //Cmd1[13]=CmdManualOn
      S     #Ma.InManual; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[13]; //Cmd2[13]=CmdManualOff
      R     #Ma.InManual; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[14]; //Cmd1[14]=CmdManualOn
      S     #Ma.CmdAirlockOff; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[6]; //Cmd1[6]=CmdClearingOn
      S     #Ma.InClearing; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[6]; //Cmd2[6]=CmdClearingOff
      R     #Ma.InClearing; 
      SPA   aIni; 
aExa: TAR2  ; // Address Dynamic datas
      T     "SYS_DirectCtrlDB".GC.InDynAddr; // -->PCControl.GC.InDynAddr
      L     #tmpLenDyn; // Length Dynamic datas
      T     "SYS_DirectCtrlDB".GC.InDynLen; // -->PCControl.GC.InDynLen
      L     0; 
      T     "SYS_DirectCtrlDB".GC.InParaAddr; // -->PCControl.GC.InParaAddr
      T     "SYS_DirectCtrlDB".GC.InParaLen; // -->PCControl.GC.InParaLen
      L     1; // Code FcExamine
      UC    "SYS_DirectCtrl"; 
      L     10; //Revision
      T     "SYS_DirectCtrlDB".GC.Revision; 
aEnd: NOP   0; 

NETWORK
TITLE =Interlocking
//===Dynamic Group Orders===
      U     "GCS7_Gr_OutManualOn"; //Gr.OutManualOn
      S     #Ma.InManual; 
      U     "GCS7_Gr_OutManualOff"; //Gr.OutManualOff
      R     #Ma.InManual; 
      U     #Ma.InManual; 
      S     "GCS7_Gr_InManual"; //Gr.InManual
//--- Fault----
      U     #Pressure.StFault; 
      O     #BlowOff.StFault; 
      O     #Blower.StFault; 
      O     #Airlock.StFault; 
      O     #HLInlet.StFault; 
      =     #tmpFaultSum; 
//Temporare signal
      U     #BlowOff.StLN; 
      =     #tmpBlowOffStLN; 

      U     #Ma.Par.ParBlowerExternal; 
      U     #Ma.InBlowerStarted; 
      O     ; 
      UN    #Ma.Par.ParBlowerExternal; 
      U     #Blower.StStartedFwd; 
      =     #tmpBlowerStarted; 

      U     #Ma.Par.ParBlowerExternal; 
      UN    #Ma.InBlowerStarted; 
      O     ; 
      UN    #Ma.Par.ParBlowerExternal; 
      U     #Blower.StStopped; 
      =     #tmpBlowerStopped; 

//--- Interlocking blow off
      U     #Ma.InClearing; 
      U     #Ma.StCleared; 
//[3.3]   ON    #tmpBlowerStarted;
      O     #Ma.InBlowOff; 
      UN    #Blower.InManual; //[4.1]
      =     #BlowOff.InEnableHN; 
      UN    #BlowOff.InEnableHN; 
      =     #BlowOff.InEnableLN; 

//[->3.3  U     #Ma.CmdNext; 
//        UN    #Ma.InManual;
//        O     #Ma.CmdOn;
//        O     #tmpBlowerStarted;
      SET   ; //<-3.3]
      S     #BlowOff.CmdNext; 
// 
//--- Interlocking blower
      UN    #Pressure.StOverP; 
      UN    #Pressure.StFault; 
      =     #Ma.OutEnableBlower; 
      UN    #Pressure.StOverP; 
      UN    #Pressure.StFault; 
      U     #Ma.InEnable; 
      UN    #BlowOff.StFault; 
      UN    #Ma.CmdOff; 
      =     #Blower.InEnableFwd; 
// 
//[3.3]   U     #BlowOff.StHN;
//[3.3]   ON    #Ma.Par.ParWithBlowOff;
//[3.3]   U(;
      U     #Ma.CmdNext; 
      UN    #Ma.InManual; 
      O     #Ma.CmdOn; 
//[3.3]   ); 
      S     #Blower.CmdNext; 
// 
      U     #Ma.InSeqStop; 
      =     #Blower.InSeqStop; 
// 
//--- Interlocking airlock 
      U     #BlowOff.StLN; 
      ON    #Ma.Par.ParWithBlowOff; 
      U     #tmpBlowerStarted; 
      U     #Ma.InEnable; // [Rel 2C]
      UN    #Ma.InClearing; 
      UN    #Ma.InBlowOff; 
      UN    #Pressure.StOverP; 
      UN    #Pressure.StCtoOverP; 
      UN    #Pressure.StFault; 
      UN    #Ma.CmdOff; 
      UN    #Ma.CmdAirlockOff; 
      =     #Airlock.InEnableFwd; 
// 
      U     #Ma.CmdNext; 
      UN    #Ma.InManual; 
      O     #Ma.CmdOn; 
      U     #Pressure.StMinP; //[4.2]
      S     #Airlock.CmdNext; 
// 
      U     #Ma.InSeqStop; 
      =     #Airlock.InSeqStop; 
// 
//--- Local mode --
      U     #Ma.InLocal; 
      UN    #Ma.InManual; 
      =     #Blower.InLocal; 
      =     #Airlock.InLocal; 
      =     #HLInlet.InLocal; 
      U     #Ma.InLocal; 
      UN    #Ma.InManual; 
      U     #tmpBlowerStopped; 
      =     #BlowOff.InLocal; 
//      =     #Pressure.InLocal //[3.4]

//--- Fault Reset -------------
      U     #Ma.CmdFaultReset; 
      S     #Pressure.CmdFaultReset; 
      S     #BlowOff.CmdFaultReset; 
      S     #Blower.CmdFaultReset; 
      S     #Airlock.CmdFaultReset; 
      S     #HLInlet.CmdFaultReset; 
//Warning
      U     #Pressure.OutNoMinP; 

      =     #Ma.OutWarning; 
NETWORK
TITLE =Call PRange: Pressure

      CALL #Pressure ;

NETWORK
TITLE =Call VLS: Blow off

      UN    #Ma.Par.ParWithBlowOff; 
      SPB   el3; 
      CALL #BlowOff ;

NETWORK
TITLE =Call Blower

el3:  U     #Ma.Par.ParBlowerExternal; 
      SPB   el4; 
      CALL #Blower ;

NETWORK
TITLE =Call Airlock

el4:  CALL #Airlock ;

NETWORK
TITLE =Call Digital Input: HLInlet

      UN    #Ma.Par.ParWithHLInlet; 
      SPB   StJ0; 
      CALL #HLInlet ;

NETWORK
TITLE =Jump to actual state

StJ0: U     #Ma.StStopped; 
      SPB   S0; // ===> State
      U     #Ma.StStarted; 
      SPB   S2; // ===> State
      U     #Ma.StStarting; 
      SPB   S1; // ===> State
      U     #Ma.StStopping; 
      SPB   S3; // ===> State
      U     #Ma.StClearing; 
      SPB   S5; // ===> State
      U     #Ma.StCleared; 
      SPB   S6; // ===> State
      U     #Ma.StFault; 
      SPB   S4; // ===> State
NETWORK
TITLE =Stopped
//any Transition 
xxS0: S     #Ma.StStopped; // ===> Initialisation
//=== Logic
// Condition for StFault
S0:   U     #tmpFaultSum; 
      R     #Ma.StStopped; 
      SPB   xxS4; //--> StFault
// Condition for StStarting
      UN    #tmpBlowerStopped; 
      ON    #Airlock.StStopped; 
      R     #Ma.StStopped; 
      SPB   xxS1; //--> StStarting
      SPA   OUT; 

NETWORK
TITLE =StStarting
//any Transition 
xxS1: S     #Ma.StStarting; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S1:   U     #tmpFaultSum; 
      R     #Ma.StStarting; 
      SPB   xxS4; //--> StFault
// Condition for StStopping
      UN    #Blower.StStarting; 
      UN    #Blower.StStartedFwd; 
      UN    #tmpBlowerStarted; 
      R     #Ma.StStarting; 
      SPB   xxS3; //-->StStopping
// Condition for StStarted
      U     #BlowOff.StLN; 
      ON    #Ma.Par.ParWithBlowOff; 
      U     #tmpBlowerStarted; 
      U     #Airlock.StStartedFwd; 
      R     #Ma.StStarting; 
      SPB   xxS2; //-->StStarted
// Condition for StClearing
      UN    #Ma.Par.ParWithBlowOff; 
      O     #tmpBlowOffStLN; 
      U     #tmpBlowerStarted; 
      UN    #Airlock.StStarting; 
      R     #Ma.StStarting; 
      SPB   xxS5; //-->StClearing
      SPA   OUT; 

NETWORK
TITLE =StStarted
//any Transition 
xxS2: S     #Ma.StStarted; 
//=== Logic
// Condition for StFault
S2:   U     #tmpFaultSum; 
      R     #Ma.StStarted; 
      SPB   xxS4; //--> StFault
// Condition for StClearing
      UN    #Airlock.StStartedFwd; 
      R     #Ma.StStarted; 
      SPB   xxS5; //-->StClearing  
// Condition for StStarted
      ON    #tmpBlowerStarted; 
      R     #Ma.StStarted; 
      SPB   xxS3; //-->StStopping
      SPA   OUT; 

NETWORK
TITLE =Stopping
//any Transition 
xxS3: S     #Ma.StStopping; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S3:   U     #tmpFaultSum; 
      R     #Ma.StStopping; 
      SPB   xxS4; //--> StFault
// Condition for StStopped
      U     #tmpBlowerStopped; 
      U     #Airlock.StStopped; 
      R     #Ma.StStopping; 
      SPB   xxS0; //-->StStopped
// Condition for StStarting
      UN    #Blower.StStopping; 
      UN    #Ma.Par.ParBlowerExternal; 
      O     #tmpBlowerStarted; 
      UN    #Airlock.StStopping; 
      R     #Ma.StStopping; 
      SPB   xxS1; //-->StStarting
      SPA   OUT; 
NETWORK
TITLE =Fault
//any Transition 
xxS4: S     #Ma.StFault; 
      SPA   OUT; 
//=== Logic
S4:   U     #tmpFaultSum; 
      SPB   OUT; 
//    ---- Transition --
      R     #Ma.StFault; 
      SPA   xxS0; //-->StStopping 

NETWORK
TITLE =StClearing
//any Transition 
xxS5: S     #Ma.StClearing; 
S5J2: L     #Ma.Par.ParClearingTime; 
      T     #Ma.Par.OutClearingTime; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S5:   U     #tmpFaultSum; 
      R     #Ma.StClearing; 
      SPB   xxS4; //-->StFault
// Condition for StStopping
      UN    #tmpBlowerStarted; 
      R     #Ma.StClearing; 
      SPB   xxS3; //-->StStopping  
// Condition for StStarted
      U     #tmpBlowerStarted; 
      U     #Airlock.StStartedFwd; 
      R     #Ma.StClearing; 
      SPB   xxS2; //-->StStarted
// Condition for StCleared
      L     0; 
      L     #Ma.Par.OutClearingTime; 
      >=I   ; 
      U(    ; 
      U     #Pressure.StMinP; 
      O     #Ma.InNoWaitMinP; // [3.2]
      )     ; 
      R     #Ma.StClearing; 
      SPB   xxS6; //-->StCleared 
      UN    #BlowOff.StLN; 
      U     #Ma.Par.ParWithBlowOff; 
      O     ; 
      UN    #Pressure.StMinP; 
      UN    #Ma.InNoWaitMinP; // [3.2]
      SPB   S5J2; 
      ON    "GCS7_Gr_OutTick500ms"; //Gr.OutTick500ms
      SPB   OUT; 
      +     -5; 
      T     #Ma.Par.OutClearingTime; 
      SPA   OUT; 

NETWORK
TITLE =StCleared
//any Transition 
xxS6: S     #Ma.StCleared; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S6:   U     #tmpFaultSum; 
      R     #Ma.StCleared; 
      SPB   xxS4; //-->StFault
// Condition for StStopping
      UN    #tmpBlowerStarted; 
      R     #Ma.StCleared; 
      SPB   xxS3; //-->StStopping
// Condition for StStarted
      U     #tmpBlowerStarted; 
      U     #Airlock.StStartedFwd; 
      R     #Ma.StCleared; 
      SPB   xxS2; //-->StStarted
      SPA   OUT; 

NETWORK
TITLE =State Code
// State     StCode
// ----------------------
// StFault 32
// StStopped          1
// StStarting         2
// StStarted          3
// StClearing         4
// StCleared          5
// StClearingWarning  6
// StStopping         7
OUT:  U     #Ma.StStopped; 
      L     1; //Code=StStopped
      SPB   Code; 
      U     #Ma.StStarted; 
      L     3; //Code=StStarted
      SPB   Code; 
      U     #Ma.StCleared; 
      L     5; //Code=StCleared
      SPB   Code; 
      U     #Ma.StClearing; 
      UN    #Ma.OutWarning; 
      L     4; //Code=StClearing 
      SPB   Code; 
      U     #Ma.StClearing; 
      L     6; //Code=StWarning 
      SPB   Code; 
      U     #Ma.StStarting; 
      L     2; //Code=StStarting
      SPB   Code; 
      U     #Ma.StStopping; 
      L     7; //Code=StStopping 
      SPB   Code; 
      L     32; //Code=StFault 
Code: L     #Ma.StCode; // Old state code
      TAK   ; 
      T     #Ma.StCode; // Save state code
      <>I   ; 
      L     3; 
      CC    "SYS_CBitCtrl"; //Set change bit
NETWORK
TITLE =Global End

      CLR   ; //---Clear all commands
      =     #Ma.CmdOn; 
      =     #Ma.CmdOff; 
      =     #Ma.CmdNext; 
      =     #Ma.CmdFaultReset; 
      =     #Ma.CmdAirlockOff; 

// 
//--- Interlocking pressure 
      U     #BlowOff.StLN; 
      ON    #Ma.Par.ParWithBlowOff; 
      UN    #Airlock.StStartedFwd; 
      U     #tmpBlowerStarted; 
      =     #Pressure.InMonMinP; 
// 
//--- Local mode --       
      U     #BlowOff.InLocal; //[3.4]
      =     #Pressure.InLocal; //[3.4]
// 
//--- Interlocking HL 
      SET   ; 
      =     #HLInlet.InMonFalse; 
END_FUNCTION_BLOCK

