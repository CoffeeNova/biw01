FUNCTION_BLOCK "GCS7_M_Roll4Stand"
TITLE =4 roll stand
//  
//COPYRIGHT:    (C) 1997  BUHLER AG, CH-9240 UZWIL, SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        FB 45 Machine 4 roll stand
//
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                       DATE:
//
//FB45.4.1      A. Egli             CT3                         23-Sep-2003
//              InEnable=0 must stop motor when ParManual=1 and InManual=0
//FB45.4.0      A. Egli             CT3                         17-Jun-2002
//              New Release with one block 
//FB45.3.1      A. Egli             CT3                         08-Feb-2000
//              Condition Monitoring HL 
//FB45.3.0      A. Egli             CT3                         11-Oct-1999
//              Local data reduced 
//FB45.2B       K. Tischer          MU664                       06-Mrz-1999
//              CC FC2 not UC FC2
//FB45.2A       A. Egli             CT3                         04-Mai-1998
//              StFault = StCode 32
//FB45.1A       A.Egli              AEE61                       12-Nov-1997
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [LL.RL8xxMAN]
//
//RESTRICTIONS: S7
//              ACCU2: Pointer to dynamic datas of the machine
//              ACCU1: Pointer to parameter datas of the machine
//
//-------------------------------------------------------------------------
//
AUTHOR : EA
FAMILY : GCS7LL
NAME : Roll4
VERSION : 4.1


VAR
  Ma : "GCS7_M_FB45_Data";	
  RollsLeft : "GCS7_E_Motor";	//Element
  RollsRight : "GCS7_E_Motor";	//Element
  SMLeft : "GCS7_E_DigInput";	//Element
  SMRight : "GCS7_E_DigInput";	//Element
  HLInletLeft : "GCS7_E_DigInput";	//Element
  HLInletRight : "GCS7_E_DigInput";	//Element
END_VAR
VAR_TEMP
  tmpFaultSum : BOOL ;	
  tmpWarning : BOOL ;	
  tmpStarted : BOOL ;	
  tmpNext : BOOL ;	
  tmpLocal : BOOL ;	
  tmpEnable : BOOL ;	
  tmpSeqStop : BOOL ;	
  tmpLenDyn : INT ;	
END_VAR
BEGIN
NETWORK
TITLE =

      L     10; 
      T     #tmpLenDyn; 
NETWORK
TITLE =PC Control
//=== Test Object number =====================
      L     "SYS_DirectCtrlDB".PC.ObjectNo; //PCControl.ObjectNo
      L     #Ma.Par.ParObjectNo; //Input ObjectNo    
      <>I   ; 
      SPB   aEnd; 
//=== Test OType      ========================
      L     2045; //Input object type
      L     "SYS_DirectCtrlDB".PC.ObjectType; //PCControl.ObjectType
      <>I   ; 
      SPB   aEnd; 
//=== Test Handshake =========================
      U     "SYS_DirectCtrlDB".PC.Hsk.FExamine; // Handshake.FExamine
      SPB   aExa; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefineCmd; // Handshake.FDefineCmd
      O     "SYS_DirectCtrlDB".PC.Hsk.FDefinePara; // Handshake.FDefinePara
      SPB   aCmd; 
aIni: L     2; // FcInit
      UC    "SYS_DirectCtrl"; 
      SPA   aEnd; 
// Write new commands from PC to Interface of group 


aCmd: U     "SYS_DirectCtrlDB".PC.Cmd1[1]; //Cmd1[1]=CmdEnableLeft
      R     #Ma.InDisableLeft; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[1]; //Cmd2[1]=CmdDisableLeft
      S     #Ma.InDisableLeft; 

      U     "SYS_DirectCtrlDB".PC.Cmd1[2]; //Cmd1[2]=CmdEnableRight
      R     #Ma.InDisableRight; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[2]; //Cmd2[2]=CmdDisableRight
      S     #Ma.InDisableRight; 

      U     "SYS_DirectCtrlDB".PC.Cmd1[3]; //Cmd1[3]=CmdOverwriteHLOn
      S     #Ma.InOverrideHL; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[3]; //Cmd2[3]=CmdOverwriteHLOff
      R     #Ma.InOverrideHL; 

      U     "SYS_DirectCtrlDB".PC.Cmd1[8]; //Cmd1[8]=CmdOff
      S     #Ma.CmdOff; 

      U     "SYS_DirectCtrlDB".PC.Cmd1[9]; //Cmd1[9]=CmdOn
      S     #Ma.CmdOn; 

      U     "SYS_DirectCtrlDB".PC.Cmd1[10]; //Cmd1[10]=CmdNext
      S     #Ma.CmdNext; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[11]; //Cmd1[11]=CmdFaultReset
      S     #Ma.CmdFaultReset; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[13]; //Cmd1[13]=CmdManualOn
      S     #Ma.InManual; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[13]; //Cmd1[13]=CmdManualOff
      R     #Ma.InManual; 

      UN    "SYS_DirectCtrlDB".PC.Hsk.FDefinePara; // Handshake.FDefinePara
      SPB   aIni; 
      SPA   aIni; 
aExa: TAR2  ; // Address Dynamic data
      T     "SYS_DirectCtrlDB".GC.InDynAddr; // -->PCControl.GC.InDynAddr
      L     #tmpLenDyn; // Length Dynamic data
      T     "SYS_DirectCtrlDB".GC.InDynLen; // -->PCControl.GC.InDynLen
      L     0; 
      T     "SYS_DirectCtrlDB".GC.InParaAddr; // -->PCControl.GC.InParaAddr
      T     "SYS_DirectCtrlDB".GC.InParaLen; // -->PCControl.GC.InParaLen
      L     1; // Code FcExamine
      UC    "SYS_DirectCtrl"; 
      L     10; //Revision
      T     "SYS_DirectCtrlDB".GC.Revision; 
aEnd: NOP   0; 

NETWORK
TITLE =Interlocking
//===Global Group Orders===
      U     "GCS7_Gr_OutManualOn"; //Gr.OutManualOn
      S     #Ma.InManual; 
      U     "GCS7_Gr_OutManualOff"; //Gr.OutManualOff
      R     #Ma.InManual; 
      U     #Ma.InManual; 
      S     "GCS7_Gr_InManual"; //Gr.InManual

// temporare
      UN    #Ma.StStarting; 
      ON    #Ma.InManual; 
      R     #Ma.OutStartMan; 
      O     #Ma.CmdOn; 
      S     #Ma.OutStartMan; 

      U     #Ma.CmdNext; 
      UN    #Ma.InManual; 
      O     #Ma.OutStartMan; 
      =     #tmpNext; 

      U     #Ma.InManual; 
      ON    #Ma.InLocal; 
      U(    ; 
      U     #Ma.Par.ParManual; //[4.1]
      U     #Ma.InManual; 
      O     #Ma.InEnable; 
      )     ; 
      UN    #Ma.CmdOff; 
      =     #tmpEnable; 

      U     #Ma.InSeqStop; 
      UN    #Ma.InManual; 
      =     #tmpSeqStop; 

//--- Fault----
      U     #RollsLeft.StFault; 
      O     #RollsRight.StFault; 
      =     #tmpWarning; 

      U     #tmpWarning; 
      UN    #Ma.Par.ParWarning; 
      O     #HLInletLeft.StFault; 
      O     #SMLeft.StFault; 
      O     #HLInletRight.StFault; 
      O     #SMRight.StFault; 
      =     #tmpFaultSum; 

//--- Next
      U     #tmpNext; 
      S     #RollsLeft.CmdNext; 
      U     #RollsLeft.StStartedFwd; 
      O     #Ma.InDisableLeft; 
      U     #tmpNext; 
      S     #RollsRight.CmdNext; 

//--- Interlocking Motors
//RollLeft
      U     #tmpEnable; 
      UN    #Ma.InDisableLeft; 
      =     #RollsLeft.InEnableFwd; 
// 
      U     #tmpSeqStop; 
      =     #RollsLeft.InSeqStop; 

//RollRight
      U     #tmpEnable; 
      UN    #Ma.InDisableRight; 
      =     #RollsRight.InEnableFwd; 
// 
      U     #tmpSeqStop; 
      =     #RollsRight.InSeqStop; 

// 
//--- Local mode --
      U     #Ma.InLocal; 
      UN    #Ma.InManual; 
      =     #RollsLeft.InLocal; 
      =     #SMLeft.InLocal; 
      =     #RollsRight.InLocal; 
      =     #SMRight.InLocal; 
      =     #HLInletLeft.InLocal; 
      =     #HLInletRight.InLocal; 

//--- Fault Reset -------------
      U     #Ma.CmdFaultReset; 
      S     #RollsLeft.CmdFaultReset; 
      S     #HLInletLeft.CmdFaultReset; 
      S     #SMLeft.CmdFaultReset; 
      S     #RollsRight.CmdFaultReset; 
      S     #HLInletRight.CmdFaultReset; 
      S     #SMRight.CmdFaultReset; 

// 
//--- Monitoring 
      UN    #Ma.InOverrideHL; //[3.1] 
      =     #HLInletLeft.InMonFalse; //[3.1] 
      =     #HLInletRight.InMonFalse; //[3.1] 

      U     #Ma.InpPressureLeft; 
      =     #SMLeft.InMonTrue; 

      U     #Ma.InpPressureRight; 
      =     #SMRight.InMonTrue; 

//Startup done
      U     #RollsLeft.StStartedFwd; 
      O     #RollsLeft.StFault; 
      O     #Ma.InDisableLeft; 
      U(    ; 
      O     #RollsRight.StStartedFwd; 
      O     #RollsRight.StFault; 
      O     #Ma.InDisableRight; 
      )     ; 
      =     #Ma.OutStartupDone; 


      U     #RollsLeft.StStartedFwd; 
      O     #Ma.InDisableLeft; 
      U(    ; 
      O     #RollsRight.StStartedFwd; 
      O     #Ma.InDisableRight; 
      )     ; 
      U(    ; 
      ON    #Ma.InDisableLeft; 
      ON    #Ma.InDisableRight; 
      )     ; 
      =     #tmpStarted; 

NETWORK
TITLE =Call RollLeft

      CALL #RollsLeft ;

NETWORK
TITLE =Call Digital Input: HLInletLeft

      UN    #Ma.Par.ParWithHLInletLeft; 
      SPB   elL5; 
      CALL #HLInletLeft ;

NETWORK
TITLE =Call Digital Input: SMLeft

elL5: UN    #Ma.Par.ParWithSMLeft; 
      SPB   elL7; 
      CALL #SMLeft ;

NETWORK
TITLE =Call RollRight

elL7: CALL #RollsRight ;

NETWORK
TITLE =Call Digital Input: HLInletRight

      UN    #Ma.Par.ParWithHLInletRight; 
      SPB   elR5; 
      CALL #HLInletRight ;

NETWORK
TITLE =Call Digital Input: SMRight

elR5: UN    #Ma.Par.ParWithSMRight; 
      SPB   StJ0; 
      CALL #SMRight ;

NETWORK
TITLE =Actual State
// StFault
StJ0: U     #tmpFaultSum; 
      =     #Ma.StFault; 
// StWarning
      U     #tmpWarning; 
      U     #Ma.Par.ParWarning; 
      UN    #Ma.StFault; 
      =     #Ma.StWarning; 
// StStopped
      U     #RollsLeft.StStopped; 
      U     #RollsRight.StStopped; 
      UN    #Ma.StFault; 
      =     #Ma.StStopped; 
// StStarted
      U     #tmpStarted; 
      UN    #Ma.StFault; 
      UN    #Ma.StStopped; 
      =     #Ma.StStarted; 
// StStopping
      U     #RollsLeft.InSeqStop; 
      O     #RollsRight.InSeqStop; 
      UN    #Ma.StStarted; 
      UN    #Ma.StStopped; 
      UN    #Ma.StFault; 
      UN    #Ma.StWarning; 
      =     #Ma.StStopping; 
// StStarting
      UN    #Ma.StStopped; 
      UN    #Ma.StStarted; 
      UN    #Ma.StStopping; 
      UN    #Ma.StFault; 
      UN    #Ma.StWarning; 
      =     #Ma.StStarting; 

NETWORK
TITLE =State Code
// State     StCode
// ----------------------
// StFault32
// StStopped    1
// StStarting   2
// StStarted   3
// StStopping  7
// StWarning8
      U     #Ma.StStopped; 
      L     1; //Code=StStopped
      SPB   Code; 
      U     #Ma.StStarted; 
      L     3; //Code=StStarted
      SPB   Code; 
      U     #Ma.StWarning; 
      L     8; //Code=StWarning 
      SPB   Code; 
      U     #Ma.StStarting; 
      L     2; //Code=StStarting
      SPB   Code; 
      U     #Ma.StStopping; 
      L     7; //Code=StStopping 
      SPB   Code; 
      L     32; //Code=StFault 
Code: L     #Ma.StCode; // Old state code
      TAK   ; 
      T     #Ma.StCode; // Save state code
      <>I   ; 
      L     3; 
      CC    "SYS_CBitCtrl"; //Set change bit
NETWORK
TITLE =Global End

      CLR   ; //---Clear all commands
      =     #Ma.CmdOn; 
      =     #Ma.CmdOff; 
      =     #Ma.CmdNext; 
      =     #Ma.CmdFaultReset; 

END_FUNCTION_BLOCK

