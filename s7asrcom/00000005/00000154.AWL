FUNCTION_BLOCK FB 12
TITLE =Motor Control
//
//COPYRIGHT:    (C) 1996  BUHLER AG, CH-9240 UZWIL, SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        Motor Control
//
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                       DATE:
//
//FB12.4.3      A. Egli             CT3                         22-Aug-2003
//              No Start request  if InLocal
//FB12.4.2      A. Egli             CT3                         24-Jul-2003
//              Report: StStopped 
//FB12.4.1      A. Egli             CT3                         18-Jun-2003
//              Message Fault Started=Text Nr 11 
//FB12.4.0      A. Egli             CT3                         17-Jun-2002
//              New Release with one block 
//FB12.3.2      A.Egli              CT3                         22-Mai-2002
//              StStopped: Error 11: Fault stopping    
//FB12.3.1      A.Egli              CT3                         09-Nov-2001
//              Transition StStopping-->Starting in Local mode (InpFaultDev=0)    
//              Transition StStopping-->Stopped  in Local mode (InpFaultDev=1)    
//FB12.3.0      A.Egli              CT3                         28-Okt-2001
//              StCode 30: InpFaultDev=1 and InLocal=1              
//              StCode 31: InpFaultDev=1 and InLocal=0              
//FB12.2.11     A.Egli              CT3                         13-Mar-2001
//              Transition StStarting-->StFault in Local mode              
//FB12.2.10     A.Egli              CT3                         22-Jan-2001
//              Transition StStarting-->StFault after t0              
//              Interlocking PC Direct Control command with Gr.OutManualOff
//FB12.2.9      S. Kalberer         CT3                         28-Nov-2000
//              Condition for StStarting: No #tmpHeavyStartup (Netzwerk 8)      
//FB12.2.8      A. Egli             CT3                         24-Jul-2000
//              Local mode:  Transition Stopping -> Starting adapted
//FB12.2.7      S. Kalberer         CT3                         15-Mar-2000
//              Manual mode: Transition Stopping -> Starting adapted
//FB12.2.6      S. Kalberer         CT3                         02-Nov-1999
//              Count stopping time in StFault, StCode with InLocal adapted
//FB12.2E       S. Kalberer         CT3                         07-Apr-1999
//              Set outputs in StStarted Passive -> Active
//FB12.2D       A. Egli             CT3                         21-Dec-1998
//              StStopping by change speed if ParRestartDelay is true
//              Local mode: stay in StStopped if InpFaultDev = 1
//FB12.2C       A. Egli             CT3                         23-Nov-1998
//              InLocal; StStartedFdw or StStartedRev if input is set
//FB12.2B       A. Egli             CT3                         17-Jul-1998
//              Run Monitoring Time by changing speed
//FB12.2A       A. Egli             CT3                         04-Mai-1998
//              StFault = StCode 32
//FB12.1A       S. Kalberer         AEE61                       14-Jul-1997
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [MxxMAN]
//
//RESTRICTIONS: S7
//              ACCU2: Pointer to dynamic datas of the element
//              ACCU1: Pointer to parameter datas of the element
//              CmdOff, CmdOn: always active unless local mode
//
//-------------------------------------------------------------------------
//=======================================================
//Log Message: 
//------------------------------------------------------
// 0  stopped
// 2  started forward
// 5  started reverse
// 9  fault cancelled
//10  fault device
//11  fault running
//12  fault starting
//13  fault stopping
//
//=======================================================
//StCode:  State               
//------------------------------------------------------
//32 StFault+InpFaultDev=0     fault
//31 StFault+InpFaultDev=1     fault Device        (Active)
// 1 StStopped                 Stopped
//41 Stopped.HWStop            StStopped + InHWStop 
//51 Stopped.DPFault           StStopped + DPFault
//61 StStopped.FaultDev        StStopped + FaultDevice (Passiv)
// 2 StStarting                starting
// 3 StStartedFwdSlow          started forward slow
// 4 StStartedFwdFast          started forward fast
// 5 StStartedRevSlow          started reverse slow
// 6 StStartedRevFast          started reverse fast
// 7 StStopping                stopping
// 9 StStartRequest            StStopped+CmdNext
AUTHOR : EA
FAMILY : GCS7LL
NAME : Motor
VERSION : 4.3


VAR
  StCode : INT ;	//Element state code
  InEnableRev : BOOL ;	//Enable to run the element reverse   
  InEnableFwd : BOOL ;	//Enable to run the element forward
  InSlow : BOOL ;	//Speed mode: 1= slow / 0= fast
  InpRunSlow : BOOL ;	//Digital input: 1= element is running slow
  InpRunFast : BOOL ;	//Digital input: 1= element is running fast
  InpRunRev : BOOL ;	//Digital input: 1= element is running reverse
  InpRunFwd : BOOL ;	//Digital input: 1= element is running forward
  InpFaultDev : BOOL ;	//Digital input: 1= overload or fault frequency converter
  CmdOff : BOOL ;	//Pulse to stop the element immediately (manual mode)
  CmdOn : BOOL ;	//Pulse to start the element immediately (manual mode)
  CmdNext : BOOL ;	//Pulse to start the element in automatic mode (see global flags)
  CmdFaultReset : BOOL ;	//Command to reset fault
  InLocal : BOOL ;	//1= Local mode (no fault by start with service switch)
  InManual : BOOL ;	//1= Manual/ 0=Automatic
  InReport : BOOL ;	//Report of all state transitions
  InSeqStop : BOOL ;	//Stop automatically after idling time
  InHWStop : BOOL ;	//HW stop is detected, no fault
  InDPFault : BOOL ;	//DP-Fault is detected, no fault
  OutIdling : BOOL ;	//Idling is active
  OutpRunSlow : BOOL ;	//Digital output to run slow
  OutpRunFast : BOOL ;	//Digital output to run fast
  OutpRunRev : BOOL ;	//Digital output to run reverse
  OutpRunFwd : BOOL ;	//Digital output to run forward
  spare0407 : BOOL ;	
  StStopped : BOOL ;	//Element is stopped
  StStarting : BOOL ;	//Element is starting
  StStartedFwd : BOOL ;	//Element is started forward: Next element can start
  StStopping : BOOL ;	//Element is stopping
  StFault : BOOL ;	//Element has a fault
  StStartedRev : BOOL ;	//Element is started reverse: Next Element can start
  InOutManSlow : BOOL ;	//Manual speed mode: 1= slow / 0= fast
  InOutManRev : BOOL ;	//Manual direction mode: 1= reverse / 0= forward
  OutAlarmNrLog : INT ;	//Last textnumber send to log
  Par : STRUCT 	
   ParObjectNo : INT ;	//Is used for communication with PC, e.g. for message
   ParMsgType : INT ;	//Is used for message (translation of state)
   ParHornCode : INT ;	//Is used by horn module
   ParLogOff : BOOL ;	//Report is off
   ParManual : BOOL ;	//Manual mode without interlocking
   ParRestartDelay : BOOL ;	//No restart possible in StStopping
   Par2Speed : BOOL ;	//Element with 2 speeds
   ParHeavyStartup : BOOL ;	//Element with heavy startup
   spare45 : BOOL ;	
   spare46 : BOOL ;	
   spare47 : BOOL ;	
   OutDelayFault : BOOL ;	//Delay time is running: Changing speed
   OutFlagFaultDev : BOOL ;	//Flag InpFaultDev
   ParMonTime : INT ;	//After this time outputs must be equal inputs
   ParStartingTime : INT ;	//Delay time, until the element is ready to start production
   ParStoppingTime : INT ;	//Delay time, until the element has come to a standstill
   ParIdlingTime : INT ;	//Requested idling time to stop element in automatic mode
   ParDelayTime : INT ;	//Requested fault delay time by negative flag of input
   OutMonTime : INT ;	//Actual time: Monitoring
   OutTransitionTime : INT ;	//Actual time: Starting, stopping, change direction, idling
   OutDelayTime : INT ;	//Actual time: DelayTime
   InOutManPulseLen : INT ;	//Pulse length to start a the motor
  END_STRUCT ;	
END_VAR
VAR_TEMP
  tmpLOGvalue : WORD ;	//LOG value
  tmpLenDyn : DINT ;	
  tmpReport : BOOL ;	//Global LOG all
  tmpEnableRev : BOOL ;	//Global enable reverse
  tmpEnableFwd : BOOL ;	//Global enable forward
  tmpEnable : BOOL ;	//Global enable
  tmpSlow : BOOL ;	//Global slow speed flag
  tmpDelayOver : BOOL ;	//Delay time is over
  tmpMonOver : BOOL ;	//Monitoring time is over
  tmpTimeClear : BOOL ;	//Delay- and monitoring time must be cleared
  tmpStop : BOOL ;	//States to clear outputs
  tmpInpOutpDiff : BOOL ;	//Inpputs ar different to outputs
  tmpInpFault : BOOL ;	//Fault variable
  tmpInpRunSlow : BOOL ;	//Variable to simulate InpRunSlow
  tmpHeavyStartup : BOOL ;	//Any element is starting with HeavyStartup
  tmpLocal : BOOL ;	
  tmpFaultDelayDone : BOOL ;	
  tmpStarted : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE = Start Global

      L     34; 
      T     #tmpLenDyn; //--> Len dynamic data in byte

NETWORK
TITLE =PC Control
//=== Test Object number =====================
      L     DB3.DBW   50; //PCControl.ObjectNo
      L     #Par.ParObjectNo; //Input ObjectNo
      <>I   ; 
      SPB   Ctrl; 
//=== Test OType      ========================
      L     1012; //Input object type
      L     DB3.DBW   48; //PCControl.ObjectType
      <>I   ; 
      SPB   Ctrl; 
//=== Test Handshake =========================
      U     DB3.DBX   43.3; // Handshake.FExamine
      SPB   pExa; 
      U     DB3.DBX   43.0; // Handshake.FDefineCmd
      SPB   pCmd; 
      U     DB3.DBX   43.1; // Handshake.FDefinePara
      SPB   pPar; 
pIni: L     2; // FcInit
      UC    FC     3; 
      SPA   Ctrl; 
// Write parameter 
pPar: LAR1  P#DBX 58.0; 
      L     P##Par; 
      L     DW#16#FFFFF; 
      UD    ; 
      +AR1  ; 
      L     DBW [AR1,P#8.0]; 
      T     #Par.ParMonTime; 
      L     DBW [AR1,P#10.0]; 
      T     #Par.ParStartingTime; 
      L     DBW [AR1,P#12.0]; 
      T     #Par.ParStoppingTime; 
      L     DBW [AR1,P#14.0]; 
      T     #Par.ParIdlingTime; 
      L     DBW [AR1,P#16.0]; 
      T     #Par.ParDelayTime; 
// Write new commands from PC to Interface object
pCmd: U     DB3.DBX   52.6; // CmdManSlowOn
      UN    M     12.4; //Global.OutManualOff  [2.10]
      S     #InOutManSlow; 
      U     DB3.DBX   52.7; // CmdManRevOn;
      UN    M     12.4; //Global.OutManualOff  [2.10]
      S     #InOutManRev; 
      U     DB3.DBX   53.0; // CmdOff
      UN    M     12.4; //Global.OutManualOff  [2.10]
      S     #CmdOff; 
      U     DB3.DBX   53.1; // CmdOn
      UN    M     12.4; //Global.OutManualOff  [2.10]
      S     #CmdOn; 
      U     DB3.DBX   53.2; // CmdNext
      S     #CmdNext; 
      U     DB3.DBX   53.3; // CmdFaultReset
      S     #CmdFaultReset; 
      U     DB3.DBX   53.5; // CmdManualOn
      S     #InManual; 
      U     DB3.DBX   53.6; // CmdReportOn
      S     #InReport; 
      U     DB3.DBX   54.6; // CmdManSlowOff
      R     #InOutManSlow; 
      U     DB3.DBX   54.7; // CmdManRevOff;
      R     #InOutManRev; 
      U     DB3.DBX   55.5; // CmdManualOff
      R     #InManual; 
      U     DB3.DBX   55.6; // CmdReportOff
      R     #InReport; 
      UN    DB3.DBX   52.1; // CmdOnTickFwd
      O     M     12.4; //Global.OutManualOff
      SPB   pIni; 
      L     DB3.DBW   56; // "SYS_PCControl".PC.Cmd3
      T     #Par.InOutManPulseLen; 
      SPA   pIni; 
pExa: TAR2  ; // Address Dynamic datas
      T     DB3.DBD   24; // -->PCControl.GC.InDynAddr
      L     #tmpLenDyn; // Length Dynamic datas
      T     DB3.DBW   22; // -->PCControl.GC.InDynLen
      L     0; 
      T     DB3.DBD   30; // -->PCControl.GC.InParaAddr
      T     DB3.DBW   28; // -->PCControl.GC.InParaLen
      L     1; // Code FcExamine
      UC    FC     3; 
      L     10; //Revision
      T     DB3.DBW   34; 

NETWORK
TITLE = All State Init
//===Clear tmp Variable, when nessecary
Ctrl: CLR   ; 
      =     #tmpTimeClear; 
//===Global Group Orders===
      U     M     12.5; //Global.OutManualOn
      S     #InManual; 
      U     M     12.4; //Global.OutManualOff
      R     #InManual; 
      U     #InManual; 
      S     M     13.5; //Global.InManualMode
      UN    #InManual; 
      U     #InLocal; 
      =     #tmpLocal; 
//---Report is on---
      O     M     12.6; //---Global OutReportAll
      O     #InReport; 
      =     #tmpReport; 
//---Heavy Startup---
      U     M     13.6; //---Global InHeavyStartup
      U     #Par.ParHeavyStartup; 
      =     #tmpHeavyStartup; 
//===Global Enable and Speed===
//---Enable / Manual No Interlocking Mode---
      UN    #InManual; 
      SPB   AUT; 
      U     #InEnableFwd; 
      UN    #Par.ParManual; 
      O     ; 
      UN    #InOutManRev; 
      U     #Par.ParManual; 
      =     #tmpEnableFwd; 
      U     #InEnableRev; 
      UN    #Par.ParManual; 
      O     ; 
      U     #InOutManRev; 
      U     #Par.ParManual; 
      =     #tmpEnableRev; 
//---Speed / Manual No Interlocking Mode---
      U     #InOutManSlow; 
      ON    #Par.Par2Speed; 
      =     #tmpSlow; 
      SPA   ENAB; 
//---Enable / Automatic Interlocking Mode---
AUT:  U     #InEnableFwd; 
      UN    #InHWStop; 
      UN    #InDPFault; 
      UN    #InLocal; 
      =     #tmpEnableFwd; 
      U     #InEnableRev; 
      UN    #InHWStop; 
      UN    #InDPFault; 
      UN    #InLocal; 
      =     #tmpEnableRev; 
//---Speed / Automatic Interlocking Mode---
      U     #InSlow; 
      ON    #Par.Par2Speed; 
      =     #tmpSlow; 
//---Enable / HardwareStop---
ENAB: X     #tmpEnableFwd; //---Global Enable
      X     #tmpEnableRev; 
      =     #tmpEnable; 
//---For one speed, no Inp nessecary: Simulate InpRunSlow
      UN    #Par.Par2Speed; 
      U     #OutpRunSlow; 
      =     #tmpInpRunSlow; 
// Check Input different to Output
      U     #InpRunFwd; 
      X     #OutpRunFwd; 
      O(    ; 
      U     #InpRunRev; 
      X     #OutpRunRev; 
      )     ; 
      O(    ; 
      U     #InpRunFast; 
      X     #OutpRunFast; 
      )     ; 
      O(    ; 
      O     #InpRunSlow; 
      O     #tmpInpRunSlow; 
      X     #OutpRunSlow; 
      )     ; 
      =     #tmpInpOutpDiff; 
//---Both Inputs or InpFaultDevice active
      U     #InpRunFwd; // local StStarting
      U     #InpRunRev; 
      O     ; 
      U     #InpRunSlow; // local StStarting
      U     #InpRunFast; 
      =     #tmpInpFault; 

NETWORK
TITLE =Start as Pulse

      UN    #tmpEnable; 
      ON    #InManual; 
      O     #CmdOff; 
      SPB   STP1; 
      L     0; 
      L     #Par.InOutManPulseLen; 
      >=I   ; 
      SPB   STP2; 
      S     #CmdOn; 
      UN    M     10.3; // Decrement all 200ms
      SPB   STP2; 
      +     -2; 
      T     #Par.InOutManPulseLen; 
      L     0; 
      >I    ; 
      SPB   STP2; 
      S     #CmdOff; 
STP1: L     0; 
      T     #Par.InOutManPulseLen; 
STP2: NOP   0; 

NETWORK
TITLE =Fault delay time: ParDelayTime 

//Test or Running delay time ====================
//---Condition for Delay Fault
      UN    #tmpInpOutpDiff; 
      UN    #InpFaultDev; 
      O     #InHWStop; 
      O     #InDPFault; 
      SPB   TFDO; 
      U     #StStartedFwd; 
      O     #StStartedRev; 
      UN    #Par.OutDelayFault; 
      O     #StStopped; 
      U     #tmpInpOutpDiff; 
      O     #InpFaultDev; 
      SPB   TFF1; 
TFDO: R     #tmpFaultDelayDone; 
      L     0; 
      T     #Par.OutDelayTime; 
      SPA   TFF0; 
TFF1: UN    M     10.3; // Decrement all 200ms
      L     #Par.OutDelayTime; 
      SPB   TFF3; 
      +     2; 
TFF3: T     #Par.OutDelayTime; 
      L     #Par.ParDelayTime; 
      >=I   ; 
      =     #tmpFaultDelayDone; 
      SPBN  TFF0; 
      T     #Par.OutDelayTime; 
TFF0: NOP   0; 

NETWORK
TITLE =States

      O     #StStartedFwd; 
      O     #StStartedRev; 
      =     #tmpStarted; 
      U     #StStopped; //===State machine===
      SPB   S0; 
      O     #StStartedFwd; 
      O     #StStartedRev; 
      SPB   S2; 
      U     #StStopping; 
      SPB   S3; 
      U     #StStarting; 
      SPB   S1; 
      U     #StFault; 
      SPB   S4; 
      S     #StStopped; //Initialise: goto StStopped

NETWORK
TITLE =StStopped

//---Condition for StFault
S0:   U     #tmpFaultDelayDone; // [4.0]
      O     #tmpInpFault; 
      UN    #tmpLocal; //2D:
      SPB   S0S4; 
//---Condition for StStarting: local
      UN    #tmpLocal; 
      SPB   S0J1; 
      X     #InpRunFwd; 
      X     #InpRunRev; 
      SPB   S0S1; 
      SPA   SAVE; 
//---Condition for StStopped
S0J1: O     #CmdOff; 
      ON    #tmpEnable; 
      SPB   SAVE; 
//---Condition for StStarting: automatic
      O     #CmdNext; 
      O     #CmdOn; 
      UN    #InManual; 
      UN    #InSeqStop; 
      UN    #tmpHeavyStartup; 
      SPB   S0S1; 
//---Condition for StStarting: manual 
      U     #InManual; 
      U     #CmdOn; 
      SPBN  SAVE; 
//---Transition -> StStarting
S0S1: R     #StStopped; 
      SPA   xxS1; 
//---Transition -> StFault
S0S4: R     #StStopped; 
      SPA   xxS4; 

NETWORK
TITLE =StStarting
//== Any transition to StStarting
xxS1: SET   ; 
      S     #StStarting; 
      L     #Par.ParMonTime; // Set actual vaule of timer
      T     #Par.OutMonTime; 
      L     #Par.ParStartingTime; 
      T     #Par.OutTransitionTime; 
      U     #tmpLocal; // No output set in local mode
      SPB   SAVE; 
      U     #Par.ParHeavyStartup; // Set Global InHeavyStartup
      S     M     13.6; 
      U     #tmpEnableFwd; // Set direction
      =     #OutpRunFwd; 
      U     #tmpEnableRev; 
      =     #OutpRunRev; 
      U     #tmpSlow; // Set speed
      =     #OutpRunSlow; 
      NOT   ; 
      =     #OutpRunFast; 
      SPA   SAVE; 

//== Logic ====
//---Condition for StFault
S1:   U     #tmpInpFault; 
      O     #tmpFaultDelayDone; // [4.0]
      UN    #tmpLocal; 
      SPB   S1S4; 
//---Condition for StStopped  local mode
      UN    #tmpLocal; 
      SPB   S11; 
      U     #InpRunRev; 
      XN    #InpRunFwd; 
      SPB   S1S3; 
      SPA   S12; 
//---Condition for StStopped  other modes
S11:  ON    #tmpEnable; 
      O     #CmdOff; 
      O     ; 
      U     #InSeqStop; 
      UN    #InManual; 
      O     ; 
      UN    #OutpRunFwd; 
      UN    #OutpRunRev; 
      SPB   S1S3; 
//---Condition for StStarting
S12:  UN    M     10.3; 
      L     #Par.OutTransitionTime; // Set Timer 
      SPB   S13; 
      L     #Par.OutMonTime; 
      +     -2; 
      T     #Par.OutMonTime; 
      L     #Par.OutTransitionTime; 
      +     -2; 
      T     #Par.OutTransitionTime; 
S13:  L     0; 
      <=I   ; //---Condition for StStarted
      =     #tmpDelayOver; // Starting time over
      U     #tmpDelayOver; // Started forward
      U     #tmpEnableFwd; 
      UN    #tmpInpOutpDiff; 
      O     ; 
      U     #tmpDelayOver; // Started forward local  
      U     #InpRunFwd; 
      U     #tmpLocal; 
      SPB   S1S2; 
      U     #tmpDelayOver; // Started reverse
      U     #tmpEnableRev; 
      UN    #tmpInpOutpDiff; 
      O     ; 
      U     #tmpDelayOver; // Started reverse local  
      U     #InpRunRev; 
      U     #tmpLocal; 
      SPB   S15; 
      L     #Par.OutMonTime; //---Condition for StFault
      L     0; // Monitoring time over
      <=I   ; 
//      U     #tmpDelayOver; // Starting time over [2.10]
      UN    #tmpLocal; //[2.11]
      U     #tmpInpOutpDiff; // Inp not equal Outp
      SPB   S1S4; 
      SPA   SAVE; 
S1S2: R     #StStarting; //---Transition -> StStartedFwd
      S     #StStartedFwd; 
      S     #tmpTimeClear; // Reset actual timer value
      U     #tmpHeavyStartup; // Clear Global InHeavyStartup
      R     M     13.6; 
      SPA   LOG1; 
S15:  R     #StStarting; //---Transition -> StStartedRev
      S     #StStartedRev; 
      S     #tmpTimeClear; // Reset actual timer value
      U     #tmpHeavyStartup; // Clear Global InHeavyStartup
      R     M     13.6; 
      SPA   LOG1; 
//---Transition -> StStopping
S1S3: R     #StStarting; 
      U     #tmpHeavyStartup; // Clear Global InHeavyStartup
      R     M     13.6; 
      SPA   xxS3; 
//---Transition -> StFault
S1S4: R     #StStarting; 
      U     #tmpHeavyStartup; // Clear Global InHeavyStartup
      R     M     13.6; 
      SPA   xxS4; 

NETWORK
TITLE =StStarted

S2:   U     #tmpInpFault; //---Condition for StFault
      O     #tmpFaultDelayDone; // [4.0]
      UN    #tmpLocal; 
      SPB   S2S4; 
//---Condition for StStopping: local mode
      UN    #tmpLocal; 
      SPB   S2J1; // no speed changing and no idling 
      U     #StStartedFwd; // Input Fwd goes off
      UN    #InpRunFwd; 
      O     ; 
      U     #StStartedRev; // Input Rev goes off
      UN    #InpRunRev; 
      SPB   S2S3; 
      SPA   SAVE; 
//---Condition for StStopping: autmatic
S2J1: U     #Par.Par2Speed; //[Rel 2D -->
      U     #Par.ParRestartDelay; 
      U     #tmpSlow; 
      UN    #OutpRunSlow; 
      O     ; 
      U     #Par.Par2Speed; 
      U     #Par.ParRestartDelay; 
      UN    #tmpSlow; 
      U     #OutpRunSlow; 
      SPB   S2S3; // Condition for StStoppping  Rel 2D <--]
      ON    #tmpEnable; // other modes
      O     #CmdOff; 
      O     ; 
      U     #OutpRunFwd; // Change direction: Fwd --> Rev
      U     #tmpEnableRev; 
      O     ; 
      U     #OutpRunRev; // Change direction: Rev --> Fwd
      U     #tmpEnableFwd; 
      SPB   S2S3; 
//2E:---Condition for StStarted: set direction outputs
      U     #tmpEnableFwd; 
      =     #OutpRunFwd; 
      U     #tmpEnableRev; 
      =     #OutpRunRev; 
//---Condition for StStarted: speed changing
      U     #OutpRunSlow; 
      UN    #tmpSlow; 
      U     #Par.Par2Speed; // Doubt only one speed
      UN    #Par.OutDelayFault; 
      O     ; 
      U     #OutpRunFast; //---Condition for StStarted: speed changing
      U     #tmpSlow; 
      U     #Par.Par2Speed; // Doubt only one speed
      UN    #Par.OutDelayFault; 
      SPBN  S2F1; 
      S     #Par.OutDelayFault; 
      L     #Par.ParMonTime; 
      L     #Par.ParDelayTime; 
      <=I   ; 
      SPB   S2F2; 
      L     #Par.ParMonTime; 
S2F2: T     #Par.OutMonTime; 
      SPA   SAVE; 
S2F1: U     #InpRunSlow; 
      O     #InpRunFast; 
      ON    #Par.Par2Speed; // Doubt only one speed
      SPB   S2J2; 
      U     #tmpSlow; // Set speed
      =     #OutpRunSlow; 
      NOT   ; 
      =     #OutpRunFast; 
//Test or Running delay time ====================
S2J2: U     #tmpInpOutpDiff; //---Condition for Delay Fault
      U     #Par.OutDelayFault; // Set OutDelayFault Bit
      SPB   S2T1; 
      U     #InpRunFast; 
      O     #InpRunSlow; 
      ON    #Par.Par2Speed; // Doubt only one speed
      U     #Par.OutDelayFault; 
      SPBN  S2J3; // Check Idling
      R     #Par.OutDelayFault; 
      S     #tmpTimeClear; 
      SPA   SAVE; 
S2T1: UN    M     10.3; // Decrement all 200ms
      L     #Par.OutMonTime; 
      SPB   S2T3; 
      +     -2; 
      T     #Par.OutMonTime; 
S2T3: L     0; 
      <=I   ; 
      R     #Par.OutDelayFault; 
      SPBN  SAVE; 
      U     #tmpEnable; // Condition for StFault
      SPB   S2S4; 
      SPA   S2S3; // Condition for StStoppping
//---Idling time ----------------------
S2J3: O     #InSeqStop; 
      ON    #OutIdling; // Condition to reset Idling-Time
      SPB   S2I1; 
      R     #OutIdling; 
      S     #tmpTimeClear; // Reset actual timer value
      SPA   SAVE; 
S2I1: ON    #InSeqStop; // Idling time active ?
      O     #InManual; 
      SPB   SAVE; 
      U     #OutIdling; 
      SPB   S2I2; 
      S     #OutIdling; // Preset Idling Time
      L     #Par.ParIdlingTime; 
      T     #Par.OutTransitionTime; 
S2I2: UN    M     10.3; // Set Idling Time
      L     #Par.OutTransitionTime; 
      SPB   S2I3; 
      +     -2; 
      T     #Par.OutTransitionTime; 
S2I3: L     0; 
      >I    ; // Idling time over
      SPB   SAVE; 
S2S3: R     #StStartedFwd; //---Transition -> StStopping
      R     #StStartedRev; 
      R     #Par.OutDelayFault; 
      SPA   xxS3; 
S2S4: R     #StStartedFwd; //---Transition -> StFault
      R     #StStartedRev; 
      R     #Par.OutDelayFault; 
      R     #OutIdling; 
      SPA   xxS4; 

NETWORK
TITLE =StStopping
//===Any transition to StStopping
xxS3: SET   ; 
      S     #StStopping; 
      R     #OutIdling; 
      L     #Par.ParMonTime; // Set monitoring time
      T     #Par.OutMonTime; 
      L     #Par.ParStoppingTime; // Set stopping time
      T     #Par.OutTransitionTime; 
      SPA   SAVE; 
//===Logic =======================
//---Condition for StFault
S3:   U     #tmpInpFault; 
      O     #tmpFaultDelayDone; // [4.0]
      UN    #tmpLocal; //[2.8] 
      SPB   S3S4; 
//---Condition for StStarting in InLocal
//[3.1]      U     #tmpInpFault                //[2.8]
//[3.1]      U     #tmpLocal                   //[2.8] 
//[3.1]      SPB   SAVE                        //[2.8]  
      X     #InpRunFwd; //[2.8]
      X     #InpRunRev; //[2.8]
      UN    #tmpInpFault; //[3.1]
      U     #tmpLocal; //[2.8] 
      SPB   S3S1; //[2.8] Transition -> StStarting 
//---Condition for StStarting: no Restart
      U     #Par.ParRestartDelay; 
      O     #tmpHeavyStartup; //[2.9]
      SPB   S3J2; 
      O     #CmdNext; // automatic StStarting
      O     #CmdOn; 
      UN    #InManual; 
      UN    #InSeqStop; 
      U     #tmpEnable; 
      UN    #tmpLocal; //[3.1] 
      SPB   S3S1; 
      U     #InManual; // manual StStarting
      U     #CmdOn; 
      U     #tmpEnable; // [2.7]
      SPB   S3S1; 
//---Condition for StStopping
S3J2: UN    M     10.3; 
      L     #Par.OutTransitionTime; // Set Timer 
      SPB   S3J3; 
      L     #Par.OutMonTime; //---Condition for StStopped
      +     -2; // Set actual timer
      T     #Par.OutMonTime; 
      L     #Par.OutTransitionTime; 
      +     -2; 
      T     #Par.OutTransitionTime; 
S3J3: L     0; 
      <=I   ; // Stopping time over
      =     #tmpDelayOver; 
      U     #tmpDelayOver; // Stopped
      UN    #tmpInpOutpDiff; // Inp equal Outp
      SPB   S3S0; 
      L     #Par.OutMonTime; 
      L     0; // Monitoring time over
      <=I   ; 
      =     #tmpMonOver; 
      U     #tmpMonOver; 
      U     #tmpDelayOver; // Stopping time over
      UN    #tmpInpOutpDiff; // Inp equal Outp
      SPB   S3S0; 
      U     #tmpMonOver; //---Condition for StFault
      U     #tmpInpOutpDiff; 
      O     ; 
      U     #tmpMonOver; 
      U     #tmpDelayOver; 
      U     #tmpInpOutpDiff; 
      SPBN  SAVE; 
//---Transtition -> StFault
S3S4: R     #StStopping; 
      SPA   xxS4; 
//---Transition -> StStarting
S3S1: R     #StStopping; 
      SPA   xxS1; 
//---Transition -> StStopped
S3S0: R     #StStopping; 
      S     #StStopped; 
      S     #tmpTimeClear; // Reset actual timer value
      SPA   LOG1; 

NETWORK
TITLE = StFault
// Any transiton to Fault  
xxS4: SET   ; 
      S     #StFault; 
      S     M     13.7; // Global.InFaultFlag
//    S     #tmpTimeClear               // Reset actual timer value
      CALL FC     4 (
           FcCode                   := 1,
           ParObjectType            := 1012,
           ParObjectNo              := #Par.ParObjectNo,
           ParHornCode              := #Par.ParHornCode);
      L     0; //2.6
      T     #Par.OutMonTime; 
      L     #Par.ParStoppingTime; 
      T     #Par.OutTransitionTime; 
      SET   ; 
S4S4: SPA   LOG4; 
//===logic
S4:   L     0; //---Condition to count stopping time
      L     #Par.OutTransitionTime; // Set Timer 
      >=I   ; 
      ON    M     10.3; 
      SPB   S4J1; 
      +     -2; 
      T     #Par.OutTransitionTime; 
S4J1: U     #InpFaultDev; 
      U     #tmpFaultDelayDone; // [4.0]
      UN    #tmpLocal; 
      FP    #Par.OutFlagFaultDev; 
      SPB   S4S4; 
      UN    #CmdFaultReset; //---Condition for StFault
      UN    M     12.3; // OutFaultReset
      UN    #tmpLocal; 
      SPB   SAVE; 
      U     #InpFaultDev; //---Condition for StFault with LOG
      O     #tmpInpFault; // MessageClass Error Fault stopping
      O     #tmpInpOutpDiff; 
      UN    #tmpLocal; 
      SPB   S4S4; 
      R     #StFault; //---Transition -> StStopping
      S     #StStopping; 
      R     #OutIdling; 
      L     #Par.ParMonTime; // Set monitoring time
      T     #Par.OutMonTime; 
      SPA   LOG9; 

NETWORK
TITLE =LOG Message

//LOG transition to StStopped,StStartedXxx
LOG1: UN    #tmpReport; // ReportAll?
      SPB   SAVE; 
      U     #StStartedFwd; 
      L     B#(4, 2); // MessageClass Info started fwd
      SPB   LOG; 
      U     #StStartedRev; 
      L     B#(4, 5); // MessageClass Info started rev
      SPB   LOG; 
      U     #StStopped; 
      L     B#(4, 0); // MessageClass Info stopped
      SPB   LOG; // [4.2]
      SPA   SAVE; 
//LOG transition to fault
LOG4: U     #InpFaultDev; 
      =     #Par.OutFlagFaultDev; //[4.0]
      L     B#(1, 10); // MessageClass Error fault device
      SPB   LOG; 
      U     #tmpStarted; 
      L     B#(1, 11); // MessageClass Error fault started
      SPB   LOG; 
      UN    #tmpEnable; //Fault Stopping
      L     B#(1, 13); 
      SPB   LOG; 
      L     B#(1, 12); // MessageClass Error fault starting
      SPA   LOG; 
//Log fault cancelled
LOG9: L     B#(3, 9); // MessageClass Operater "fault cancelled"
LOG:  U     #Par.ParLogOff; //---Set LOG Message
      SPB   SAVE; 
      T     #tmpLOGvalue; 
      L     W#16#FF; 
      UW    ; 
      T     #OutAlarmNrLog; 
      CALL FC    45 (// LOG Message Converter / Entry
           ObjectNo                 := #Par.ParObjectNo,
           MsgType                  := #Par.ParMsgType,
           ClassMsgTxt              := #tmpLOGvalue,//Contains Class and TextNo
           OType                    := 1012);

NETWORK
TITLE =State Code

//--Stopped, Substate ---
SAVE: UN    #StStopped; 
      SPB   STC2; 
      L     41; //Code: StStopped.HWStop
      U     #InHWStop; 
      SPB   STC9; 
      L     51; //Code: StStopped.DPFault
      U     #InDPFault; 
      SPB   STC9; 
      U     #InpFaultDev; // 
      L     30; //Code: StStopped.InpFaultDev
      SPB   STC9; // 
      U     #CmdNext; 
      UN    #tmpLocal; //[4.3]
      L     9; // Code: starting requested
      SPB   STC9; 
      L     1; // Code: stopped
      SPB   STC9; 
//--------------------
STC2: U     #StStarting; 
      L     2; // Code: starting
      SPB   STC9; 
      UN    #StStartedFwd; 
      SPB   STC3; 
      L     3; // 2.6 Code: started forward slow
      U     #InLocal; 
      U     #InpRunSlow; 
      O     #OutpRunSlow; 
      ON    #Par.Par2Speed; 
      SPB   STC9; 
      L     4; // Code: started forward fast
      SPA   STC9; 
//--------------------
STC3: UN    #StStartedRev; 
      SPB   STC4; 
      L     5; // 2.6: Code: started reverse slow
      U     #InLocal; 
      U     #InpRunSlow; 
      O     #OutpRunSlow; 
      ON    #Par.Par2Speed; 
      SPB   STC9; 
      L     6; // Code: started reverse fast
      SPA   STC9; 
//--------------------
STC4: U     #StStopping; 
      L     7; // Code: stopping
      SPB   STC9; 
      U     #InpFaultDev; // [3.0]
      L     31; // [3.0]
      SPB   STC9; // [3.0]
      L     32; // Code: fault
STC9: L     #StCode; // Old state code
      TAK   ; 
      T     #StCode; // Save state code
      <>I   ; 
      L     3; // Load code for CBit methode
      CC    FC     2; 

NETWORK
TITLE =Global End

      CLR   ; //---Clear all commands
      =     #CmdOn; 
      =     #CmdOff; 
      =     #CmdNext; 
      =     #CmdFaultReset; 
      O     #StStopped; //---Reset Hardware Outputs
      O     #StStopping; 
      O     #StFault; 
      =     #tmpStop; 
      ON    #tmpEnableFwd; // Output Forward
      O     #tmpStop; 
      R     #OutpRunFwd; 
      ON    #tmpEnableRev; // Output Reverse
      O     #tmpStop; 
      R     #OutpRunRev; 
      ON    #tmpSlow; // Output Slow
      O     #tmpStop; 
      R     #OutpRunSlow; 
      O     #tmpSlow; // Output Fast
      O     #tmpStop; 
      R     #OutpRunFast; 

//--Output for group 
      UN    #InLocal; 
      O     #InManual; 
      U     #InDPFault; 
      S     M     15.1; 

      UN    #InLocal; 
      O     #InManual; 
      U     #InHWStop; 
      S     M     15.0; 

//---Reset actual timer values
      UN    #tmpTimeClear; 
      BEB   ; 
      L     0; 
      T     #Par.OutMonTime; 
      T     #Par.OutTransitionTime; 
END_FUNCTION_BLOCK

