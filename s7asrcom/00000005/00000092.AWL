FUNCTION_BLOCK "GCS7_M_MYFB"
TITLE =Machine MYEB Moisture Control
//  
//COPYRIGHT:    (C) 1997  BUHLER AG, CH-9240 UZWIL, SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        Machine MYEB Moisture Control
//
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                      DATE:
//
//FB64.4.0      A. Egli             CT3                         17-Jun-2002
//              New Release with one block 
//FB64.3.2      Ph. Engler          MU664                      19-Feb-2002
//              _Product flowmonitor: CmdRunTimeoutTime integrated
//FB64.3.1      A.Egli              CT3                        30-Oct-2001
//              InDisableWater
//FB64.3.0      S. Kalberer         CT3                        11-Oct-1999
//              Local data reduced
//FB64.2B       S. Kalberer         CT3                        10-Aug-1998
//              Clear CmdNewValue/CmdNewJob adjusted
//FB64.2A       A. Egli             CT3                        04-Mai-1998
//              StFault = StCode 32
//FB64.1A       S. Kalberer         AEE61                      22-Oct-1997
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [LL.MYBxxMAN]
//
//RESTRICTIONS: S7
//              ACCU2: Pointer to dynamic datas of the element
//              ACCU1: Pointer to parameter datas of the element
//
//-------------------------------------------------------------------------
AUTHOR : EA
FAMILY : GCS7LL
NAME : MYEB_Ma
VERSION : 4.0


VAR
  Ma : "GCS7_M_FB64_Data";	
  MYEB_LC : "GCS7_E_MYEB";	//Element
  MYEB_GroupAlarm : "GCS7_E_DigInput";	//Element
  MYF_Product : "GCS7_E_DigInput";	//Element
  MYF_ConveyorEnable : "GCS7_E_DigOutput";	//Element
  MOZ_DosingEnable : "GCS7_E_DigOutput";	//Element
  MOZ_WaterValve : "GCS7_E_DigOutput";	//Element
  MOZ_Product : "GCS7_E_DigInput";	//Element
  MOZ_Motor : "GCS7_E_Motor";	//Element
END_VAR
VAR_TEMP
  tmpLenDyn : DINT ;	
  tmpFaultSum : BOOL ;	
  tmpFaultReset : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE =

      L     30; 
      T     #tmpLenDyn; //--> Len dynamic data in byte

NETWORK
TITLE =PC Control
//=== Test Object number =====================
      L     "SYS_DirectCtrlDB".PC.ObjectNo; //PCControl.ObjectNo
      L     #Ma.Par.ParObjectNo; //Input ObjectNo
      <>I   ; 
      SPB   aEnd; 
//=== Test OType      ========================
      L     2064; //Input object type
      L     "SYS_DirectCtrlDB".PC.ObjectType; //PCControl.ObjectType
      <>I   ; 
      SPB   aEnd; 
//=== Test Handshake =========================
      U     "SYS_DirectCtrlDB".PC.Hsk.FExamine; // Handshake.FExamine
      SPB   aExa; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefineCmd; // Handshake.FDefineCmd
      SPB   aCmd; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefinePara; // Handshake.FDefinePara
      SPB   pPar; 
aIni: L     2; // FcInit
      UC    "SYS_DirectCtrl"; 
      SPA   aEnd; 
// Write parameter 
pPar: LAR1  P#DBX 58.0; 
      L     P#6.0; 
      +AR1  ; 
      L     DBW [AR1,P#4.0]; 
      T     #Ma.Par.ParStartValuePc; 
      L     DBW [AR1,P#6.0]; 
      T     #Ma.Par.ParStartValue; 
      L     DBW [AR1,P#8.0]; 
      T     #Ma.Par.ParOffDelayFeed; 
      L     DBW [AR1,P#10.0]; 
      T     #Ma.Par.ParOnDelayWater; 
// Write new commands from PC to Interface of group 
aCmd: U     "SYS_DirectCtrlDB".PC.Cmd1[4]; //Cmd1[4]=CmdNewValue
      S     #Ma.CmdNewValue; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[5]; //Cmd1[5]=CmdNewJob
      S     #Ma.CmdNewJob; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[8]; //Cmd1[8]=CmdOff
      S     #Ma.CmdOff; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[9]; //Cmd1[9]=CmdOn
      S     #Ma.CmdOn; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[10]; //Cmd1[10]=CmdNext
      S     #Ma.CmdNext; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[11]; //Cmd1[11]=CmdFaultReset
      S     #Ma.CmdFaultReset; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[13]; //Cmd1[13]=CmdManualOn
      S     #Ma.InManual; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[15]; //Cmd1[15]=CmdManualWaterOn
      S     #Ma.InManualWaterControl; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[13]; //Cmd2[13]=CmdManualOff
      R     #Ma.InManual; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[15]; //Cmd2[15]=CmdManualWaterOff
      R     #Ma.InManualWaterControl; 
      SPA   aIni; 
aExa: TAR2  ; // Address Dynamic datas
      T     "SYS_DirectCtrlDB".GC.InDynAddr; // -->PCControl.GC.InDynAddr
      L     #tmpLenDyn; // Length Dynamic datas
      T     "SYS_DirectCtrlDB".GC.InDynLen; // -->PCControl.GC.InDynLen
      L     0; 
      T     "SYS_DirectCtrlDB".GC.InParaAddr; // -->PCControl.GC.InParaAddr
      T     "SYS_DirectCtrlDB".GC.InParaLen; // -->PCControl.GC.InParaLen
      L     1; // Code FcExamine
      UC    "SYS_DirectCtrl"; 
      L     10; //Revision
      T     "SYS_DirectCtrlDB".GC.Revision; 
aEnd: NOP   0; 

NETWORK
TITLE = Timer switch off feed and switch on water
//Timer switch off delay feed
      U     #MOZ_WaterValve.StStarted; 
      UN    #Ma.OutMoistureStart; 
      U     #Ma.OutFeedReady; 
      UN    #Ma.InProductFeed; 
      SPB   TiF0; 
      R     #Ma.OutOffDelayFeedRun; 
      L     0; //Reset timervalue to zero
      T     #Ma.Par.OutOffDelayFeed; 
      SPA   TiW; 
TiF0: U     #Ma.OutOffDelayFeedDone; 
      SPB   TiW; 
      U     #Ma.OutOffDelayFeedRun; 
      SPB   TiF1; 
      S     #Ma.OutOffDelayFeedRun; 
      L     #Ma.Par.ParOffDelayFeed; 
      T     #Ma.Par.OutOffDelayFeed; 
TiF1: UN    "GCS7_Gr_OutTick1s"; //Gr.OutTick1S
      L     #Ma.Par.OutOffDelayFeed; 
      SPB   TiF2; 
      +     -10; 
      T     #Ma.Par.OutOffDelayFeed; 
TiF2: L     0; 
      <=I   ; 
      R     #Ma.OutOffDelayFeedRun; 
      S     #Ma.OutOffDelayFeedDone; 
TiW:  U     #MOZ_Product.StTrue; 
      O     #MOZ_Product.StCtoTrue; 
      U     #MOZ_WaterValve.StStopped; 
      U     #Ma.OutFeedReady; 
      U     #Ma.InProductFeed; 
      SPB   TiW0; 
      R     #Ma.OutOnDelayWaterRun; 
      L     0; //Reset timervalue to zero
      T     #Ma.Par.OutOnDelayWater; 
      SPA   TiE; 
//Timer swtich on delay water
TiW0: U     #Ma.OutOnDelayWaterDone; 
      SPB   TiE; 
      U     #Ma.OutOnDelayWaterRun; 
      SPB   TiW1; 
      S     #Ma.OutOnDelayWaterRun; 
      L     #Ma.Par.ParOnDelayWater; 
      T     #Ma.Par.OutOnDelayWater; 
TiW1: UN    "GCS7_Gr_OutTick1s"; //Gr.OutTick1S
      L     #Ma.Par.OutOnDelayWater; 
      SPB   TiW2; 
      +     -10; 
      T     #Ma.Par.OutOnDelayWater; 
TiW2: L     0; 
      <=I   ; 
      R     #Ma.OutOnDelayWaterRun; 
      S     #Ma.OutOnDelayWaterDone; 
//---Reset timer Done bit
TiE:  UN    #Ma.InProductFeed; 
      O     #MOZ_Product.StFalse; 
      R     #Ma.OutOnDelayWaterDone; 
      U     #Ma.InProductFeed; 
      R     #Ma.OutOffDelayFeedDone; 

NETWORK
TITLE = Set moisture StartValue or StartValuePc [%]

      U     #Ma.InManualWaterControl; 
      O     #Ma.StStopped; 
      ON    #Ma.InProductFeed; 
      ON    #Ma.Par.ParWithMYEB_LC; 
      R     #Ma.OutMoistureStart; 
      SPB   MoSE; 
      UN    #MOZ_Product.StTrue; //Condition for new dosing offset
      UN    #MOZ_Product.StCtoFalse; 
      O     #MYF_Product.StTrue; 
      O     #MYF_Product.StCtoFalse; 
      O     #Ma.OutMoistureStartPc; 
      SPB   MoS1; 
      S     #Ma.OutMoistureStart; 
      S     #Ma.OutMoistureStartPc; 
      S     #Ma.CmdNewValue; 
      L     #Ma.Par.ParStartValuePc; 
      ITD   ; // 16bit --> 32bit
      DTR   ; // 32bit-DINT --> REAL
      L     1.000000e+002; 
      /R    ; 
      L     #Ma.Par.ParStartValue; 
      DTR   ; 
      *R    ; 
      RND   ; // REAL --> 32bit-DINT
      T     #MYEB_LC.InStartValue; 
      SPA   MoSE; 
MoS1: UN    #MYF_Product.StTrue; 
      UN    #MYF_Product.StCtoFalse; 
      ON    #Ma.OutMoistureStartPc; 
      SPB   MoSE; 
      R     #Ma.OutMoistureStartPc; 
      S     #Ma.CmdNewValue; 
      L     #Ma.Par.ParStartValue; 
      T     #MYEB_LC.InStartValue; 
MoSE: NOP   0; 

NETWORK
TITLE =Interlocking
//===Clear tmp Variable
//
//===Global Group Orders===
//---FaultReset is on---
      U     "GCS7_Gr_OutFaultReset"; //Gr.OutFaultReset
      O     #Ma.CmdFaultReset; 
      =     #tmpFaultReset; 
//---Manual Mode---
      U     "GCS7_Gr_OutManualOn"; //Gr.OutManualOn
      S     #Ma.InManual; 
      U     "GCS7_Gr_OutManualOff"; //Gr.OutManualOff
      R     #Ma.InManual; 
      U     #Ma.InManual; 
      S     "GCS7_Gr_InManual"; //Gr.InManual
//--- Fault----
      U     #MYEB_LC.StFault; 
      U     #Ma.Par.ParWithMYEB_LC; 
      O     ; 
      U     #MYEB_GroupAlarm.StFault; 
      U     #Ma.Par.ParWithMYEB_GroupAlarm; 
      O     #MYF_Product.StFault; 
      O     ; 
      U     #MYF_ConveyorEnable.StFault; 
      U     #Ma.Par.ParWithMYF_Conveyor; 
      O     #MOZ_DosingEnable.StFault; 
      O     #MOZ_WaterValve.StFault; 
      O     #MOZ_Product.StFault; 
      O     #MOZ_Motor.StFault; 
      =     #tmpFaultSum; 
//--- Fault Reset -------------
      U     #tmpFaultReset; 
      U     #tmpFaultSum; 
      S     #MYEB_LC.CmdFaultReset; 
      S     #MYEB_GroupAlarm.CmdFaultReset; 
      S     #MYF_Product.CmdFaultReset; 
      S     #MYF_ConveyorEnable.CmdFaultReset; 
      S     #MOZ_DosingEnable.CmdFaultReset; 
      S     #MOZ_WaterValve.CmdFaultReset; 
      S     #MOZ_Product.CmdFaultReset; 
      S     #MOZ_Motor.CmdFaultReset; 
//===Element interlocking===
//--- MYF_CoveyorEnable ----
      U     #Ma.Par.ParWithMYF_Conveyor; 
      U     #Ma.InEnable; 
      UN    #Ma.InLocal; 
      =     #MYF_ConveyorEnable.InEnable; 
//--- MOZ_Motor ----
      U     #Ma.InEnable; 
      =     #MOZ_Motor.InEnableFwd; 
//+++Feeding ready+++
      U     #MYF_ConveyorEnable.StStarted; 
      ON    #Ma.Par.ParWithMYF_Conveyor; 
      O     #Ma.InManualWaterControl; 
      U     #MOZ_Motor.StStartedFwd; 
      =     #Ma.OutFeedReady; 
//---MOZ_DosingEnable---
      U     #MOZ_Product.StTrue; 
      O     #MOZ_Product.StCtoFalse; 
      U     #Ma.OutFeedReady; 
      U(    ; 
      O     #Ma.OutOnDelayWaterDone; 
      O     #Ma.OutOffDelayFeedRun; 
      )     ; 
      U(    ; 
      ON    #Ma.OutMoistureStart; 
      ON    #MYEB_LC.OutNewValueActive; 
      )     ; 
      UN    #tmpFaultSum; 
      UN    #Ma.InManualWaterControl; 
      UN    #Ma.InDisableWaterDosing; //[3.1]
      U     #Ma.InEnable; 
      UN    #Ma.InLocal; 
      =     #MOZ_DosingEnable.InEnable; 
      S     #MOZ_DosingEnable.CmdNext; 
//---MOZ_WaterValve---
      U     #MOZ_Product.StTrue; 
      O     #MOZ_Product.StCtoFalse; 
      U     #Ma.OutFeedReady; 
      U(    ; 
      O     #Ma.OutMoistureStart; 
      O     #MOZ_DosingEnable.InEnable; 
      O     #Ma.OutOnDelayWaterDone; 
      O     #Ma.OutOffDelayFeedRun; 
      )     ; 
      UN    #Ma.InDisableWaterDosing; //[3.1]
      UN    #tmpFaultSum; 
      UN    #Ma.InLocal; 
      =     #MOZ_WaterValve.InEnable; 
      S     #MOZ_WaterValve.CmdNext; 
//---Set CmdNext---
      U     #Ma.CmdOn; 
      U     #Ma.InManual; 
      O     ; 
      U     #Ma.CmdNext; 
      UN    #Ma.InManual; 
      S     #MYF_ConveyorEnable.CmdNext; 
      S     #MOZ_Motor.CmdNext; 
//---Set CmdOff---
      U     #Ma.CmdOff; 
      S     #MYF_ConveyorEnable.CmdOff; 
      S     #MOZ_Motor.CmdOff; 
      S     #MOZ_WaterValve.CmdOff; 
      S     #MOZ_DosingEnable.CmdOff; 
//--- Local&ManualWater mode --
      U     #Ma.InLocal; 
      O     #Ma.InManualWaterControl; 
      =     #MYEB_LC.InLocal; 
      =     #MYEB_GroupAlarm.InLocal; 
      =     #MYF_ConveyorEnable.InLocal; 
      =     #MOZ_DosingEnable.InLocal; 
      U     #Ma.InLocal; 
      =     #MOZ_Motor.InLocal; 
      =     #MOZ_WaterValve.InLocal; 
      =     #MOZ_Product.InLocal; 
      =     #MYF_Product.InLocal; 
//---Switch on monitoring the digital input
      U     #Ma.Par.ParWithMYEB_GroupAlarm; 
      =     #MYEB_GroupAlarm.InMonTrue; 

      U     #Ma.InEnable; 
      U     #Ma.InProductFeed; 
      FP    #MOZ_Product.InMonTrue; // [3.2]  ( =  -> FP)
      S     #MOZ_Product.CmdRunTimeoutTime; // [3.2]

      U     #Ma.InEnable; 
      U     #Ma.InProductFeed; 
      UN    #Ma.InManualWaterControl; 
      FP    #MYF_Product.InMonTrue; // [3.2]  ( =  -> FP)
      S     #MYF_Product.CmdRunTimeoutTime; // [3.2]

NETWORK
TITLE = Call MYEB Moisture Control Unit: MYEB_LC

      UN    #Ma.Par.ParWithMYEB_LC; 
      SPB   MYEB; 
//---Interlocking
      U     #Ma.CmdNewValue; 
      UN    #MYEB_LC.CmdNewValue; //2B:
      R     #Ma.CmdNewValue; 
      S     #MYEB_LC.CmdNewValue; 
      UN    #MYEB_LC.CmdNewValue; 
      UN    #MYEB_LC.OutNewValueActive; 
      UN    #Ma.OutMoistureStartPc; 
      R     #Ma.OutMoistureStart; 
      U     #Ma.CmdNewJob; 
      UN    #MYEB_LC.CmdNewJob; //2B:
      R     #Ma.CmdNewJob; 
      S     #MYEB_LC.CmdNewJob; 
//---calling the element
      CALL #MYEB_LC ;

NETWORK
TITLE =Call Digital Input: MYEB_GroupAlarm 

MYEB: UN    #Ma.Par.ParWithMYEB_GroupAlarm; 
      SPB   MYFB; 
      CALL #MYEB_GroupAlarm ;

NETWORK
TITLE =Call Digital Input: MYF_Product

MYFB: CALL #MYF_Product ;

NETWORK
TITLE =Call Digital Output: MYFConveyorEnable

      UN    #Ma.Par.ParWithMYF_Conveyor; 
      SPB   MOZ; 
      CALL #MYF_ConveyorEnable ;

NETWORK
TITLE =Call Digital Output: MOZDosingEnable

MOZ:  CALL #MOZ_DosingEnable ;

NETWORK
TITLE =Call Digital Output: MOZWaterValve

      CALL #MOZ_WaterValve ;

NETWORK
TITLE =Call Digital Input: MOZ_Product

      CALL #MOZ_Product ;

NETWORK
TITLE =Call Motor Control: MOZ_Motor

      CALL #MOZ_Motor ;

NETWORK
TITLE =Jump to actual state
//===State machine===
      U     #Ma.StStopped; 
      SPB   S0; 
      U     #Ma.StStarted; 
      SPB   S2; 
      U     #Ma.StStarting; 
      SPB   S1; 
      U     #Ma.StStopping; 
      SPB   S3; 
      U     #Ma.StFault; 
      SPB   S4; 
NETWORK
TITLE =Stopped
//any Transition 
xxS0: S     #Ma.StStopped; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S0:   U     #tmpFaultSum; 
      R     #Ma.StStopped; 
      SPB   xxS4; //--> ST_FAULT:
// Condition for StStarting
      UN    #MYF_ConveyorEnable.StStopped; 
      UN    #MYF_ConveyorEnable.StFalse; 
      U     #Ma.Par.ParWithMYF_Conveyor; 
      ON    #MOZ_Motor.StStopped; 
      R     #Ma.StStopped; 
      SPB   xxS1; //--> StStarting
      SPA   OUT; 
NETWORK
TITLE =StStarting
//any Transition 
xxS1: S     #Ma.StStarting; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S1:   U     #tmpFaultSum; 
      R     #Ma.StStarting; 
      SPB   xxS4; //--> StFault
// Condition for StStopping
      U     #MYF_ConveyorEnable.StStopped; 
      ON    #Ma.Par.ParWithMYF_Conveyor; 
      U     #MOZ_Motor.StStopped; 
      R     #Ma.StStarting; 
      SPB   xxS3; //-->StStopping
// Condition for StStarted
      U     #Ma.OutFeedReady; 
      R     #Ma.StStarting; 
      SPB   xxS2; //-->StStarted
      SPA   OUT; 
NETWORK
TITLE =StStarted
//any Transition 
xxS2: S     #Ma.StStarted; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S2:   U     #tmpFaultSum; 
      R     #Ma.StStarted; 
      SPB   xxS4; //--> StFault
// Condition for StStopping
      U     #MYF_ConveyorEnable.StStopped; 
      U     #Ma.Par.ParWithMYF_Conveyor; 
      UN    #Ma.InManualWaterControl; 
      ON    #MOZ_Motor.StStartedFwd; 
      R     #Ma.StStarted; 
      SPB   xxS3; //-->StStopping
      SPA   OUT; 

NETWORK
TITLE =Stopping
//any Transition 
xxS3: S     #Ma.StStopping; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S3:   U     #tmpFaultSum; 
      R     #Ma.StStopping; 
      SPB   xxS4; //--> StFault
// Condition for StStopped
      U     #MYF_ConveyorEnable.StStopped; 
      O     #MYF_ConveyorEnable.StFalse; 
      ON    #Ma.Par.ParWithMYF_Conveyor; //Element used?
      U     #MOZ_DosingEnable.StStopped; 
      U     #MOZ_WaterValve.StStopped; 
      U     #MOZ_Motor.StStopped; 
      R     #Ma.StStopping; 
      SPB   xxS0; //-->StStopped
// Condition for StStarting
      UN    #MYF_ConveyorEnable.StStopped; 
      UN    #MYF_ConveyorEnable.StFalse; 
      ON    #Ma.Par.ParWithMYF_Conveyor; //Element used?
      UN    #MOZ_Motor.StStopped; 
      UN    #MOZ_Motor.StStopping; 
      R     #Ma.StStopping; 
      SPB   xxS1; //-->StStarting
      SPA   OUT; 
NETWORK
TITLE =Fault
//any Transition 
xxS4: S     #Ma.StFault; 
      SPA   OUT; 
//=== Logic
S4:   U     #tmpFaultSum; 
      UN    #tmpFaultReset; 
      UN    #Ma.InLocal; 
      SPB   OUT; 
// Condition for StStopping
      UN    #tmpFaultSum; 
      R     #Ma.StFault; 
      SPB   xxS3; //-->StStopping
      SPA   OUT; 

NETWORK
TITLE =Global End

OUT:  CLR   ; //---Clear all commands
      =     #Ma.CmdOn; 
      =     #Ma.CmdOff; 
      =     #Ma.CmdNext; 
      =     #Ma.CmdFaultReset; 

NETWORK
TITLE =State Code
// State                 StCode    
// -----------------------------
// StFault                  32
// StStopped                1
// StStarting               2
// StStartedWait            3
// StStopping               4
// StStartedMoistureStart   5
// StStartedMoisture        6
      U     #Ma.StStopped; 
      L     1; // Code: stopped
      SPB   STC9; 
      U     #Ma.StStarting; 
      L     2; // Code: starting
      SPB   STC9; 
      U     #Ma.OutMoistureStart; 
      U     #Ma.OutFeedReady; 
      L     5; // Code: started moisture start
      SPB   STC9; 
      U     #MOZ_DosingEnable.StStarted; 
      O     #Ma.InManualWaterControl; 
      U     #MOZ_WaterValve.StStarted; 
      U     #Ma.OutFeedReady; 
      L     6; // Code: started moisture
      SPB   STC9; 
      U     #Ma.OutFeedReady; 
      L     3; // Code: started wait
      SPB   STC9; 
      U     #Ma.StStopping; 
      L     4; // Code: stopping
      SPB   STC9; 
      L     32; // 2A: Code: fault
STC9: L     #Ma.StCode; // Old state code
      TAK   ; 
      T     #Ma.StCode; // Save state code
      <>I   ; 
      L     3; // Load code for CBit methode
      CC    "SYS_CBitCtrl"; 
END_FUNCTION_BLOCK

