FUNCTION_BLOCK FB 34
TITLE =MYFC/MOZF Liquids Flow Control
//  
//COPYRIGHT:    (C) 2002  BUHLER AG, CH-9240 UZWIL, SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        Element MYFC/MOZF Liquids Flow Control
//
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                      DATE:
//
//FB34.1.1      A.Egli              CT3                        17-Nov-2003
//              Alarm 90: Fault not DPRemoteControl
//FB34.1.0      A. Egli             CT3                        02-Jun-2002
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [MYFCxxMAN]
//
//RESTRICTIONS: S7
//-------------------------------------------------------------------------
//
//=======================================================
//Log Message: 
//------------------------------------------------------
//0     = Fault Cannceled
//1..79 = AlarmLC : Alarmnumber see manual of MYFC
//90   = Remote Control
//91   = StStopped
//92   = StDosing
//93   = StWaiting
//94   = Timeout starting
//95   = Timeout stopping
//96   = Communication fault
//97   = FaultManualMode
//98   = FaultLocalMode
//
//=======================================================
//StCode:  State               
//------------------------------------------------------
//32  StFault         
// 1  StStoppped      
// 2  StStarting      
// 3  StDosing        
//13  StDosing.Manual  
// 4  StWaiting       
// 7  StStopping      
//41  Stopped.HWStop        = StStopped + InHWStop
//51  Stopped.DPFault       = StStopped + InDPFault
AUTHOR : EA
FAMILY : GCS7LL
NAME : MYFCMOZE
VERSION : 1.1


VAR
  StCode : INT ;	//Element state code
  InEnable : BOOL ;	//Enable to dosing water
  InLocalWaterControl : BOOL ;	//1=Local Water Control enabled
  InManualWaterControl : BOOL ;	//1=Manual controled water enabled
  InSimulation : BOOL ;	//Simulation with DPSim (only DP)
  spare0204 : BOOL ;	
  CmdNewJob : BOOL ;	//Clear actual values
  InHWStop : BOOL ;	//No Fault, Element changes to StStopped
  InDPFault : BOOL ;	//No Fault, Element changes to StStopped
  CmdOff : BOOL ;	//Pulse to stopp the element immediately (manual mode)
  CmdOn : BOOL ;	//Pulse to start  the element immediately (manual mode)
  CmdNext : BOOL ;	//Pulse to start the element in automatic mode (see global flags)
  CmdFaultReset : BOOL ;	//Command to reset fault
  InLocal : BOOL ;	//1= Local mode (no fault by start with service switch)
  InManual : BOOL ;	//1=Manual/ 0=Automatic
  InReport : BOOL ;	//Report of all state transitions
  spare37 : BOOL ;	
  OutFaultCom : BOOL ;	//Communication fault
  OutFaultMode : BOOL ;	//Wrong mode 
  OutFaultRelevant : BOOL ;	//Relevant fault MYFC or MOZF
  spare0403 : BOOL ;	
  spare0404 : BOOL ;	
  spare0405 : BOOL ;	
  OutpEnable : BOOL ;	//24 V Enable signal water dosing
  OutWrongValue : BOOL ;	//Wrong nominal values, rejected by MEAF
  StStopped : BOOL ;	//Element is disabled
  StStarting : BOOL ;	//Element is starting
  StStopping : BOOL ;	//Element is sopping
  StDosing : BOOL ;	//Element is dosing
  StFault : BOOL ;	//Element has a communication or device fault
  StWaiting : BOOL ;	//Element is enabled, Waiting for Product
  OutWarning : BOOL ;	//Warning
  InMoisture : DINT ;	//[0.0 ... 99.9%] or [0..6500.0 l/h]     Is send to LC
  InOffsetMoisture : INT ;	//[-99.99 ... 99.99%]    Is send to MYFC
  InDosingMax : DINT ;	//[0.0 .. 99999.9 l/h] Is send to MYFC
  InProductGroup : INT ;	//[0..99]              Is send to MYFC
  spare18 : DINT ;	
  OutMoisture : INT ;	//[0.0 ... 99.9%]      Is read from LC
  OutFlowrateProduct : DINT ;	//[0.. 999999 kg/h]    Is read from MYFC  [de: Istleistung Produkt]
  OutFlowrateWater : DINT ;	//[0.. 6500.0 l/h]    Is read from LC  [de: Istleistung MOZF]
  OutAlarmNrMYFC : INT ;	//Is read from MYFC
  OutAlarmNrMOZF : INT ;	//Is read from LC
  OutTotalProduct : DINT ;	//Is calculated by element
  OutTotalWater : DINT ;	//Is calculated by element
  OutNotErasableWater : DINT ;	//[0..99'999'999.9 l]  Is read from LC
  OutNotErasableProduct : DINT ;	//[0..999'999'999 kg]  Is read from MYFC
  spare52 : DINT ;	
  spare56 : INT ;	
  OutAlarmNrLog : INT ;	
  Par : STRUCT 	
   ParObjectNo : INT ;	//Is used for communication with PC, e.g. for message
   ParMsgType : INT ;	//Is used for message (translation of state)
   ParHornCode : INT ;	//Is used by horn module
   ParLogOff : BOOL ;	//Report is off
   ParManual : BOOL ;	//Manual mode without interlocking
   ParMOZF : BOOL ;	//1=MOZF / 0=MYFC
   ParDP : BOOL ;	//1=DP / 0=Opto22
   ParFilter : STRUCT 	
    A05_24VToLow : BOOL ;	
    A07ADRange : BOOL ;	
    A08ADCalibration : BOOL ;	
    A09ADFunction : BOOL ;	
    A10ADSupply : BOOL ;	
    A11AnalogInput : BOOL ;	
    AxxCommunication : BOOL ;	//A12: Serial Interface ; A14=DPFault
    A17InternalCom : BOOL ;	
    A26Tolerance : BOOL ;	
    A30ZeroTara : BOOL ;	
    A38Slide : BOOL ;	
    A39Leck : BOOL ;	
    A54RelaisMOZF : BOOL ;	
    A55Moisture : BOOL ;	
    A56TemperatureInternal : BOOL ;	
    A57TemperatureExternal : BOOL ;	
    A58SignalDumping : BOOL ;	
    A59BulkDesity : BOOL ;	
    A60Niveau : BOOL ;	
    A63LevelProbe : BOOL ;	
    A64AlarmMOZE : BOOL ;	
    A65MinFlowrate : BOOL ;	
    A66MaxFlowrate : BOOL ;	
    A67ToleranceWater : BOOL ;	
   END_STRUCT ;	
   ParComDB : INT ;	//OPTO22: Communication DB
   ParLCIdx : INT ;	//OPTO22: Index of data record
   ParLCAddr : INT ;	//OPTO22: Address of LC Opto22 
   ParIOByteNr : INT ;	//PROFIBUS: Address of first input and output byte
   ParMonTime : INT  := 20;	//After this time outputs must be equal inputs
   spare20 : DINT ;	
   spare24 : DINT ;	
   OutMonTime : INT ;	//Actual time: Monitoring
   OutFlags : STRUCT 	
    OutFaultResetDone : BOOL ;	
    OutAlarmReadAgain : BOOL ;	
    OutTestNewAlarm : BOOL ;	
    OutRelevantFaultMOZF : BOOL ;	//Relevant fault number
    OutRelevantFaultMYFC : BOOL ;	//Relevant fault number
    OutNoAlarmMOZF : BOOL ;	//Alarmnumber 0 is read form LC
    OutNoAlarmMYFC : BOOL ;	//Alarmnumber 0 is read form LC
    OutComFaultRead : BOOL ;	//Only DP
    OutComFaultSend : BOOL ;	//Only DP
    spare03 : BOOL ;	
    spare04 : BOOL ;	
    spare05 : BOOL ;	
   END_STRUCT ;	
   Command : STRUCT 	//Only used with DP Communication
    spare10 : BOOL ;	
    spare11 : BOOL ;	
    spare12 : BOOL ;	
    spare13 : BOOL ;	
    spare14 : BOOL ;	
    spare15 : BOOL ;	
    spare16 : BOOL ;	
    AcceptNewDataReady : BOOL ;	//de: Quittierung neue Werte Bereit
    spare2 : BYTE ;	
    spare3 : BYTE ;	
    CommandReady : BOOL ;	//de: Steuersignale gültig
    spare41 : BOOL ;	
    spare42 : BOOL ;	
    spare43 : BOOL ;	
    spare44 : BOOL ;	
    ResetAlarm : BOOL ;	//de: Alarm löschen
    NewSendData : BOOL ;	//de: Aenderung Sendedaten
    AcceptNewRcvData : BOOL ;	//de: Quittierung Aenderung Empfangsdatensatz
   END_STRUCT ;	
   Status : STRUCT 	//Only used with DP Communication
    Enable24V : BOOL ;	//Dosing release
    Dosing : BOOL ;	//de: Wasser dosiert
    Remote : BOOL ;	//Remote=1 /Local=0
    Manual : BOOL ;	//de: Hand
    Level : BOOL ;	//1=Covered  de: Sonde Netzgeraet 
    Active : BOOL ;	//de: Netzung aktiv
    spare16 : BOOL ;	
    NewDataReady : BOOL ;	//de: Neue Werte Bereit
    spare2 : BYTE ;	
    spare3 : BYTE ;	
    spare40 : BOOL ;	
    spare41 : BOOL ;	
    spare42 : BOOL ;	//de: Stuerung Remote
    RemoteControlDP : BOOL ;	//de: Sollwertvorgabe Remote
    WrongValue : BOOL ;	//de: Falscher Sollwert
    SumFault : BOOL ;	//de: Sammelalarm
    AcceptNewSendData : BOOL ;	//de: Quittierung Aenderung Sendedaten
    NewRcvData : BOOL ;	//de: Aenderung Empfangsdaten
   END_STRUCT ;	
  END_STRUCT ;	
END_VAR
VAR_TEMP
  tmpFilter : ARRAY  [0 .. 95 ] OF BOOL ;	
  tmpLOGvalue : WORD ;	//LOG value
  tmpCommand : INT ;	
  tmpFBNO : INT ;	//Number of the actual FB
  tmpFault : BOOL ;	
  tmpOff : BOOL ;	
  tmpOn : BOOL ;	
  tmpLocal : BOOL ;	
  tmpEnable : BOOL ;	
  tmpReport : BOOL ;	
  tmpLenDyn : DINT ;	
  tmpAddr : WORD ;	
  tmpReturn : INT ;	
  tmpComDB : INT ;	
  Set001 : STRUCT 	
   OutMoistureAc : BYTE ;	//[0.0 ... 99.9%]      Is read from LC
   spare9 : BYTE ;	
   OutFlowRateMOZF : INT ;	//[0.. 99999.9 l/h]    Is read from LC  [de: Istleistung MOZF]
   OutFlowRateProduct : DINT ;	//[0.. 999999 kg/h]    Is read from MYFC  [de: Istleistung Produkt]
   OutNotErasableTotalWater : DINT ;	//[0..99'999'999.9 l]  Is read from LC
   spare20 : BYTE ;	
   OutRecipeNr : BYTE ;	
   OutAlarmNumberMYFC : BYTE ;	//Is read from MYFC
   OutAlarmNumberMOZF : BYTE ;	//Is read from LC
  END_STRUCT ;	
  Set136 : STRUCT 	
   InMoistureNom : INT ;	//[0.00 ... 25.0%]      Is send to LC
   spare10 : INT ;	
   InMoistureOffset : INT ;	//[-99.99 ... 99.99%]    Is send to MYFC
   InDosingMax : WORD ;	//[0.0 .. 99999.9 l/h] Is send to MYFC
   InProductGroup : BYTE ;	//[0..99]              Is send to MYFC
   Spare17 : BYTE ;	
   Spare18 : DWORD ;	
   Spare22 : WORD ;	
  END_STRUCT ;	
  DPData : STRUCT 	
   StatusCommand : DWORD ;	
   NrSndDataSet : BYTE ;	//de: Nummer Sendedatensatz
   IdxSndDataSet : BYTE ;	//de: Index Sendedatensatz
   NrRcvDataSet : BYTE ;	//de: Nummer Empfangsdatensatz
   IdxRcvDataSet : BYTE ;	//de: Index Empfangsdatensatz
   Data : ARRAY  [1 .. 4 ] OF DINT ;	
  END_STRUCT ;	
  tmpWtWater : DINT ;	
  tmpWtProduct : DINT ;	
  tmpCalculate : BOOL ;	
  tmpNewAlarmNumber : BOOL ;	
  tmpCallBackFuction : BOOL ;	//Call back function is active
  tmpFaultMonitoringStart : BOOL ;	
  tmpFaultMonitoringStop : BOOL ;	
END_VAR
BEGIN
NETWORK
TITLE = Start Global

      L     #Par.ParComDB; 
      T     #tmpComDB; 

      L     34; 
      T     #tmpFBNO; 

      L     102; 
      T     #tmpLenDyn; //--> Len dynamic data in byte

      SET   ; 
      R     #tmpCalculate; 
      R     #tmpCallBackFuction; 
      R     #tmpNewAlarmNumber; 
      R     #tmpFaultMonitoringStart; 
      R     #tmpFaultMonitoringStop; 

//tmpLocal
      U     #InLocal; 
      UN    #InManual; 
      =     #tmpLocal; 

NETWORK
TITLE =

      LAR1  P##tmpFilter; 
      L     0; 
      T     D [AR1,P#0.0]; //tmpFilter[00..31]
      T     D [AR1,P#0.0]; //tmpFilter[32..63]
      T     D [AR1,P#0.0]; //tmpFilter[64..95]
      SET   ; 
      S     #tmpFilter[13]; 
      S     #tmpFilter[18]; 
      U     #Par.ParFilter.A05_24VToLow; 
      =     #tmpFilter[5]; 
      U     #Par.ParFilter.A07ADRange; 
      =     #tmpFilter[7]; 
      U     #Par.ParFilter.A08ADCalibration; 
      =     #tmpFilter[8]; 
      U     #Par.ParFilter.A09ADFunction; 
      =     #tmpFilter[9]; 
      U     #Par.ParFilter.A10ADSupply; 
      =     #tmpFilter[10]; 
      U     #Par.ParFilter.A11AnalogInput; 
      =     #tmpFilter[11]; 
      U     #Par.ParFilter.AxxCommunication; 
      =     #tmpFilter[12]; 
      =     #tmpFilter[14]; 
      U     #Par.ParFilter.A17InternalCom; 
      =     #tmpFilter[17]; 
      U     #Par.ParFilter.A26Tolerance; 
      =     #tmpFilter[26]; 
      U     #Par.ParFilter.A30ZeroTara; 
      =     #tmpFilter[30]; 
      U     #Par.ParFilter.A38Slide; 
      =     #tmpFilter[38]; 
      U     #Par.ParFilter.A39Leck; 
      =     #tmpFilter[39]; 
      U     #Par.ParFilter.A54RelaisMOZF; 
      =     #tmpFilter[54]; 
      U     #Par.ParFilter.A55Moisture; 
      =     #tmpFilter[55]; 
      U     #Par.ParFilter.A56TemperatureInternal; 
      =     #tmpFilter[56]; 
      U     #Par.ParFilter.A57TemperatureExternal; 
      =     #tmpFilter[57]; 
      U     #Par.ParFilter.A58SignalDumping; 
      =     #tmpFilter[58]; 
      U     #Par.ParFilter.A59BulkDesity; 
      =     #tmpFilter[59]; 
      U     #Par.ParFilter.A60Niveau; 
      =     #tmpFilter[60]; 
      U     #Par.ParFilter.A63LevelProbe; 
      =     #tmpFilter[63]; 
      U     #Par.ParFilter.A64AlarmMOZE; 
      =     #tmpFilter[64]; 
      U     #Par.ParFilter.A65MinFlowrate; 
      =     #tmpFilter[65]; 
      U     #Par.ParFilter.A66MaxFlowrate; 
      =     #tmpFilter[66]; 
      U     #Par.ParFilter.A67ToleranceWater; 
      =     #tmpFilter[67]; 

NETWORK
TITLE = Call back function (***Opto22***)
////*************************************************
////***             O P T O 22                    ***
////*************************************************
//
//This functions are called by FBxxx (COM) 
      U     #Par.ParDP; 
      SPB   PC; 
      AUF   DB [#tmpComDB]; 
      L     0; 
      L     DBW   32; //COM.Element.CODE;
      ==I   ; 
      SPB   PC; 
//Check if object has moved
      L     #Par.ParObjectNo; 
      L     DBD   60; //COM.LC0.AddrPara;       
      ==D   ; 
      SPB   COok; 
      BEB   ; 
//=============================================
COok: S     #tmpCallBackFuction; 
      L     DBB   76; //COM.Telegram.Command;
      T     #tmpCommand; 
      L     1; 
      L     DBW   32; //COM.Element.CODE;
      ==I   ; 
      SPB   Send; 
      L     2; 
      ==I   ; 
      SPB   Rcv; 
      L     4; //NAK
      L     DBW   32; //COM.Element.CODE;
      ==I   ; 
      S     #OutFaultCom; //fault MYEB communication
      BEA   ; 
//--------------------------
//Send C
//--------------------------
Send: NOP   0; 
      L     #tmpCommand; 
      L     'C'; 
      <>I   ; 
      SPB   SndF; 
// command 1
      U     #CmdFaultReset; 
      =     #Par.Command.ResetAlarm; 
      R     #CmdFaultReset; 
// command 1
      L     0; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     0; 
      T     DBD   36; //COM.Element.InOutValue
      U     #Par.Command.ResetAlarm; 
      =     DBX   39.0; //-->ResetAlarm
      U     #OutpEnable; 
      =     DBX   39.7; //-->Enable24V for OPTOSIM
      L     32; //Convert Hex to 2-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// InMoistureNom    
      L     2; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     #InMoisture; 
      T     DBD   36; //COM.Element.InOutValue
      L     13; //Convert DInt to 3-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// InMoistureOffset    
      L     5; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     #InOffsetMoisture; //[4.0]
      T     DBD   36; //COM.Element.InOutValue
      L     15; //Convert DInt to 5-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// InDosingMax    
      L     10; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     #InDosingMax; // 
      T     DBD   36; //COM.Element.InOutValue
      L     16; //Convert DInt to 6-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// InProductGroup    
      L     16; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     #InProductGroup; // 
      T     DBD   36; //COM.Element.InOutValue
      L     12; //Convert DInt to 2-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// spare    
      L     18; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     0; // 
      T     DBD   36; //COM.Element.InOutValue
      L     18; //Convert DInt to 8-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// spare    
      L     24; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     0; // 
      T     DBD   36; //COM.Element.InOutValue
      L     16; //Convert DInt to 6-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     30; //Lenght in byte
      T     DBW   78; //COM.Telegram.Len
      L     50; //Lenght in byte
      T     DBW   86; //COM.Telegram.LenAnswer
      BEA   ; 
//--------------------------
//Send F
//--------------------------
SndF: NOP   0; 
      L     #tmpCommand; 
      L     'F'; 
      <>I   ; 
      SPB   SndZ; 
// command 1
      U     #CmdFaultReset; 
      =     #Par.Command.ResetAlarm; 
      R     #CmdFaultReset; 
// command 1
      L     0; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     0; 
      T     DBD   36; //COM.Element.InOutValue
      U     #Par.Command.ResetAlarm; 
      =     DBX   39.0; //-->ResetAlarm
      U     #OutpEnable; 
      =     DBX   39.7; //-->Enable24V for OPTOSIM
      L     32; //Convert Hex to 2-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// InMoistureNom    
      L     2; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     #InMoisture; 
      T     DBD   36; //COM.Element.InOutValue
      L     16; //Convert DInt to 6-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
// spare    
      L     8; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     0; // 
      T     DBD   36; //COM.Element.InOutValue
      L     12; //Convert DInt to 2-ASCII
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     10; //Lenght in byte
      T     DBW   78; //COM.Telegram.Len
      L     30; //Lenght in byte
      T     DBW   86; //COM.Telegram.LenAnswer
SndZ: BEA   ; 
//--- Get done ---------------
//Copy reveived data to element
//--------------------------
//Receive C
//--------------------------
Rcv:  R     #OutFaultCom; 
      L     #tmpCommand; 
      L     'C'; 
      <>I   ; 
      SPB   RcvF; 
      U     #Par.OutFlags.OutFaultResetDone; //[1.2]
      S     #Par.OutFlags.OutTestNewAlarm; //[1.2]
      U     #Par.Command.ResetAlarm; //    [1.2]
      =     #Par.OutFlags.OutFaultResetDone; // [1.2] 
//LC status
      L     0; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     42; //Convert 2-ASCII to Hex
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      CALL SFC   20 (
           SRCBLK                   := DBB   39,
           RET_VAL                  := #tmpReturn,
           DSTBLK                   := #Par.Status);
//OutMoistureAc
      L     2; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     23; //Convert 3-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #OutMoisture; 
//OutFlowRateProduct
      L     5; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     26; //Convert 6-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #OutFlowrateProduct; 
//OutFlowRateMOZF
      L     11; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     26; //Convert 6-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #OutFlowrateWater; 
//OutNotErasableTotalWater
      L     17; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     29; //Convert 9-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #tmpWtWater; 
//OutNotErasableTotalProd
      L     26; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     29; //Convert 9-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #tmpWtProduct; 
//OutAlarmNumberMYFC
      L     35; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     22; //Convert 2-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #Set001.OutAlarmNumberMYFC; 
//OutAlarmNumberMOZF
      L     37; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     22; //Convert 2-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #Set001.OutAlarmNumberMOZF; 
      SET   ; 
      S     #tmpCalculate; 
      S     #tmpNewAlarmNumber; 
      SPA   RCal; // -->Calculate
//--------------------------
//Receive F
//--------------------------
RcvF: R     #OutFaultCom; 
      L     #tmpCommand; 
      L     'F'; 
      <>I   ; 
      BEB   ; 
      U     #Par.OutFlags.OutFaultResetDone; //[1.2]
      S     #Par.OutFlags.OutTestNewAlarm; //[1.2]
      U     #Par.Command.ResetAlarm; //    [1.2]
      R     #CmdFaultReset; 
      =     #Par.OutFlags.OutFaultResetDone; // [1.2] 
//LC status
      L     0; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     42; //Convert 2-ASCII to Hex
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      CALL SFC   20 (
           SRCBLK                   := DBB   39,
           RET_VAL                  := #tmpReturn,
           DSTBLK                   := #Par.Status);
//OutFlowRateMOZF
      L     2; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     26; //Convert 6-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #OutFlowrateWater; 
//OutNotErasableTotalWater
      L     8; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     29; //Convert 9-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #tmpWtWater; 
      L     0; 
      T     #tmpWtProduct; 
//OutAlarmNumberMOZF
      L     17; //Character offset
      T     DBW   40; //COM.Element.AddrOffset
      L     22; //Convert 2-ASCII to DInt
      T     DBW    0; //COM.CODE
      TDB   ; //ComDB->Instanz-DB
      UC    FB     7; //Convert (CODE=DBW0)
      TDB   ; //ElementDB->Instanz-DB
      L     DBD   36; //COM.Element.InOutValue
      T     #Set001.OutAlarmNumberMOZF; 
      L     0; 
      T     #Set001.OutAlarmNumberMYFC; 
      SET   ; 
      S     #tmpCalculate; 
      S     #tmpNewAlarmNumber; 
      SPA   RCal; //-->Calculate Total

NETWORK
TITLE =PC Control
//=== Test Object number =====================
PC:   L     DB3.DBW   50; //PCControl.ObjectNo
      L     #Par.ParObjectNo; //Input ObjectNo
      <>I   ; 
      SPB   Ctrl; 
//=== Test OType      ========================
      L     1034; //Input object type
      L     DB3.DBW   48; //PCControl.ObjectType
      <>I   ; 
      SPB   Ctrl; 
//=== Test Handshake =========================
      U     DB3.DBX   43.3; //Handshake.FExamine
      SPB   pExa; 
      U     DB3.DBX   43.0; //Handshake.FDefineCmd
      SPB   pCmd; 
      U     DB3.DBX   43.1; //Handshake.FDefinePara
      SPB   pPar; 
pIni: L     2; //FcInit
      UC    FC     3; 
      SPA   Ctrl; 
// Write parameter 
pPar: LAR1  P#DBX 58.0; //PCControl.Value[1]
      L     #tmpLenDyn; 
      SLD   3; 
      +AR1  ; //PCControl.Value[x]
      L     DBW [AR1,P#20.0]; //PCControl.Value[x+6]
      T     #Par.ParMonTime; 
//Write new commands from PC to Interface of group 
pCmd: U     DB3.DBX   53.0; // CmdOff
      UN    M     12.4; //Global.OutManualOff 
      S     #CmdOff; 
      U     DB3.DBX   53.1; // CmdOn
      UN    M     12.4; //Global.OutManualOff
      S     #CmdOn; 
      U     DB3.DBX   53.2; // CmdNext
      S     #CmdNext; 
      U     DB3.DBX   53.3; // CmdFaultReset
      S     #CmdFaultReset; 
      U     DB3.DBX   52.1; //Cmd1[1]
      S     #InLocalWaterControl; 
      R     #InManualWaterControl; // CmdManualOn
      U     DB3.DBX   52.2; 
      S     #InManualWaterControl; // CmdReportOn
      U     DB3.DBX   52.3; 
      R     #InLocalWaterControl; // CmdManualOff
      R     #InManualWaterControl; 
      U     DB3.DBX   52.5; //Cmd1[5]  =CmdNewJob
      S     #CmdNewJob; 
      U     DB3.DBX   53.5; // CmdManualOn
      S     #InManual; 
      U     DB3.DBX   53.6; // CmdReportOn
      S     #InReport; 
      U     DB3.DBX   55.5; // CmdManualOff
      R     #InManual; 
      U     DB3.DBX   55.6; // CmdReportOff
      R     #InReport; 
//Define Value
      UN    DB3.DBX   43.2; // PC.Hsk.FDefineValue
      ON    #InManual; 
      SPB   pIni; 
      LAR1  P#DBX 58.0; 
      L     DBD [AR1,P#6.0]; 
      T     #InMoisture; 
      L     DBW [AR1,P#10.0]; 
      T     #InOffsetMoisture; 
      L     DBD [AR1,P#12.0]; 
      T     #InDosingMax; 
      L     DBW [AR1,P#16.0]; 
      T     #InProductGroup; 
      SPA   pIni; 
pExa: TAR2  ; //Address dynamic datas
      T     DB3.DBD   24; //-->PCControl.GC.InDynAddr
      L     #tmpLenDyn; //Length dynamic datas
      T     DB3.DBW   22; //-->PCControl.GC.InDynLen
      L     0; //Address parameter data
      T     DB3.DBD   30; //-->PCControl.GC.InParaAddr
      L     0; //Length parameter
      T     DB3.DBW   28; //-->PCControl.GC.InParaLen
      L     1; //Code FcExamine
      UC    FC     3; 
      L     0; //Revision
      T     DB3.DBW   34; 
Ctrl: NOP   0; 
NETWORK
TITLE =Read data from LC (**DP**)
////*************************************************
////***            DP Communication              ***
////*************************************************
//
      UN    #Par.ParDP; 
      SPB   rcv0; 
      L     #Par.ParIOByteNr; 
      T     #tmpAddr; 
      U     #InSimulation; 
      SPB   rSim; 
      CALL SFC   14 (
           LADDR                    := #tmpAddr,
           RET_VAL                  := #tmpReturn,
           RECORD                   := #DPData);
      L     #tmpReturn; 
      L     0; 
      <>I   ; 
      =     #Par.OutFlags.OutComFaultRead; 
      SPB   rcv0; 
      SPA   rDP; 
//read from Simulation
rSim: R     #Par.OutFlags.OutComFaultRead; 
      U     M     11.1; 
      L     P#E 0.0; 
      SPB   rDB1; 
      AUF   DB    16; 
      L     P#DBX 0.0; 
rDB1: L     #Par.ParIOByteNr; 
      SLD   3; 
      +D    ; 
      LAR1  ; 
      L     D [AR1,P#0.0]; 
      T     #DPData.StatusCommand; 
      L     B [AR1,P#4.0]; 
      T     #DPData.NrSndDataSet; 
      L     B [AR1,P#5.0]; 
      T     #DPData.IdxSndDataSet; 
      L     B [AR1,P#6.0]; 
      T     #DPData.NrRcvDataSet; 
      L     B [AR1,P#7.0]; 
      T     #DPData.IdxRcvDataSet; 
      L     D [AR1,P#8.0]; 
      T     #DPData.Data[1]; 
      L     D [AR1,P#12.0]; 
      T     #DPData.Data[2]; 
      L     D [AR1,P#16.0]; 
      T     #DPData.Data[3]; 
      L     D [AR1,P#20.0]; 
      T     #DPData.Data[4]; 
//==Copy Status===============
rDP:  L     #DPData.NrRcvDataSet; 
      L     0; 
      ==I   ; 
      SPB   R001; 
      CALL SFC   20 (
           SRCBLK                   := #DPData.StatusCommand,
           RET_VAL                  := #tmpReturn,
           DSTBLK                   := #Par.Status);
      UN    #Par.Status.NewRcvData; 
      U     #InSimulation; 
      SPB   rcv0; 
//===============================
//Answer Dataset 001
      L     #DPData.NrRcvDataSet; 
      L     1; 
      <>I   ; 
      SPB   r2; 
      CALL SFC   20 (
           SRCBLK                   := #DPData.Data,
           RET_VAL                  := #tmpReturn,
           DSTBLK                   := #Set001);
      L     #Set001.OutMoistureAc; 
      T     #OutMoisture; 
      L     #Set001.OutFlowRateProduct; 
      T     #OutFlowrateProduct; 
      L     #Set001.OutFlowRateMOZF; 
      T     #OutFlowrateWater; 
//Reset old alarm flags with CmdFaultReset
      U     #Par.OutFlags.OutAlarmReadAgain; 
      U     #Par.OutFlags.OutFaultResetDone; 
      R     #Par.OutFlags.OutFaultResetDone; 
      S     #Par.OutFlags.OutTestNewAlarm; 
      U     #Par.OutFlags.OutFaultResetDone; 
      =     #Par.OutFlags.OutAlarmReadAgain; 
//--------------------------------------
//WtNotErasable
      L     #Set001.OutNotErasableTotalWater; 
      T     #tmpWtWater; 
      L     #OutNotErasableProduct; 
      T     #tmpWtProduct; 
// 
      SET   ; 
      S     #tmpCalculate; //--> Calculate job weight 
      S     #tmpNewAlarmNumber; //--> Test new Alarm number
      SPA   R002; 
//===============================
//Answer  dataset 2
r2:   L     #DPData.NrRcvDataSet; 
      L     2; 
      <>I   ; 
      SPB   R001; 
      L     #DPData.Data[1]; //WtActual
      T     #tmpWtProduct; 
      L     #OutNotErasableWater; 
      T     #tmpWtWater; 

      SET   ; 
      S     #tmpCalculate; //--> Calculate job weight 
      SPA   R001; 
//===============================
//Read Dataset 001
R001: L     1; 
      T     #DPData.NrRcvDataSet; 
      L     0; 
      T     #DPData.IdxRcvDataSet; 
      SPA   rcv0; 
//===============================
//Read Dataset 002
R002: U     #Par.ParMOZF; 
      SPB   R001; 
      L     2; 
      T     #DPData.NrRcvDataSet; 
      L     0; 
      T     #DPData.IdxRcvDataSet; 
      SPA   rcv0; 
rcv0: NOP   0; 

NETWORK
TITLE =Calculate total / store alarm number (DP and OPTO22)

      UN    #tmpCalculate; 
      SPB   rEnd; 
//===================================
//Calculate total Water 
//===================================
//---  Init first, if old value < 0  
RCal: L     #OutNotErasableWater; 
      L     0; 
      <D    ; 
      SPB   rWZ2; 
//---  Calculate Weight ---
      L     #tmpWtWater; 
      L     #OutNotErasableWater; 
      -D    ; 
      SPM   rWZ1; 
      SPA   rWPo; 
rWZ1: L     L#1000000000; 
      +D    ; 
rWPo: L     10000; // Maximum change by relaod software
      >D    ; 
      SPB   rWZ2; 
      TAK   ; 
      L     #OutTotalWater; 
      +D    ; 
      T     #OutTotalWater; 
rWZ2: L     #tmpWtWater; 
      T     #OutNotErasableWater; 
//===================================
//Calculate total Prod 
//===================================
//---  Init first, if old value < 0  
      L     #OutNotErasableProduct; 
      L     0; 
      <D    ; 
      SPB   rPZ2; 
//---  Calculate Weight ---
      L     #tmpWtProduct; 
      L     #OutNotErasableProduct; 
      -D    ; 
      SPM   rPZ1; 
      SPA   rPPo; 
rPZ1: L     L#1000000000; 
      +D    ; 
rPPo: L     10000; // Maximum change by relaod software
      >D    ; 
      SPB   rPZ2; 
      TAK   ; 
      L     #OutTotalProduct; 
      +D    ; 
      T     #OutTotalProduct; 
rPZ2: L     #tmpWtProduct; 
      T     #OutNotErasableProduct; 

//===================================
//Store Alarmnumber
//===================================
      UN    #tmpNewAlarmNumber; //--> Test new Alarm number
      SPB   r000; 

//--- keep old alalrm number  MOZF ----
      L     0; 
      L     #Set001.OutAlarmNumberMOZF; 
      ==I   ; 
      =     #Par.OutFlags.OutNoAlarmMOZF; 

//      U     #OutFlags.OutNoAlarmMOZF
      U     #Par.OutFlags.OutRelevantFaultMOZF; 
      UN    #Par.OutFlags.OutTestNewAlarm; 
      UN    #tmpLocal; 
      UN    #InManual; 
      SPB   rA1; 
      L     #Set001.OutAlarmNumberMOZF; 
      T     #OutAlarmNrMOZF; 

//--- keep old alarm number  MYFC ------------
rA1:  L     0; 
      L     #Set001.OutAlarmNumberMYFC; 
      ==I   ; 
      =     #Par.OutFlags.OutNoAlarmMYFC; 

//      U     #OutFlags.OutNoAlarmMYFC
      U     #Par.OutFlags.OutRelevantFaultMYFC; 
      UN    #Par.OutFlags.OutTestNewAlarm; 
      UN    #tmpLocal; 
      UN    #InManual; 
      SPB   r000; 
      L     #Set001.OutAlarmNumberMYFC; 
      T     #OutAlarmNrMYFC; 
//================================================
r000: U     #tmpCallBackFuction; 
      BEB   ; 
rEnd: NOP   0; 
NETWORK
TITLE = Read from Queue (****Opto22 ****)
////*************************************************
////***             O P T O 22                    ***
////*************************************************
//
      U     #Par.ParDP; 
      SPB   Ct00; 
      AUF   DB [#tmpComDB]; 
      L     #Par.ParLCIdx; 
      T     DBW   34; //COM.Element.Index;
      L     1; //Read LC data
      T     DBW    0; //COM.CODE;
      TDB   ; 
      UC    FB     7; 
      TDB   ; 
      L     #tmpFBNO; 
      T     DBW   52; //COM.LC0.FBNO;   
      L     DINO; 
      T     DBW   54; //COM.LC0.DINO;
      TAR2  DBD   56; //COM.LC0.AddrDyn;        
      L     #Par.ParObjectNo; 
      T     DBD   60; //COM.LC0.AddrPara;       
      L     #Par.ParLCAddr; 
      T     DBD   64; //COM.Telegram.LCAddr;
Ct00: NOP   0; 

NETWORK
TITLE = All State Init
//===Clear tmp Variable
      NOP   0; 
//===Global Group Orders===
//--tmpEnable
      U(    ; 
      UN    #InManual; 
      ON    #Par.ParManual; 
      U     #InEnable; 
      UN    #tmpLocal; 
      O     ; 
      U     #InManual; 
      U     #Par.ParManual; 
      )     ; 
      UN    #InHWStop; 
      UN    #InDPFault; 
      UN    #CmdOff; 
      =     #tmpEnable; 
//---Report is on---
      O     M     12.6; //---Global OutReportAll
      O     #InReport; 
      =     #tmpReport; 
//---FaultReset is on---
      U     M     12.3; //Gr.OutFaultReset
      S     #CmdFaultReset; 
//---Check mode
      UN    #InManualWaterControl; 
      U     #Par.Status.Manual; 
      O     ; 
      UN    #InManualWaterControl; 
      UN    #InLocalWaterControl; 
      UN    #Par.Status.Remote; 
      =     #OutFaultMode; 
//---ComFault
      U     #Par.OutFlags.OutComFaultRead; 
      O     #Par.OutFlags.OutComFaultSend; 
      U     #Par.ParDP; 
      O     ; 
      UN    #Par.ParDP; 
      U     #OutFaultCom; 
      =     #OutFaultCom; 
//===Prepare Alarm Flags=========================== 
      LAR1  P##tmpFilter; 
      L     #OutAlarmNrMYFC; 
      +AR1  ; 
      L     #OutAlarmNrMYFC; 
      L     0; 
      <>I   ; 
      UN    L [AR1,P#0.0]; //#tmpFilter[OutAlarmNumberMYFC]
      =     #Par.OutFlags.OutRelevantFaultMYFC; 

      LAR1  P##tmpFilter; 
      L     #OutAlarmNrMOZF; 
      +AR1  ; 
      L     #OutAlarmNrMOZF; 
      L     0; 
      <>I   ; 
      UN    L [AR1,P#0.0]; //#tmpFilter[OutAlarmNumberMOZF]
      =     #Par.OutFlags.OutRelevantFaultMOZF; 

      U     #Par.OutFlags.OutRelevantFaultMYFC; 
      O     #Par.OutFlags.OutRelevantFaultMOZF; 
      =     #OutFaultRelevant; 

      L     #OutAlarmNrMYFC; 
      L     0; 
      <>I   ; 
      UN    #Par.ParMOZF; 
      O(    ; 
      L     #OutAlarmNrMOZF; 
      L     0; 
      <>I   ; 
      )     ; 
      UN    #OutFaultRelevant; 
      =     #OutWarning; 

      U     #OutFaultRelevant; 
      O     #OutFaultCom; 
      O     #OutWrongValue; 
      UN    #InManualWaterControl; 
      O     #OutFaultMode; 
      O(    ; //[1.1]
      UN    #Par.Status.RemoteControlDP; //[1.1]
      UN    #InLocalWaterControl; //[1.1]
      UN    #InManualWaterControl; //[1.1]
      U     #Par.ParDP; //[1.1]
      )     ; //[1.1]
      UN    #InHWStop; 
      UN    #InDPFault; 
      UN    #tmpLocal; 
      =     #tmpFault; 
//---CmdNewJob
      UN    #CmdNewJob; 
      SPB   in2; 
      R     #CmdNewJob; 
      L     0; 
      T     #OutTotalProduct; 
      T     #OutTotalWater; 
in2:  NOP   0; 
NETWORK
TITLE =States
//===State machine===
      U     #StStopped; 
      SPB   S0; 
      U     #StDosing; 
      SPB   S2; 
      U     #StWaiting; 
      SPB   S5; 
      U     #StStarting; 
      SPB   S1; 
      U     #StStopping; 
      SPB   S3; 
      U     #StFault; 
      SPB   S4; 
      SPA   xxS0; //Init

NETWORK
TITLE = StStopped
//Automatic fault reset
xxS0: S     #StStopped; //Init
      L     B#(4, 91); // MessageClass Info stopped
      U     #tmpReport; 
      SPB   LOG; 
//---Condition for StFault
S0:   U     #tmpFault; 
      R     #StStopped; 
      SPB   xxS4; //-->StFault
//---Condition for StStarting
      U     #CmdNext; 
      UN    #InManual; 
      O     #CmdOn; 
      U     #tmpEnable; 
      R     #StStopped; 
      SPB   xxS1; 
      SPA   OUT; 

NETWORK
TITLE = StStarting
//Automatic fault reset
xxS1: S     #StStarting; 
      L     #Par.ParMonTime; 
      T     #Par.OutMonTime; 
//---Condition for StFault
S1:   U     #tmpFault; 
      R     #StStarting; 
      SPB   xxS4; //-->StFault
//---Monitoring Starting
      UN    M     10.3; 
      L     #Par.OutMonTime; 
      SPB   S1J1; 
      +     -2; 
      T     #Par.OutMonTime; 
S1J1: L     0; 
      <=I   ; //---Condition for StStarted
      R     #StStarting; 
      S     #tmpFaultMonitoringStart; 
      SPB   xxS4; //---Transition -> StFault
//---Condition for StStopping
      UN    #tmpEnable; 
      R     #StStarting; 
      SPB   xxS3; //-->StStopping
//---Condition for StEnabled
      U     #Par.Status.Enable24V; 
      U     #Par.Status.Active; 
      UN    #InManualWaterControl; 
      O     ; 
      U     #OutpEnable; 
      U     #InManualWaterControl; 
      R     #StStarting; 
      SPB   xxS5; //-->StWaiting
      SPA   OUT; 

NETWORK
TITLE = StDosing

xxS2: S     #StDosing; 
      L     B#(4, 92); // MessageClass Info stopped
      U     #tmpReport; 
      SPB   LOG; 
      SPA   OUT; 
//Condition for StFault
S2:   U     #tmpFault; 
      R     #StDosing; 
      SPB   xxS4; //--> StFault
//---Condition for StStopping
      UN    #Par.Status.Dosing; 
      UN    #InManualWaterControl; 
      ON    #tmpEnable; 
      R     #StDosing; 
      SPB   xxS5; //-->StWaiting
      SPA   OUT; 

NETWORK
TITLE = StStopping
//Automatic fault reset
xxS3: S     #StStopping; 
      L     #Par.ParMonTime; 
      T     #Par.OutMonTime; 
//---Condition for StFault
S3:   U     #tmpFault; 
      R     #StStopping; 
      SPB   xxS4; //-->StFault
//---Condition for StStopping
      UN    #Par.Status.Enable24V; 
      UN    #InManualWaterControl; 
      O     ; 
      UN    #OutpEnable; 
      U     #InManualWaterControl; 
      O     #InHWStop; 
      O     #InDPFault; 
      R     #StStopping; 
      SPB   xxS0; //-->StStopped
//---Monitoring Stoopin
      UN    M     10.3; 
      L     #Par.OutMonTime; 
      SPB   S3J1; 
      +     -2; 
      T     #Par.OutMonTime; 
S3J1: L     0; 
      <=I   ; 
      R     #StStopping; 
      S     #tmpFaultMonitoringStop; 
      SPB   xxS4; //---Transition -> StFault
      SPA   OUT; 

NETWORK
TITLE = StWaiting

xxS5: S     #StWaiting; 
      L     B#(4, 93); // MessageClass Info stopped
      U     #tmpReport; 
      SPB   LOG; 
//---Condition for StFault
S5:   U     #tmpFault; 
      R     #StWaiting; 
      SPB   xxS4; //--> StFault
//---Condition for StDosing
      U     #OutpEnable; 
      U     #InManualWaterControl; 
      U     #tmpEnable; 
      O     ; 
      U     #Par.Status.Dosing; 
      UN    #InManualWaterControl; 
      U     #tmpEnable; 
      R     #StWaiting; 
      SPB   xxS2; //-->StDosing
//---Condition for StStopping
      UN    #tmpEnable; 
      ON    #Par.Status.Enable24V; 
      ON    #Par.Status.Active; 
      R     #StWaiting; 
      SPB   xxS3; //-->StStopping
      SPA   OUT; 

NETWORK
TITLE = StFault

S4:   U     #Par.OutFlags.OutTestNewAlarm; 
      O     #InManualWaterControl; 
      UN    #tmpFault; 
      O     #tmpLocal; 
      SPB   S4S5; 
//---Monitoring Alarm reset
      UN    M     10.3; 
      ON    #Par.OutFlags.OutTestNewAlarm; // Relog fault
      L     #Par.OutMonTime; 
      SPB   S4J1; 
      +     -2; 
      T     #Par.OutMonTime; 
S4J1: L     0; 
      <=I   ; //---Condition for  Relog fault
      U     #Par.OutFlags.OutTestNewAlarm; // Relog fault
      U     #tmpFault; 
      SPB   xxS4; 
      SPA   OUT; 
//Transition to StStopped 
S4S5: S     #StStopping; 
      R     #StFault; 
      L     B#(3, 0); //Message ('fault cancelled')
      SPA   LOG; 

NETWORK
TITLE =LOG
//91   = StStopped
//92   = StDosing
//93   = StWaiting
//94   = Timeout starting
//95   = Timeout stopping
//96   = Communication fault
//97   = FaultManualMode
//98   = FaultLocalMode
//99   = FaultWrongValue
//
xxS4: U     #StFault; // 2.1: Fault flag only when transition -> StFault
      SPB   S4J2; 
      S     M     13.7; // 2.1: Gr.InFaultFlag
      CALL FC     4 (
           FcCode                   := 1,
           ParObjectType            := 1034,
           ParObjectNo              := #Par.ParObjectNo,
           ParHornCode              := #Par.ParHornCode);
S4J2: SET   ; // 2.1:
      S     #StFault; 
      R     #Par.OutFlags.OutTestNewAlarm; 
      L     50; // [1.2] 5s for retry fault
      T     #Par.OutMonTime; // [1.2]
//Alarm Moonitoring
      U     #tmpFaultMonitoringStart; 
      L     B#(1, 94); // MessageClass Error fault starting
      SPB   LOG; 
      U     #tmpFaultMonitoringStop; 
      L     B#(1, 95); // MessageClass Error fault starting
      SPB   LOG; 
//Alarm Communication
      L     B#(1, 96); 
      U     #OutFaultCom; 
      SPB   LOG; 
//Alarm Message MYFC
      UN    #Par.OutFlags.OutRelevantFaultMYFC; 
      SPB   LoF; 
      L     #OutAlarmNrMYFC; 
      L     B#(1, 0); 
      OW    ; 
      SPA   LOG; //Alarms 11..80
//Alarm Message MOZF
LoF:  UN    #Par.OutFlags.OutRelevantFaultMOZF; 
      SPB   LoM; 
      L     #OutAlarmNrMOZF; 
      L     B#(1, 0); 
      OW    ; 
      SPA   LOG; //Alarms 11..80
// Alarm Mode
LoM:  L     B#(1, 97); 
      U     #OutFaultMode; 
      U     #Par.Status.Manual; 
      SPB   LOG; 
      L     B#(1, 98); 
      U     #OutFaultMode; 
      UN    #Par.Status.Remote; 
      SPB   LOG; 
//Alarm 'fault DP Mode                                                       
      L     B#(1, 90); // Message ('fault DP Mode')   //[1.1]
      UN    #Par.Status.RemoteControlDP; //[1.1]
      UN    #InLocalWaterControl; //[1.1]
      UN    #InManualWaterControl; //[1.1]
      U     #Par.ParDP; //[1.1]
      SPB   LOG; //[1.1]
//Wrong Value
      U     #OutWrongValue; 
      L     B#(1, 99); // Message ('fault wrong value')  //[1.4]
      SPB   LOG; 
//Alarm Communication
      L     B#(1, 96); //COM communication
      SPA   LOG; 
LOG:  U     #Par.ParLogOff; //---Set LOG Message
      SPB   OUT; 
      T     #tmpLOGvalue; 
      L     B#(0, 255); //COM communication
      UW    ; 
      T     #OutAlarmNrLog; 
      CALL FC    45 (//LOG Message Converter / Entry
           ObjectNo                 := #Par.ParObjectNo,
           MsgType                  := #Par.ParMsgType,
           ClassMsgTxt              := #tmpLOGvalue,//Contains Class and TextNo
           OType                    := 1034);

NETWORK
TITLE =Global End

OUT:  SET   ; //---Clear all commands
      R     #CmdNext; 
      R     #CmdOn; 
      R     #CmdOff; 

      UN    #StFault; 
      R     #Par.OutFlags.OutTestNewAlarm; 

      U     #StStarting; 
      O     #StWaiting; 
      O     #StDosing; 
      =     #OutpEnable; 
//--Output for group 
      UN    #InLocal; 
      O     #InManual; 
      U     #InDPFault; 
      S     M     15.1; 

      UN    #InLocal; 
      O     #InManual; 
      U     #InHWStop; 
      S     M     15.0; 

NETWORK
TITLE =State Code

      UN    #StStopped; 
      SPB   sc3; 
      L     41; //Code: StStopped HWStop
      U     #InHWStop; 
      SPB   STC; 
      L     51; //Code: StStopped DPStop
      U     #InDPFault; 
      SPB   STC; 
      L     1; //Code: StStopped
      SPA   STC1; 
sc3:  L     3; //Code: StDosingAuto
      U     #StDosing; 
      UN    #InManualWaterControl; 
      SPB   STC1; 
      L     4; //Code: StDosingManual
      U     #StDosing; 
      SPB   STC1; 
      L     5; //Code: StWaiting
      U     #StWaiting; 
      SPB   STC1; 
      L     2; //Code: StStarting
      U     #StStarting; 
      SPB   STC1; 
      L     7; //Code: StStopping
      U     #StStopping; 
      SPB   STC1; 
      L     32; //Code: fault
      SPA   STC; 
//Test Warning : StCode = StCode+10
STC1: UN    #OutWarning; 
      SPB   STC; 
      +     10; // StCode = StCode+10
STC:  L     #StCode; //Old state code
      TAK   ; 
      T     #StCode; //Save state code
      <>I   ; 
      L     3; //Load code for CBit methode
      CC    FC     2; 

NETWORK
TITLE =Prepare Command for LC (** DP **)
////*************************************************
////***            DP Communication              ***
////*************************************************
//
      UN    #Par.ParDP; 
      SPB   sEnd; 
//==============================
      U     #Par.Status.AcceptNewSendData; 
      U     #Par.Command.ResetAlarm; 
      R     #Par.Command.ResetAlarm; 
      S     #Par.OutFlags.OutFaultResetDone; 
      U     #CmdFaultReset; 
      UN    #Par.Status.AcceptNewSendData; 
      R     #CmdFaultReset; 
      S     #Par.Command.ResetAlarm; 
//==============================
      U     #Par.Status.NewDataReady; 
      =     #Par.Command.AcceptNewDataReady; 
//==============================
      SET   ; 
      =     #Par.Command.CommandReady; 
//==============================
      U     #Par.Status.NewRcvData; 
      =     #Par.Command.AcceptNewRcvData; 
//==============================
      UN    #Par.Status.AcceptNewSendData; 
      =     #Par.Command.NewSendData; 

NETWORK
TITLE =Send Data (**DP**)
////*************************************************
////***            DP Communication              ***
////*************************************************
//
//======================================================
//Test Send Dataset 000 done
      L     #DPData.NrSndDataSet; 
      L     0; 
      <>I   ; 
      SPB   s128; 
      SPA   S128; //-->send 128
//------------------------------------------------
//Test Send Dataset 128 done
s128: L     #DPData.NrSndDataSet; 
      L     128; 
      <>I   ; 
      SPB   s136; 
      U     #Par.Status.WrongValue; 
      =     #OutWrongValue; 
      SPA   S136; //-->Send 136
//------------------------------------------------
//Test Send 136 done
s136: L     #DPData.NrSndDataSet; 
      L     136; 
      <>I   ; 
      SPB   S000; 
      U     #Par.Status.WrongValue; 
      =     #OutWrongValue; 
      SPA   S128; //-->Send 128
//==================================================
//Send Dataset 128
S128: UN    #Par.ParMOZF; 
      SPB   S136; //-->Send 136
      L     128; 
      T     #DPData.NrSndDataSet; 
      L     0; 
      T     #DPData.IdxSndDataSet; 
      L     #InMoisture; 
      SLD   16; 
      T     #DPData.Data[1]; 
      L     0; 
      T     #DPData.Data[2]; 
      T     #DPData.Data[3]; 
      T     #DPData.Data[4]; 
      SPA   sndD; 
//======================================================
//Send Dataset 136
S136: U     #Par.ParMOZF; 
      SPB   S000; 
      L     136; 
      T     #DPData.NrSndDataSet; 
      L     0; 
      T     #DPData.IdxSndDataSet; 
      L     #InMoisture; 
      T     #Set136.InMoistureNom; 
      L     #InOffsetMoisture; 
      T     #Set136.InMoistureOffset; 
      L     #InDosingMax; 
      T     #Set136.InDosingMax; 
      L     #InProductGroup; 
      T     #Set136.InProductGroup; 
      L     0; 
      T     #Set136.Spare17; 
      L     0; 
      T     #Set136.Spare18; 
      L     0; 
      T     #Set136.Spare22; 
      CALL SFC   20 (
           SRCBLK                   := #Set136,
           RET_VAL                  := #tmpReturn,
           DSTBLK                   := #DPData.Data);
      SPA   sndD; 
//======================================================
//Send Dataset 0
S000: L     0; 
      T     #DPData.NrSndDataSet; 
      L     0; 
      T     #DPData.IdxSndDataSet; 
//======================================================
//Send to DP
sndD: CALL SFC   20 (
           SRCBLK                   := #Par.Command,
           RET_VAL                  := #tmpReturn,
           DSTBLK                   := #DPData.StatusCommand);
      U     #InSimulation; 
      SPB   sSim; 
      CALL SFC   15 (
           LADDR                    := #tmpAddr,
           RECORD                   := #DPData,
           RET_VAL                  := #tmpReturn);
      L     #tmpReturn; 
      L     0; 
      <>I   ; 
      =     #Par.OutFlags.OutComFaultSend; 
      SPA   sEnd; 
//write to Simulation
sSim: R     #Par.OutFlags.OutComFaultSend; 
      U     M     11.1; 
      L     P#A 0.0; 
      SPB   rDB2; 
      AUF   DB    17; 
      L     P#DBX 0.0; 
rDB2: L     #Par.ParIOByteNr; 
      SLD   3; 
      +D    ; 
      LAR1  ; 
      L     #DPData.StatusCommand; 
      T     D [AR1,P#0.0]; 
      L     #DPData.NrSndDataSet; 
      T     B [AR1,P#4.0]; 
      L     #DPData.IdxSndDataSet; 
      T     B [AR1,P#5.0]; 
      L     #DPData.NrRcvDataSet; 
      T     B [AR1,P#6.0]; 
      L     #DPData.IdxRcvDataSet; 
      T     B [AR1,P#7.0]; 
      L     #DPData.Data[1]; 
      T     D [AR1,P#8.0]; 
      L     #DPData.Data[2]; 
      T     D [AR1,P#12.0]; 
      L     #DPData.Data[3]; 
      T     D [AR1,P#16.0]; 
      L     #DPData.Data[4]; 
      T     D [AR1,P#20.0]; 
sEnd: NOP   0; 

NETWORK
TITLE =Communication
////*************************************************
////***             O P T O 22                    ***
////*************************************************
//
      U     #Par.ParDP; 
      SPB   com0; 
      L     'C'; 
      UN    #Par.ParMOZF; 
      SPB   com2; 
      L     'F'; 
com2: S     DBX   50.0; //COM.LC0.CmdPut ;
      T     DBB   51; //COM.LC0.Command;
com0: NOP   0; 
NETWORK
TITLE = Store LC data (***OPTO22 **)
////*************************************************
////***             O P T O 22                    ***
////*************************************************
//
      U     #Par.ParDP; 
      BEB   ; 
      L     #Par.ParLCIdx; 
      T     DBW   34; //COM.Element.Index; 
      L     2; //Store LC data
      T     DBW    0; //COM.CODE;
      TDB   ; 
      UC    FB     7; 
      TDB   ; 
      BEA   ; 
NETWORK
TITLE =Calculate Total Weight



END_FUNCTION_BLOCK

