FUNCTION_BLOCK "GCS7_Ma_DischagerFlat"
TITLE =Bin discharger A
//COPYRIGHT:    (C) 1997  BUHLER AG, CH-9240 UZWIL, SWITZERLAND
//
//PRODUCT:      GCS7
//
//TITLE:        FB 88 Machine Bin discharger Flat-Bottom
//
//-------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                       DATE:
//
//FB88.1.1      A. Egli             BASE                        02-Mar-2009
//              Update J.Chische
//FB88.1.0      A. Egli             BASE                        24-Jul-2008
//              1st Release in S7
//
//-------------------------------------------------------------------------
//
//PURPOSE:      MANUAL : see [LL.DSAxxMAN]
//
//RESTRICTIONS: S7
//
//-------------------------------------------------------------------------
//
AUTHOR : EA
FAMILY : GCS7LL
NAME : Discharg
VERSION : 1.1


VAR
  Ma : "GCS7_M_FB88_Data";	
  Discharger : "GCS7_E_ValveControl";	//Element
  LL : "GCS7_E_DigInput";	//Element
  Sweeper : "GCS7_E_Motor";	//Element (de: Räumer)
  SwitchSweeper : "GCS7_E_DigInput";	//Element (de: Schalter Start räumen)
  Slide1 : "GCS7_E_ValveControl";	//Element (de: Seitlicher Auslaufschieber 1)
  Slide2 : "GCS7_E_ValveControl";	//Element (de: Seitlicher Auslaufschieber 2)
  Slide3 : "GCS7_E_ValveControl";	//Element (de: Seitlicher Auslaufschieber 3)
  Slide4 : "GCS7_E_ValveControl";	//Element (de: Seitlicher Auslaufschieber 4)
END_VAR
VAR_TEMP
  tmpFaultStop : BOOL ;	
  tmpFaultSum : BOOL ;	
  tmpNext : BOOL ;	
  tmpLenDyn : INT ;	
  tmpStoreAR2 : DINT ;	
END_VAR
BEGIN
NETWORK
TITLE =

      L     20; 
      T     #tmpLenDyn; 

NETWORK
TITLE =PC Control
//=== Test Object number =====================
      L     "SYS_DirectCtrlDB".PC.ObjectNo; //PCControl.ObjectNo
      L     #Ma.Par.ParObjectNo; //Input ObjectNo
      <>I   ; 
      SPB   aEnd; 
//=== Test OType      ========================
      L     2088; //Input object type
      L     "SYS_DirectCtrlDB".PC.ObjectType; //PCControl.ObjectType
      <>I   ; 
      SPB   aEnd; 
//=== Test Handshake =========================
      U     "SYS_DirectCtrlDB".PC.Hsk.FExamine; // Handshake.FExamine
      SPB   aExa; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefineCmd; // Handshake.FDefineCmd
      SPB   aCmd; 
      U     "SYS_DirectCtrlDB".PC.Hsk.FDefinePara; // Handshake.FDefinePara
      SPB   aPar; 
aIni: L     2; // FcInit
      UC    "SYS_DirectCtrl"; 
      SPA   aEnd; 
// Write parameter 
aPar: LAR1  P#DBX 58.0; 
      L     P#6.0; 
      +AR1  ; 
// Write new commands from PC to Interface of group 
aCmd: U     "SYS_DirectCtrlDB".PC.Cmd1[8]; //Cmd1[8]=CmdOff
      S     #Ma.CmdOff; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[9]; //Cmd1[9]=CmdOn
      S     #Ma.CmdOn; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[10]; //Cmd1[10]=CmdNext
      S     #Ma.CmdNext; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[11]; //Cmd1[11]=CmdFaultReset
      S     #Ma.CmdFaultReset; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[13]; //Cmd1[13]=CmdManualOn
      S     #Ma.InManual; 
      U     "SYS_DirectCtrlDB".PC.Cmd1[1]; //Cmd1[1]=CmdRestDischargeOn
      S     #Ma.InRestDischarge; 
      U     "SYS_DirectCtrlDB".PC.Cmd2[1]; //Cmd2[1]=CmdRestDischargeOff
      R     #Ma.InRestDischarge; 

      SPA   aIni; 
aExa: TAR2  ; // Address Dynamic data
      T     "SYS_DirectCtrlDB".GC.InDynAddr; // -->PCControl.GC.InDynAddr
      L     #tmpLenDyn; // Length Dynamic data
      T     "SYS_DirectCtrlDB".GC.InDynLen; // -->PCControl.GC.InDynLen
      L     0; 
      T     "SYS_DirectCtrlDB".GC.InParaAddr; // -->PCControl.GC.InParaAddr
      T     "SYS_DirectCtrlDB".GC.InParaLen; // -->PCControl.GC.InParaLen
      L     1; // Code FcExamine
      UC    "SYS_DirectCtrl"; 
      L     10; //Revision
      T     "SYS_DirectCtrlDB".GC.Revision; 
aEnd: NOP   0; 

NETWORK
TITLE =Interlocking
//===Global Group Orders===
      U     "GCS7_Gr_OutManualOn"; //Gr.OutManualOn
      S     #Ma.InManual; 
      U     "GCS7_Gr_OutManualOff"; //Gr.OutManualOff
      R     #Ma.InManual; 
      U     #Ma.InManual; 
      S     "GCS7_Gr_InManual"; //Gr.InManual

      U     #Ma.CmdNext; 
      UN    #Ma.InManual; 
      O     #Ma.CmdOn; 
      =     #tmpNext; 
//---- Low level 

//--- Fault----
      U     #Discharger.StFault; 
      O     #LL.StFault; 
      O     #Sweeper.StFault; 
      O     #SwitchSweeper.StFault; 
      O     #Slide1.StFault; 
      O     #Slide2.StFault; 
      O     #Slide3.StFault; 
      O     #Slide4.StFault; 
      =     #tmpFaultSum; 
// 
//--- Local mode --
      U     #Ma.InLocal; 
      UN    #Ma.InManual; 
      =     #Discharger.InLocal; 
      =     #LL.InLocal; 
      =     #Sweeper.InLocal; 
      =     #SwitchSweeper.InLocal; 
      CLR   ; 
      =     #Slide1.InLocal; 
      =     #Slide2.InLocal; 
      =     #Slide3.InLocal; 
      =     #Slide4.InLocal; 
//--- Fault Reset -------------
      U     #Ma.CmdFaultReset; 
      S     #Discharger.CmdFaultReset; 
      S     #LL.CmdFaultReset; 
      S     #Sweeper.CmdFaultReset; 
      S     #SwitchSweeper.CmdFaultReset; 
      S     #Slide1.CmdFaultReset; 
      S     #Slide2.CmdFaultReset; 
      S     #Slide3.CmdFaultReset; 
      S     #Slide4.CmdFaultReset; 
//--- Interlocking Discharger 
      U     #Ma.InEnable; 
      U     #tmpNext; 
      S     #Discharger.InEnableHN; //Discharger.InEnableHN; 
      S     #Discharger.CmdNext; 
      UN    #Ma.InEnable; 
      O     #Ma.CmdOff; 
      R     #Discharger.InEnableHN; //Discharger.InEnableHN; 
      UN    #Discharger.InEnableHN; 
      =     #Discharger.InEnableLN; 
      S     #Discharger.CmdNext; 
//--- Interlocking SwitchSweeper 
      UN    #Ma.InRestDischarge; 
      =     #SwitchSweeper.InMonFalse; 
//--- Interlocking Sweeper 
      U(    ; //-jc- [1.1]
      U     #Slide1.StHN; //-jc- [1.1] 
      ON    #Ma.Par.ParWithSlide1; //-jc- [1.1]
      )     ; //-jc- [1.1]
      O(    ; //-jc- [1.1]
      U     #Slide2.StHN; //-jc- [1.1]
      ON    #Ma.Par.ParWithSlide2; //-jc- [1.1]
      )     ; //-jc- [1.1]
      O(    ; //-jc- [1.1]
      U     #Slide3.StHN; //-jc- [1.1]
      ON    #Ma.Par.ParWithSlide3; //-jc- [1.1]
      )     ; //-jc- [1.1]
      O(    ; //-jc- [1.1]
      U     #Slide4.StHN; //-jc- [1.1]
      ON    #Ma.Par.ParWithSlide4; //-jc- [1.1]
      )     ; //-jc- [1.1]
//      U     #LL.StFalse                 //Unvovered---jc- [1.1]
      U     #Discharger.StHN; 
      U     #Ma.InEnable; 
      U     #SwitchSweeper.InpTrue; 
      U     #Ma.InDoorOpen; 
      U     #Ma.InRestDischarge; 
      =     #Sweeper.InEnableFwd; 
      U     #Sweeper.InEnableFwd; 
      U     #LL.StFalse; //-jc- [1.1]
      S     #Sweeper.CmdNext; 
//--- Interlocking Slide 
      UN    #LL.StFalse; //Unvovered
      UN    #Ma.InDoorOpen; //-jc- [1.1]
      ON    #Ma.InRestDischarge; 
//      ON    #Discharger.StHN          //-jc- [1.1]
      =     #Slide1.InEnableLN; 
      =     #Slide2.InEnableLN; 
      =     #Slide3.InEnableLN; 
      =     #Slide4.InEnableLN; 
      SET   ; 
      S     #Slide1.CmdNext; 
      S     #Slide2.CmdNext; 
      S     #Slide3.CmdNext; 
      S     #Slide4.CmdNext; 
//--- Interlocking discharge conveying 
      U(    ; 
      U     #Slide1.StLN; 
      ON    #Ma.Par.ParWithSlide1; 
      )     ; 
      U(    ; 
      U     #Slide2.StLN; 
      ON    #Ma.Par.ParWithSlide2; 
      )     ; 
      U(    ; 
      U     #Slide3.StLN; 
      ON    #Ma.Par.ParWithSlide3; 
      )     ; 
      U(    ; 
      U     #Slide4.StLN; 
      ON    #Ma.Par.ParWithSlide4; 
      )     ; 
      O     #Ma.InRestDischarge; //-jc- [1.1]
      UN    #Slide1.StFault; 
      UN    #Slide2.StFault; 
      UN    #Slide3.StFault; 
      UN    #Slide4.StFault; 
      =     #Ma.OutEnableConveying; 
NETWORK
TITLE =Call Discharger

      CALL #Discharger ;

NETWORK
TITLE =Call LL

      CALL #LL ;

NETWORK
TITLE =Call Sweep

      CALL #Sweeper ;

NETWORK
TITLE =Call SwitchSweep

      CALL #SwitchSweeper ;

NETWORK
TITLE =Call Slide1

      UN    #Ma.Par.ParWithSlide1; 
      SPB   ELS1; 
      CALL #Slide1 ;
ELS1: NOP   0; 
NETWORK
TITLE =Call Slide2

      UN    #Ma.Par.ParWithSlide2; 
      SPB   ELS2; 
      CALL #Slide2 ;
ELS2: NOP   0; 
NETWORK
TITLE =Call Slide3

      UN    #Ma.Par.ParWithSlide3; 
      SPB   ELS3; 
      CALL #Slide3 ;
ELS3: NOP   0; 
NETWORK
TITLE =Call Slide4

      UN    #Ma.Par.ParWithSlide4; 
      SPB   ELS4; 
      CALL #Slide4 ;
ELS4: NOP   0; 
NETWORK
TITLE =Jump to actual state

      U     #Ma.StStopped; 
      SPB   S0; // ===> State
      U     #Ma.StStarted; 
      SPB   S2; // ===> State
      U     #Ma.StStarting; 
      SPB   S1; // ===> State
      U     #Ma.StStopping; 
      SPB   S3; // ===> State
      U     #Ma.StFault; 
      SPB   S4; // ===> State
NETWORK
TITLE =Stopped
//any Transition 
xxS0: S     #Ma.StStopped; // ===> Initialisation
      SPA   OUT; 
//=== Logic
// Condition for StFault
S0:   U     #tmpFaultSum; 
      R     #Ma.StStopped; 
      SPB   xxS4; //--> ST_FAULT:
// Condition for StStarting
      UN    #Discharger.StLN; 
      R     #Ma.StStopped; 
      SPB   xxS1; //--> StStarting
      SPA   OUT; 

NETWORK
TITLE =StStarting
//any Transition 
xxS1: S     #Ma.StStarting; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S1:   U     #tmpFaultSum; 
      R     #Ma.StStarting; 
      SPB   xxS4; //--> StFault
// Condition for StStarted
      U     #Discharger.StHN; 
      R     #Ma.StStarting; 
      SPB   xxS2; //-->StStarted
// Condition for StStopping
      UN    #Discharger.StCtoHN; 
      R     #Ma.StStarting; 
      SPB   xxS3; //-->StStopping
      SPA   OUT; 

NETWORK
TITLE =StStarted
//any Transition 
xxS2: S     #Ma.StStarted; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S2:   U     #tmpFaultSum; 
      R     #Ma.StStarted; 
      SPB   xxS4; //--> StFault
// Condition for StStopping
      UN    #Discharger.StHN; 
      R     #Ma.StStarted; 
      SPB   xxS3; //-->StStopping
      SPA   OUT; 

NETWORK
TITLE =Stopping
//any Transition 
xxS3: S     #Ma.StStopping; 
      SPA   OUT; 
//=== Logic
// Condition for StFault
S3:   U     #tmpFaultSum; 
      R     #Ma.StStopping; 
      SPB   xxS4; //--> StFault
// Condition for StStopped
      U     #Discharger.StLN; 
      R     #Ma.StStopping; 
      SPB   xxS0; //-->StStopped
// Condition for StStarting
      UN    #Discharger.StCtoLN; 
      UN    #Discharger.StLN; 
      R     #Ma.StStopping; 
      SPB   xxS1; //-->StStarting
      SPA   OUT; 
NETWORK
TITLE =Fault
//any Transition 
xxS4: S     #Ma.StFault; 
      SPA   OUT; 
//=== Logic
S4:   U     #tmpFaultSum; 
      SPB   OUT; 
//---- Transition --
      R     #Ma.StFault; 
      SPA   xxS0; //-->StStopping 


NETWORK
TITLE =State Code
// State     StCode
// ----------------------
// StFault32
// StStopped       1
// StStarting      2
// StStarted       3
// StStopping      7
// StRestDischarge 9
//
OUT:  U     #Ma.StStopped; 
      L     1; //Code=StStopped
      SPB   Code; 
      L     9; //Code: emptying
      U     #LL.StFalse; 
      U     #Ma.InRestDischarge; 
      U     #Ma.StStarted; 
      SPB   Code; 
      U     #Ma.StStarted; 
      L     3; //Code=StStarted
      SPB   Code; 
      U     #Ma.StStarting; 
      L     2; //Code=StStarting
      SPB   Code; 
      U     #Ma.StStopping; 
      L     7; //Code=StStopping 
      SPB   Code; 
      L     32; //Code=StFault 
Code: L     #Ma.StCode; // Old state code
      TAK   ; 
      T     #Ma.StCode; // Save state code
      <>I   ; 
      L     3; 
      CC    "SYS_CBitCtrl"; //Set change bit
NETWORK
TITLE =Global End

      CLR   ; //---Clear all commands
      =     #Ma.CmdOn; 
      =     #Ma.CmdOff; 
      =     #Ma.CmdNext; 
      =     #Ma.CmdFaultReset; 
END_FUNCTION_BLOCK

