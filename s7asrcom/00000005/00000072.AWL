FUNCTION_BLOCK "KebaHT4"
TITLE =Maintenance Control HT4
//
//COPYRIGHT:    (C) 1999 BY  BUEHLER AG
//                           CH-9240 UZWIL  SWITZERLAND
//
//PRODUCT:      
//
//TITLE:        MAINTENANCE MOTOR CONTROL "HT4"
//
//              LOKALE MOTOREN STEUERUNG "HT4"
//
//---------------------------------------------------------------------------
//
//IDENT:        AUTHOR:             DEPT:                         DATE:
//
//FB80.1A       S. Kalberer         CT3                           14.04.1999
//              Generated by S5/S7 Converter
//              Adjusted from S5 FB180.2C and DB180.2A
//              Outputs > 511 will set the Peripherial Output (PA) directly
//---------------------------------------------------------------------------
//
//PURPOSE:      - DATA TRANSFER BETWEEN HT4 AND PLC, VIA DB80
//
//                REMARK: ALL PASSWORD PROTECTED FUNCTIONS ARE MARKED WITH *
//
//RESTRICTIONS: - S7
//
//                !!! IMPORTANT !!!
//              - FB80 MUST BE CALLED AFTER FC9 IN OB1, TO PROCESS THE
//                OUTPUTS PROPELRY!!!
//
//              - FOLLOWING DB's MUST BE AVAILABLE:
//                . DB80 = Instance DB - COMMUNICATION BUFFER HT4 - PLC 
//                . DB81 = REFERENCE TABLE MOTORS (M)
//                . DB82 = REFERENCE TABLE VARIOUS ELEMENTS (V, FC, etc.)
//
//                . A DIGITAL OUTPUT FROM 128.0 TO 255.7 WILL BE PROCESSED
//                  INDIRECT VIA THE DB DEFINED IN DB80, DW63. THE RELEVANT
//                  DB AND DW IN THIS DB MUST BE AVAILABLE.
//                  (DW-No.IN DB = OUTPUT-BYTE-No.)
//
//              - IF THE NUMBER OF DW/OBJECT IS CHANGED, THE PARAMETERS (!@) 
//                HAVE TO BE CHANGED ACCORDINGLY !
//
//---------------------------------------------------------------------------
//$EJECT
//STRUCTURE:
//==========
//OB1:
//   | --> FC9: Call Groups
//   |
//   | --> FC80: Call Groups
//   |          |
//              |
//              | --> FB80: (REMOTE CONTROL), DB80: (COMM-BUFFER HT4 - PLC)
//                         |
//                         | --> e.g. DB81: (REF-TABLE MOTORS)
//                         |     (see Par_Motor_DBNo)
//                         | --> e.g. DB82: (REF-TABLE VARIOUS ELEMENTS)
//                         |     (see Par_Variousr_DBNo)
//       
//
//PARAMETERS and VARIABLES:
//=========================
//
//DBW 104 VAR.Errror
//  +0.0 = Error.
//  +1.0 = Error.
//  +1.1 = Error.Cfg_Fault    
//  +1.2 = Error.Obj_NoNull  
//  +1.3 = Error.Obj_Not_Found  
//  +1.4 = Error.Invalid_Password        
//  +1.5 = Error.Machine_Stop            
//  +1.6 = Error.Comm_Timeout   
//  +1.7 = Error.Summary                 
//
//DBW 106 VAR.Info
//  +0.0 = Info.Obj_Ready
//  +0.1 = Info.
//  +0.2 = Info.
//  +0.3 = Info.Obj_DO1_Set
//  +0.4 = Info.Obj_DO2_Set
//  +0.5 = Info.Obj_DO3_Set
//  +0.6 = Info.Obj_DO4_Set
//  +0.7 = Info.Obj_AO1_Set
//
//  +1.0 = Info.HT4_Enabled 
//  +1.1 = Info.HT4_Service_Mode
//  +1.2 = Info.HT4_password_ok 
//  +1.3 = Info.                
//  +1.4 = Info.                
//  +1.5 = Info.                
//  +1.6 = Info.HT4_KeyPressedFlag
//  +1.7 = Info.HT4_KeyPressedEdge
//
//DBW 108 Err_Invalid_ObjNo
//
//DBW 110 VAR_Actual_OjbNo                \
//DBW 112 VAR_DO1_ByteAddr                 | 
//DBW 114 VAR_DO1_BitAddr                  | copy from reference DB
//DBW 116 VAR_DO2_ByteAddr                 |
//DBW 118 VAR_DO2_BitAddr                  | 
//DBW 120 VAR_DO3_ByteAddr                 |
//DBW 122 VAR_DO3_BitAddr                  | 
//DBW 124 VAR_DO4_ByteAddr                 |
//DBW 126 VAR_DO4_BitAddr                  | 
//DBW 128 VAR_AO1_ByteAddr                 | 
//DBW 130 VAR_ObjState                     | 
//  +0.0 = spare                           /
//  +1.0 = ManMode
//  +1.1 = DO1_Set
//  +1.2 = DO2_Set
//  +1.3 = DO3_Set
//  +1.4 = DO4_Set
//  +1.5 = AO1_Set
//  +1.6 = 
//  +1.7 = 
//
//DBW 132 = 0    Par_AO1 Man Mode Value
//
//DBW 134 = 81  Par_Motor DB Number
//
//DBW 136 = 82  Par_Various DB Number
//
//(!@)
//DBW 138 = 0    Par_ObjDB_1stBlockOff: Byte Offset (Start oft first block)
//
//(!@)
//DBW 140 = 22   Par_ObjDB_BlockLength: Block length (Byte)
AUTHOR : SK
FAMILY : KebaHT4
NAME : HT4
VERSION : 1.0


VAR
  KeyStatus : STRUCT 	//Key Status
   InternalCode : BYTE ;	
   UserCode : BYTE ;	
   Char_8 : BOOL ;	
   Char_9 : BOOL ;	
   Char_A : BOOL ;	
   Char_Esc : BOOL ;	//'B: esc'
   Char_C : BOOL ;	
   Char_D : BOOL ;	
   Char_E : BOOL ;	
   Char_F : BOOL ;	
   Char_F1 : BOOL ;	//'0: F1'
   Char_F2 : BOOL ;	//'1: F2'
   Char_F3 : BOOL ;	//'2: F3'
   Char_F4 : BOOL ;	//'3: F4'
   Char_F5 : BOOL ;	//'4: F5'
   Char_F6 : BOOL ;	//'5: F6'
   Char_F7 : BOOL ;	//'6: F7'
   Char_F8 : BOOL ;	//'7: F8'
   Char_O : BOOL ;	
   Char_P : BOOL ;	
   Char_Q : BOOL ;	
   Char_R : BOOL ;	
   Char_Alt : BOOL ;	//'S: Alt'
   Char_T : BOOL ;	
   Char_U : BOOL ;	
   Char_Start : BOOL ;	//'V: Start'
   Char_G : BOOL ;	
   Char_H : BOOL ;	
   Char_I : BOOL ;	
   Char_J : BOOL ;	
   Char_K : BOOL ;	
   Char_L : BOOL ;	
   Char_M : BOOL ;	
   Char_N : BOOL ;	
   EmergencyStop : BOOL ;	
   EditModeActive : BOOL ;	
   spare0602 : BOOL ;	
   spare0603 : BOOL ;	
   spare0604 : BOOL ;	
   spare0605 : BOOL ;	
   spare0606 : BOOL ;	
   ActiveBit : BOOL ;	
   Char_Ctrl : BOOL ;	//'W: Ctrl'
   Char_X : BOOL ;	
   Char_Y : BOOL ;	
   Char_Stop : BOOL ;	//'Z: Stop'
   Char_Shift : BOOL ;	//'[: Shift'
   Char_BackSlash : BOOL ;	//'\: '
   Char_SqBracketClos : BOOL ;	//']: '
   Char_Enter : BOOL ;	//'^: Enter'
  END_STRUCT ;	
  EditLineNo : WORD ;	//EditLine No (HT4: 0..4)
  D_5 : WORD ;	// reserviert              ==>  S5
  D_6 : WORD ;	// reserviert              ==>  S5
  D_7 : WORD ;	// reserviert              ==>  S5
  D_8 : WORD ;	// reserviert              ==>  S5
  D_9 : WORD ;	// reserviert              <==  S5
  D_10 : WORD ;	// reserviert              <==  S5
  D_11 : WORD ;	// reserviert              <==  S5
  D_12 : WORD ;	// reserviert              <==  S5
  D_13 : WORD ;	// reserviert              <==  S5
  D_14 : WORD ;	// reserviert              <==  S5
  D_15 : WORD ;	//                         <==  S5
  DB_ID : ARRAY  [1 .. 8 ] OF CHAR ;	
  LEDBitmap : STRUCT 	//LED Bitmap Red (only HT4)
   Char_8 : BOOL ;	
   Char_9 : BOOL ;	
   Char_A : BOOL ;	
   Char_Esc : BOOL ;	//'B: esc'
   Char_C : BOOL ;	
   Char_D : BOOL ;	
   Char_E : BOOL ;	
   Char_F : BOOL ;	
   Char_F1 : BOOL ;	//'0: F1'
   Char_F2 : BOOL ;	//'1: F2'
   Char_F3 : BOOL ;	//'2: F3'
   Char_F4 : BOOL ;	//'3: F4'
   Char_F5 : BOOL ;	//'4: F5'
   Char_F6 : BOOL ;	//'5: F6'
   Char_F7 : BOOL ;	//'6: F7'
   Char_F8 : BOOL ;	//'7: F8'
   Char_O : BOOL ;	
   Char_P : BOOL ;	
   Char_Q : BOOL ;	
   Char_R : BOOL ;	
   Char_Alt : BOOL ;	//'S: Alt'
   Char_T : BOOL ;	
   Char_U : BOOL ;	
   Char_Start : BOOL ;	//'V: Start'
   Char_G : BOOL ;	
   Char_H : BOOL ;	
   Char_I : BOOL ;	
   Char_J : BOOL ;	
   Char_K : BOOL ;	
   Char_L : BOOL ;	
   Char_M : BOOL ;	
   Char_N : BOOL ;	
   TestOutput : BOOL ;	
   SpaceLine : BOOL ;	
   spare0402 : BOOL ;	
   spare0403 : BOOL ;	
   spare0404 : BOOL ;	
   ReleaseKeyclick : BOOL ;	
   DepressKeyclick : BOOL ;	
   Beep : BOOL ;	
   Char_Ctrl : BOOL ;	//'W: Ctrl'
   Char_X : BOOL ;	
   Char_Y : BOOL ;	
   Char_Stop : BOOL ;	//'Z: Stop'
   Char_Shift : BOOL ;	//'[: Shift'
   Char_BackSlash : BOOL ;	//'\: '
   Char_SqBracketClos : BOOL ;	//']: '
   Char_Enter : BOOL ;	//'^: Enter'
  END_STRUCT ;	
  LEDFlashmap : STRUCT 	//LED Flashmap Red (only HT4)
   Char_8 : BOOL ;	
   Char_9 : BOOL ;	
   Char_A : BOOL ;	
   Char_Esc : BOOL ;	//'B: esc'
   Char_C : BOOL ;	
   Char_D : BOOL ;	
   Char_E : BOOL ;	
   Char_F : BOOL ;	
   Char_F1 : BOOL ;	//'0: F1'
   Char_F2 : BOOL ;	//'1: F2'
   Char_F3 : BOOL ;	//'2: F3'
   Char_F4 : BOOL ;	//'3: F4'
   Char_F5 : BOOL ;	//'4: F5'
   Char_F6 : BOOL ;	//'5: F6'
   Char_F7 : BOOL ;	//'6: F7'
   Char_F8 : BOOL ;	//'7: F8'
   Char_O : BOOL ;	
   Char_P : BOOL ;	
   Char_Q : BOOL ;	
   Char_R : BOOL ;	
   Char_Alt : BOOL ;	//'S: Alt'
   Char_T : BOOL ;	
   Char_U : BOOL ;	
   Char_Start : BOOL ;	//'V: Start'
   Char_G : BOOL ;	
   Char_H : BOOL ;	
   Char_I : BOOL ;	
   Char_J : BOOL ;	
   Char_K : BOOL ;	
   Char_L : BOOL ;	
   Char_M : BOOL ;	
   Char_N : BOOL ;	
   spare0400 : BOOL ;	
   spare0401 : BOOL ;	
   spare0402 : BOOL ;	
   spare0403 : BOOL ;	
   spare0404 : BOOL ;	
   spare0405 : BOOL ;	
   spare0406 : BOOL ;	
   spare0407 : BOOL ;	
   Char_Ctrl : BOOL ;	//'W: Ctrl'
   Char_X : BOOL ;	
   Char_Y : BOOL ;	
   Char_Stop : BOOL ;	//'Z: Stop'
   Char_Shift : BOOL ;	//'[: Shift'
   Char_BackSlash : BOOL ;	//'\: '
   Char_SqBracketClos : BOOL ;	//']: '
   Char_Enter : BOOL ;	//'^: Enter'
  END_STRUCT ;	
  TextNo_Line0 : INT ;	// Textnummer Zeile 0      <==  S5
  TextNo_Line1 : INT ;	// Textnummer Zeile 1      <==  S5
  TextNo_Line2 : INT ;	// Textnummer Zeile 2      <==  S5
  TextNo_Line3 : INT ;	// Textnummer Zeile 3      <==  S5
  D_30 : WORD ;	// reserviert              <==  S5
  D_31 : WORD ;	// reserviert              <==  S5
  D_32 : WORD ;	// reserviert              <==  S5
  D_33 : WORD ;	// reserviert              <==  S5
  D_34 : WORD ;	// Variable                <==  S5
  D_35 : WORD ;	// Variable                <==  S5
  D_36 : WORD ;	// Variable                <==  S5
  D_37 : WORD ;	// Variable                <==  S5
  D_38 : WORD ;	// Variable                <==  S5
  HT4_Inp_Password : WORD ;	// HT4.var_inp_password    <==  S5
  HT4_Target_ObjNo : WORD ;	// HT4.var_target_object_no<==> S5
  HT4_Actual_ObjNo : WORD ;	// HT4.var_actual_object_no<==> S5
  D_42 : WORD ;	// Variable                <==> S5
  D_43 : WORD ;	// Variable                <==> S5
  D_44 : WORD ;	// Variable                <==> S5
  D_45 : WORD ;	// Variable                <==> S5
  D_46 : WORD ;	// Variable                <==> S5
  D_47 : WORD ;	// Variable                <==> S5
  D_48 : WORD ;	// Variable                <==> S5
  D_49 : WORD ;	// Variable                <==> S5
  D_50 : WORD ;	// ________________________________
  D_51 : WORD ;	// ==<INTERNAL USED VARIABLES>=====
  Error : STRUCT 	// VAR.error_word
   spare0000 : BYTE ;	
   spare0100 : BOOL ;	
   Cfg_Fault : BOOL ;	
   Obj_NoNull : BOOL ;	
   Obj_NotFound : BOOL ;	
   Invalid_Password : BOOL ;	
   Machine_Stop : BOOL ;	
   Comm_Timeout : BOOL ;	
   Summary : BOOL ;	
  END_STRUCT ;	
  Info : STRUCT 	// VAR.info_word
   Obj_Ready : BOOL ;	
   spare0001 : BOOL ;	
   spare0002 : BOOL ;	
   Obj_DO1_Set : BOOL ;	
   Obj_DO2_Set : BOOL ;	
   Obj_DO3_Set : BOOL ;	
   Obj_DO4_Set : BOOL ;	
   Obj_AO1_Set : BOOL ;	
   HT4_Enabled : BOOL ;	
   HT4_ServiceMode : BOOL ;	
   HT4_PasswordOk : BOOL ;	
   spare0103 : BOOL ;	
   spare0104 : BOOL ;	
   spare0105 : BOOL ;	
   HT4_KeyPressedFlag : BOOL ;	
   HT4_KeyPressedEdge : BOOL ;	
  END_STRUCT ;	
  Err_Invalid_ObjNo : WORD ;	// ERR.invalid_object_no
  Var_Actual_ObjNo : WORD ;	// VAR.act_object_no
  Var_DO1_ByteAddr : INT ;	// VAR.DO_1 (ByteAddress)
  Var_DO1_BitAddr : INT ;	// VAR.DO_1 (BitAddress)
  Var_DO2_ByteAddr : INT ;	// VAR.DO_2 (ByteAddress)
  Var_DO2_BitAddr : INT ;	// VAR.DO_2 (BitAddress)
  Var_DO3_ByteAddr : INT ;	// VAR.DO_3 (ByteAddress)
  Var_DO3_BitAddr : INT ;	// VAR.DO_3 (BItAddress)
  Var_DO4_ByteAddr : INT ;	// VAR.DO_4 (ByteAddress)
  Var_DO4_BitAddr : INT ;	// VAR.DO_4 (BitAddress)
  Var_AO1_ByteAddr : INT ;	// VAR.addr_AO_1 (ByteAddress)
  Var_ObjState : STRUCT 	// VAR.Obj_State
   spare0000 : BYTE ;	
   ManMode : BOOL ;	
   DO1_Set : BOOL ;	
   DO2_Set : BOOL ;	
   DO3_Set : BOOL ;	
   DO4_Set : BOOL ;	
   AO1_Set : BOOL ;	
   spare0106 : BOOL ;	
   spare0107 : BOOL ;	
  END_STRUCT ;	
  Par_AO1 : INT  := 250;	//* PAR.AO_1_man_mode_value_%%
  Par_Motor_DBNo : INT  := 81;	//PAR.Motor DB Number (e.g. 81)
  Par_Various_DBNo : INT  := 82;	//* PAR.Various DB Number (e.g. 82)
  Par_ObjDB_1stBlockOff : INT ;	//Object DBs: Byte Offset (Start of first block)
  Par_ObjDB_BlockLength : INT  := 22;	//Object DBs: Block length [Byte]
  spare142 : INT ;	
  Var_ObjDBNo : INT ;	//Variable Actual Object DB No
  Var_ObjAR1 : DWORD ;	//Variable Actual Object Pointer
  Var_CycleTimeExt : INT ;	//TEMP.REG. CYCLE TIME EXTENSION
  spare152 : WORD  := W#16#FFFF;	//END OF FB-DATA
END_VAR
VAR_TEMP
  tmpWDBNo : WORD ;	//VAR.DB Number
  tmpDWDBPointer : DWORD ;	//VAR.Reference DB Pointer (of reference DB)
  tmpIMaxObj : INT ;	//VAR.Maximum Object of Reference DB
  tmpDWObjPointer : DWORD ;	//VAR.Object Pointer (of reference DB)
  tmpDWOutpPointer : DWORD ;	//VAR.Output Pointer
  tmpWOutpValue : WORD ;	//VAR.Output Value
  tmpILoopCnt : INT ;	//VAR.Loop Counter
  tmpIRetVal : INT ;	//VAR.Return Value
  tmpWDBLength : WORD ;	//VAR.DBLength
  tmpBWriteProt : BOOL ;	//VAR.Write Protected
END_VAR
BEGIN
NETWORK
TITLE = INITIALIZING

      L     #KeyStatus.InternalCode; //    int.ASCII-Code / USER-Code
      L     #KeyStatus.UserCode; //    USER-Code
      +I    ; 
      L     0; 
      >I    ; 
      UN    #Info.HT4_KeyPressedFlag; //    INF.HT4_key_pressed (flag)
      =     #Info.HT4_KeyPressedEdge; // -> INF.HT4_key_pressed (edge)
      L     #KeyStatus.InternalCode; //    int.ASCII-Code
      L     #KeyStatus.UserCode; //    USER-Code
      +I    ; 
      L     0; 
      >I    ; 
      =     #Info.HT4_KeyPressedFlag; // -> INF.HT4_key_pressed (flag)
      UN    #Info.HT4_KeyPressedEdge; //    INF.HT4_key_pressed (edge)
      O     #Info.HT4_Enabled; //    INF.HT4_enabled
      SPB   TXT; // ===> INITIALIZING TEXT
      S     #Info.HT4_Enabled; // -> INF.HT4_enabled
      L     0; 
      T     DIW  104; //    VAR.error_word
TXT:  U     #Info.HT4_Enabled; //    INF.HT4_enabled
      SPB   ENAB; 
      L     10; //    WELCOME TO
      T     #TextNo_Line0; // -> Text-No. line 0
      L     11; //    BUHLER MOTOR
      T     #TextNo_Line1; // -> Text-No. line 1
      L     12; //    REMOTE CONTROL
      T     #TextNo_Line2; // -> Text-No. line 2
      L     73; //    Press any Key !
      T     #TextNo_Line3; // -> Text-No. line 3
      SPA   END; 
// ==<HT4 ENABLED>=================
ENAB: S     #LEDBitmap.SpaceLine; // -> Empty Line       0=<NO TEXT>
      R     #LEDBitmap.ReleaseKeyclick; // -> Release keyklick 1=enable
      R     #LEDBitmap.DepressKeyclick; // -> Depress keyklick 1=enable
      R     #LEDBitmap.Beep; // -> Beep             1=on
      L     0; // )  clear
      T     DID   40; // )  LED Bitmap
      T     DIB   45; // )  LED Bitmap
      T     DID   46; // )  LED Flashmap
      T     DIB   51; // )  LED Flashmap
      T     #TextNo_Line0; // )  Text-No. line 0
      T     #TextNo_Line1; // )  Text-No. line 1
      T     #TextNo_Line2; // )  Text-No. line 2
      T     #TextNo_Line3; // )  Text-No. line 3
END:  NOP   0; 
NETWORK
TITLE = WATCHDOG / MACHINE-STOP

      UN    #KeyStatus.ActiveBit; //    HT4.Activ-Bit (Pass-Bit)
      L     S5T#5S; //    monitoring time (2sec)
      SE    "SYS_T_OfflineDelay"; 
      U     "SYS_T_OfflineDelay"; //    HT4 - RS422-A Timeout
      =     #Error.Comm_Timeout; // -> ERR.communication timeout
      R     #Info.HT4_Enabled; //    INF.HT4_enabled
      U     #KeyStatus.EmergencyStop; //    HT4.key_st.e-stop pressed
      =     #Error.Machine_Stop; // -> ERR.machine_stop
NETWORK
TITLE = * ENHANCED MODE

// *  --<ENABLE ENHANCED MODE>-----
      L     #KeyStatus.UserCode; // *  USER-Code
      L     W#16#41; // *  Taste <F1>
      ==I   ; // *  IF USER-Code = 0041hex
      U     #KeyStatus.Char_Shift; // *  HT4.key_st.shift
      S     #Info.HT4_ServiceMode; // *->INF.HT4_enhanced_mode
      UN    #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      SPB   RES; // *
      U(    ; // *  --<DISABLE ENHANCED MODE>----
      L     #KeyStatus.UserCode; // *  USER-Code
      L     W#16#1B; // *  Taste <ESC>
      ==I   ; // *  IF USER-Code = 001Bhex
      O     #KeyStatus.Char_Esc; // *  HT4.key_st.esc
      )     ; // *
      U     #KeyStatus.Char_Shift; // *  HT4.key_st.shift
      O     #KeyStatus.EmergencyStop; // *  HT4.key_st.e-stop pressed
      O     #Error.Comm_Timeout; // *  ERR.communication timeout
      R     #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      SPB   RES; // *
// *  --<VERIFY PASSWORD>----------
      L     #KeyStatus.UserCode; // *  USER-Code
      L     W#16#D; // *  Taste <ENTER>
      ==I   ; // *  IF USER-Code = 000Dhex
      U     #KeyStatus.Char_Enter; // *  HT4.key_st.enter
      SPB   PW; // *
      SPA   END3; //END;        // *
PW:   U     #Info.HT4_PasswordOk; // *  INF.HT4_password_ok
      SPB   CLR; // *
      L     #HT4_Inp_Password; // *  HT4.var_inp_password
      L     W#16#1357; // *  required password         $
      ==I   ; // *
      S     #Info.HT4_PasswordOk; // *->INF.HT4_password_ok
      R     #Info.HT4_KeyPressedEdge; // *  INF.HT4_key_pressed (edge)
      SPB   CLR; // *
      S     #Error.Invalid_Password; // *->ERR.invalid_password
RES:  R     #Info.HT4_PasswordOk; // *  INF.HT4_password_ok
CLR:  L     W#16#0; // *  clear                     $
      T     #HT4_Inp_Password; // *  VAR.inp_password
END3: NOP   0; 
NETWORK
TITLE = DISPLAY TEXTS

      U     #Error.Summary; //    ERR.summary
      SPB   ERR1; 
      UN    #Info.HT4_Enabled; //    INF.HT4_enabled
      SPB   END4; 
      U     #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      SPB   SERV; 
// ==<NORMAL MODE>=================
//    --<SELECTION-REQUEST>--------
      U     #Info.Obj_Ready; //    INF.obj_ready
      SPB   STRT; 
      L     51; //    Please select
      T     #TextNo_Line0; // -> Text-No. line 0
      L     64; //    Motor No. M#####
      T     #TextNo_Line1; // -> Text-No. line 1
      L     74; //    Press <ENTER>
      T     #TextNo_Line2; // -> Text-No. line 2
      SPA   END4; 
//    --<START-REQUEST>------------
STRT: O     #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      O     #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      O     #Info.Obj_DO3_Set; //    INF.obj_DO_3_set
      O     #Info.Obj_DO4_Set; //    INF.obj_DO_4_set
      ON    #Info.Obj_Ready; //    INF.obj_ready
      SPB   STOP; 
      L     66; //    Motor M#####
      T     #TextNo_Line0; // -> Text-No. line 0
      L     56; //    ready to start.
      T     #TextNo_Line1; // -> Text-No. line 1
      L     76; //    Press <START>
      T     #TextNo_Line2; // -> Text-No. line 2
      SPA   END4; //END;
//    --<STOP-REQUEST>-------------
STOP: UN    #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      UN    #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      UN    #Info.Obj_DO3_Set; //    INF.obj_DO_3_set
      UN    #Info.Obj_DO4_Set; //    INF.obj_DO_4_set
      ON    #Info.Obj_Ready; //    INF.obj_ready
      SPB   END4; //END;
      L     66; //    Motor M#####
      T     #TextNo_Line0; // -> Text-No. line 0
      L     57; //    started. To stop
      T     #TextNo_Line1; // -> Text-No. line 1
      L     77; //    Press <STOP>
      T     #TextNo_Line2; // -> Text-No. line 2
      SPA   END4; //END;
// ==<ENHANCED MODE>==============
// *  --<ENTER PASSWORD>-----------
SERV: U     #Info.HT4_PasswordOk; // *  INF.HT4_password_ok
      SPB   SEL; // *
      L     13; // *  BUHLER AG
      T     #TextNo_Line0; // *->Text-No. line 0
      L     14; // *  ENHANCED MODE
      T     #TextNo_Line1; // *->Text-No. line 1
      L     61; // *  Password ? #####
      T     #TextNo_Line2; // *->Text-No. line 2
      L     74; // *  Press <ENTER>
      T     #TextNo_Line3; // *->Text-No. line 3
      SPA   END4; //END;          // *
SEL:  NOP   0; // *  --<SELECTION-REQUEST>--------
      U     #Info.Obj_Ready; // *  INF.obj_ready
      SPB   ON; // *
      L     51; // *  Please select
      T     #TextNo_Line0; // *->Text-No. line 0
      L     69; // *  Object No.#####
      T     #TextNo_Line1; // *->Text-No. line 1
      L     74; // *  Press <ENTER>
      T     #TextNo_Line2; // *->Text-No. line 2
      SPA   END4; //END;        // *
ON:   NOP   0; // *  --<ON/OFF-REQUEST>-----------
      UN    #Info.Obj_Ready; // *  INF.obj_ready
      SPB   END4; //END;        // *
      L     71; // *  Object #####
      T     #TextNo_Line0; // *->Text-No. line 0
      L     55; // *  ready.
      T     #TextNo_Line1; // *->Text-No. line 1
      L     82; // *  <F7>= OFF / LN
      T     #TextNo_Line2; // *->Text-No. line 2
      L     83; // *  <F8>= ON  / HN
      T     #TextNo_Line3; // *->Text-No. line 3
      SPA   END4; //END;
// ==<ERROR-TEXTS>=================
ERR1: UN    #Error.Cfg_Fault; //    ERR.cfg_fault
      SPB   ERR2; 
      L     21; //    **** ERROR *****
      T     #TextNo_Line0; // -> Text-No. line 0
      L     22; //    CONFIG. FAULT
      T     #TextNo_Line1; // -> Text-No. line 1
      SPA   ESC; 
ERR2: UN    #Error.Obj_NoNull; //    ERR.object_no_<=null
      SPB   ERR3; 
      L     21; //    **** ERROR *****
      T     #TextNo_Line0; // -> Text-No. line 0
      L     23; //    INVALID No.00000
      T     #TextNo_Line1; // -> Text-No. line 1
      SPA   ESC; 
ERR3: UN    #Error.Obj_NotFound; //    ERR.object_not_found
      SPB   ERR4; 
      U     #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      L     70; //    Object No. #####
      SPB   TXL0; 
      L     65; //    Motor No. M#####
TXL0: T     #TextNo_Line0; // -> Text-No. line 0
      L     53; //    not found in PLC
      T     #TextNo_Line1; // -> Text-No. line 1
      L     54; //    Try again
      T     #TextNo_Line2; // -> Text-No. line 2
      SPA   ESC; 
ERR4: UN    #Error.Invalid_Password; // *  ERR.invalid_password
      SPB   ERR5; // *
      L     21; // *  **** ERROR *****
      T     #TextNo_Line0; // *->Text-No. line 0
      L     28; // *  INVALID PASSWORD
      T     #TextNo_Line1; // *->Text-No. line 1
      SPA   ESC; 
ERR5: UN    #Error.Machine_Stop; //    ERR.machine_stop
      ON    #Info.HT4_Enabled; //    INF.HT4_enabled
      SPB   END4; //END;
      L     21; //    **** ERROR *****
      T     #TextNo_Line0; // -> Text-No. line 0
      L     26; //    MACHINE-STOP
      T     #TextNo_Line1; // -> Text-No. line 1
      L     27; //    PRESSED
      T     #TextNo_Line2; // -> Text-No. line 2
      U     #KeyStatus.EmergencyStop; //    HT4.key_st.e-stop pressed
      SPB   END4; //END;
ESC:  L     75; //    Press <ESC>
      T     #TextNo_Line3; // -> Text-No. line 3
END4: NOP   0; 
NETWORK
TITLE = KEYBOARD LED's

      U     #KeyStatus.EmergencyStop; //    HT4.key_st.e-stop pressed
      ON    #Info.HT4_Enabled; //    INF.HT4_enabled
      SPB   END5; //END;
      U     #Error.Summary; //    ERR.summary
      S     #LEDFlashmap.Char_Esc; // -> LED Flashmap (ESC)
      SPB   END5; //END;
      U     #Info.Obj_Ready; //    INF.obj_ready
      UN    #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      UN    #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      UN    #Info.Obj_DO3_Set; //    INF.obj_DO_3_set
      UN    #Info.Obj_DO4_Set; //    INF.obj_DO_4_set
      S     #LEDBitmap.Char_Stop; // -> LED Bitmap (STOP)
      U     #Info.Obj_Ready; //    INF.object_ready
      UN    #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      U(    ; 
      O     #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      O     #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      O     #Info.Obj_DO3_Set; //    INF.obj_DO_3_set
      O     #Info.Obj_DO4_Set; //    INF.obj_DO_4_set
      )     ; 
      S     #LEDBitmap.Char_Start; // -> LED Bitmap (START)
//xx add Obj_DO3/4
      U     #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      U     #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      S     #LEDBitmap.Char_F7; // -> LED Bitmap (F7)
      U     #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      U     #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      S     #LEDBitmap.Char_F8; // -> LED Bitmap (F8)
END5: NOP   0; 
NETWORK
TITLE = SEARCH OBJECT

      U     #Error.Summary; //    ERR.summary 
      ON    #Info.HT4_Enabled; //    INF.HT4_enabled
      ON    #Info.HT4_KeyPressedEdge; //    INF.HT4_key_pressed (edge)
      SPB   END6; //END;
// --<ENTER>-----------------------
      L     #KeyStatus.UserCode; //    USER-Code
      L     W#16#D; //    Taste <ENTER>
      <>I   ; //    IF USER-Code = 000Dhex
      ON    #KeyStatus.Char_Enter; //    HT4.key_st.enter
      SPB   END6; //END;
      UN    #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      L     #Par_Motor_DBNo; // Standard: Motor-DB
      SPB   DB; 
      UN    #Info.HT4_PasswordOk; // *  INF.HT4_password_ok
      L     #Par_Various_DBNo; // Standard: Various-DB
      SPB   END6; //END;
DB:   T     #tmpWDBNo; //Save DB-Number 
      CALL "SIEMENS_TEST_DB" (//Check DB
           DB_NUMBER                := #tmpWDBNo,
           RET_VAL                  := #tmpIRetVal,
           DB_LENGTH                := #tmpWDBLength,
           WRITE_PROT               := #tmpBWriteProt);
      L     W#16#0; // RET_VAL <>0: Cfg-Error_1
      L     #tmpIRetVal; 
      <>I   ; 
      SPB   ER61; // ==> ERROR_1
      AUF   DB [#tmpWDBNo]; // -> Open Reference DB
// ________________________________
      L     0; // ** clear **
      T     #Var_Actual_ObjNo; // -> VAR.act_object_no
// --------------------------------
      L     W#16#0; // $
      L     #HT4_Target_ObjNo; //    HT4_var.target_object_no
      ==I   ; // 2B: IF object_no Zero
      SPB   ER62; // ==> ERROR_2
// --<SEARCH OBJECT>---------------
      L     DBLG; // )   lenght DB
      L     #Par_ObjDB_1stBlockOff; // )    - reserved bytes
      -D    ; 
      L     #Par_ObjDB_BlockLength; // )    Blocklength
      /D    ; // )   
      T     #tmpIMaxObj; // )-->max_Object
ZYK1: T     #tmpILoopCnt; //Calculate AR1 address
      +     -1; 
      L     #Par_ObjDB_BlockLength; // )   Blocklength
      *D    ; 
      L     #Par_ObjDB_1stBlockOff; // )   - reserved bytes
      +D    ; 
      SLD   3; //Get pointer address
      LAR1  ; 
      L     DBW [AR1,P#0.0]; //Save temporary low word
      L     #HT4_Target_ObjNo; // )  HT4_var.target_object_no
      ==I   ; // )  IF object_no found ?
      SPB   FOUN; // )
      L     #tmpILoopCnt; 
      LOOP  ZYK1; 
      SPA   ER63; // ==> ERROR_3

// --<OBJECT FOUND>----------------
FOUN: T     #HT4_Actual_ObjNo; // )->HT4_var.actual_object_no
      T     #Var_Actual_ObjNo; // )->VAR.act_object_no
// Save AR1 Register with Pointer to actual Object
      TAR1  ; 
      T     #Var_ObjAR1; 
      L     DBNO; 
      T     #Var_ObjDBNo; 
// Read DO_1 Byte/BitAddress
      L     DBW [AR1,P#2.0]; // VAR_DO_1_ByteAddr
      T     #Var_DO1_ByteAddr; 
      L     DBW [AR1,P#4.0]; // VAR_DO_1_BitAddr
      T     #Var_DO1_BitAddr; 
// Read DO_2 Byte/BitAddress
      L     DBW [AR1,P#6.0]; // VAR_DO_2_ByteAddr
      T     #Var_DO2_ByteAddr; 
      L     DBW [AR1,P#8.0]; // VAR_DO_2_BitAddr
      T     #Var_DO2_BitAddr; 
// Read DO_3 Byte/BitAddress
      L     DBW [AR1,P#10.0]; // VAR_DO_3_ByteAddr
      T     #Var_DO3_ByteAddr; 
      L     DBW [AR1,P#12.0]; // VAR_DO_3_BitAddr
      T     #Var_DO3_BitAddr; 
// Read DO_4 Byte/BitAddress
      L     DBW [AR1,P#14.0]; // VAR_DO_4_ByteAddr
      T     #Var_DO4_ByteAddr; 
      L     DBW [AR1,P#16.0]; // VAR_DO_4_BitAddr
      T     #Var_DO4_BitAddr; 
// Read AO ByteAddress
      L     DBW [AR1,P#18.0]; // VAR_AO_1_ByteAddr
      T     #Var_AO1_ByteAddr; 
// Read Object State
      L     DBW [AR1,P#20.0]; // VAR_Obj_State
      T     DIW  126; //Var_ObjState

// --<TESTS>-----------------------
      L     #Var_DO1_ByteAddr; 
      L     #Var_DO1_BitAddr; 
      +I    ; 
      L     0; 
      <=I   ; //    IF DO_1 = 0,0
      U(    ; 
      L     #Var_DO2_ByteAddr; 
      L     #Var_DO2_BitAddr; 
      +I    ; 
      L     0; 
      <=I   ; //    IF DO_2 = 0,0
      )     ; 
      U(    ; 
      L     #Var_DO3_ByteAddr; 
      L     #Var_DO3_BitAddr; 
      +I    ; 
      L     0; 
      <=I   ; //    IF DO_3 = 0,0
      )     ; 
      U(    ; 
      L     #Var_DO4_ByteAddr; 
      L     #Var_DO4_BitAddr; 
      +I    ; 
      L     0; 
      <=I   ; //    IF DO_4 = 0,0
      )     ; 
      SPB   ER61; // ===> NO INPUT DEFINED
      L     #Var_DO1_BitAddr; //    VAR.bit_addr_DO_1
      L     7; 
      >I    ; //    IF bit_addr > 7
      O(    ; 
      L     #Var_DO2_BitAddr; //    VAR.bit_addr_DO_2
      L     7; 
      >I    ; //    IF bit_addr > 7
      )     ; 
      O(    ; 
      L     #Var_DO3_BitAddr; //    VAR.bit_addr_DO_3
      L     7; 
      >I    ; //    IF bit_addr > 7
      )     ; 
      O(    ; 
      L     #Var_DO4_BitAddr; //    VAR.bit_addr_DO_4
      L     7; 
      >I    ; //    IF bit_addr > 7
      )     ; 
      SPB   ER61; // ===> INVALID BIT ADDRESS
      U(    ; 
      L     #Var_DO1_ByteAddr; //    VAR.byte_addr_DO_1
      L     511; 
      >I    ; //    IF byte_addr. > 511
      O(    ; 
      L     #Var_DO2_ByteAddr; //    VAR.byte_addr_DO_2
      L     511; 
      >I    ; //    IF byte_addr. > 511
      )     ; 
      O(    ; 
      L     #Var_DO3_ByteAddr; //    VAR.byte_addr_DO_3
      L     511; 
      >I    ; //    IF byte_addr. > 511
      )     ; 
      O(    ; 
      L     #Var_DO4_ByteAddr; //    VAR.byte_addr_DO_4
      L     511; 
      >I    ; //    IF byte_addr. > 511
      )     ; 
      )     ; 
      SPB   ER61; // ===> DB0 = INVALID DB
      S     #Info.Obj_Ready; // -> INF.obj_ready
      S     #Var_ObjState.ManMode; // -> INF.obj_man_mode
      SPA   END6; //END;
ER61: NOP   0; // --<ERROR ROUTINE>---------------
      S     #Error.Cfg_Fault; // -> ERR.cfg_fault
      SPA   END6; //END;
ER62: S     #Error.Obj_NoNull; // -> ERR.object_no_<=null
      SPA   END6; //END;
ER63: S     #Error.Obj_NotFound; // -> ERR.object_not_found
      L     #HT4_Target_ObjNo; //    HT4_var.target_object_no
      T     #Err_Invalid_ObjNo; // -> invalid_object_no
      SPA   END6; //END;
END6: NOP   0; 
NETWORK
TITLE = MOTOR CONTROL ON_1 / ON_2

      UN    #Info.Obj_Ready; //    INF.obj_ready
      O     #Info.HT4_ServiceMode; // *  INF.HT4_enhanced_mode
      SPB   END7; //END;
// --<MOTOR ON_1>-----------------
      L     #KeyStatus.UserCode; //    USER-Code
      L     W#16#4C; //    Taste <Start>
      ==I   ; //    IF USER-Code = 004Chex
      U     #KeyStatus.Char_Start; //    HT4.key_st.start
      UN    #KeyStatus.Char_Shift; //    HT4.key_st.shift (reverse)
      UN    #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      S     #Info.Obj_DO1_Set; // -> INF.obj_DO_1_set
// --<MOTOR ON_2>-----------------
      L     #KeyStatus.InternalCode; //    ASCII-Code
      L     W#16#56; //    Taste <Start>
      ==I   ; //    IF USER-Code = 0056hex
      U     #KeyStatus.Char_Start; //    HT4.key_st.start
      U     #KeyStatus.Char_Shift; //    HT4.key_st.shift (reverse)
      UN    #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      S     #Info.Obj_DO2_Set; // -> INF.obj_DO_2_set
END7: NOP   0; 
NETWORK
TITLE = * VARIOUS CONTROL ON_1 / ON_2

      UN    #Info.Obj_Ready; // *  INF.obj_ready
      ON    #Info.HT4_PasswordOk; // *  INF.HT4_password_ok
      SPB   END8; //END;        // *
// --<OBJECT ON_1>-----------------
      L     #KeyStatus.UserCode; // *  USER-Code
      L     W#16#47; // *  Taste <F7> (on,hn,open)
      ==I   ; // *  IF USER-Code = 0047hex
      U     #KeyStatus.Char_F7; // *  HT4.key_st.F7
      S     #Info.Obj_DO1_Set; // *->INF.obj_DO_1_set
      R     #Info.Obj_DO2_Set; // *  INF.obj_DO_2_set
// --<OBJECT ON_2>-----------------
      L     #KeyStatus.UserCode; // *  USER-Code
      L     W#16#48; // *  Taste <F8> (off, ln)
      ==I   ; // *  IF USER-Code = 0048hex
      U     #KeyStatus.Char_F8; // *  HT4.key_st.F8
      S     #Info.Obj_DO2_Set; // *->INF.obj_DO_2_set
      R     #Info.Obj_DO1_Set; // *  INF.obj_DO_1_set
END8: NOP   0; 
NETWORK
TITLE = ESC, MACHINE-STOP, OFF

// --<ESC OBJECT>------------------
      L     #KeyStatus.UserCode; // *  USER-Code
      L     W#16#41; // *  Taste <F1>
      ==I   ; // *  IF USER-Code = 0041hex
      U     #KeyStatus.Char_Shift; // *  HT4.key_st.shift
      O(    ; 
      L     #KeyStatus.UserCode; //    USER-Code
      L     W#16#1B; //    Taste <ESC>
      ==I   ; //    IF USER-Code = 001Bhex
      )     ; 
      O     #KeyStatus.Char_Esc; //    HT4.key_st.esc
      SPB   ESC9; //ESC;
// --<MACHINE-STOP>----------------
      U     #KeyStatus.EmergencyStop; //    HT4.key_st.e-stop pressed
      O     "SYS_T_OfflineDelay"; //    HT4 - RS422-A Timeout
      ON    #Info.HT4_Enabled; //    INF.HT4_enabled 
      SPB   ESC9; //ESC;
// --<OBJECT OFF>------------------
      L     #KeyStatus.UserCode; //    USER-Code
      L     W#16#4F; //    Taste <Stop>
      ==I   ; //    IF USER-Code = 004Fhex
      O     #KeyStatus.Char_Stop; //    HT4.key_st.stop
      SPB   OFF; 
      SPA   END9; //END;
// --<RESET FUNCTIONS>-------------
ESC9: L     W#16#0; // $
      T     #HT4_Actual_ObjNo; // -> reset HT4_var.act_obj_no
      T     #Err_Invalid_ObjNo; // -> reset ERR.invalid_object_no
      T     #Var_Actual_ObjNo; // -> reset VAR.act_obj_no
      L     DIW  104; //    VAR.error_word
      L     2#1100000; //    0 = reset
      UW    ; 
      T     DIW  104; // -> reset VAR.error_word
      SET   ; 
      R     #Info.Obj_Ready; // -> reset INF.obj_ready
      R     #Info.Obj_DO1_Set; // -> reset INF.obj_DO_1_set
      R     #Info.Obj_DO2_Set; // -> reset INF.obj_DO_2_set
      R     #Info.Obj_DO3_Set; // -> reset INF.obj_DO_3_set
      R     #Info.Obj_DO4_Set; // -> reset INF.obj_DO_4_set
      R     #Info.Obj_AO1_Set; // -> reset INF.obj_AO_1_set
// --<OUTPUTS OFF >----------------
OFF:  SET   ; 
      R     #Info.Obj_DO1_Set; // -> reset INF.obj_DO_1_set
      R     #Info.Obj_DO2_Set; // -> reset INF.obj_DO_2_set
      R     #Info.Obj_DO3_Set; // -> reset INF.obj_DO_3_set
      R     #Info.Obj_DO4_Set; // -> reset INF.obj_DO_4_set
END9: NOP   0; 
NETWORK
TITLE = CONTROL DIGITAL OUTPUT 1

      U     #Error.Cfg_Fault; //    ERR.cfg_fault
      SPB   ED10; //END;
      L     #Var_DO1_ByteAddr; //    VAR.Byteaddr_DO_1
      L     #Var_DO1_BitAddr; //    VAR.Bitaddr_DO_1
      +I    ; 
      L     0; 
      <=I   ; //    IF DO_1 = 0,0
      R     #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      SPB   ED10; //END;
      L     #Var_DO1_ByteAddr; //    VAR.byte_addr_DO_1
      L     511; 
      >I    ; //    IF byte_addr. > 511
      SPB   PA10; //DB;
// --<DO_1 <= 511.7>-------------
      U     #Info.Obj_DO1_Set; //    INF.obj_DO_1_set
      L     #Var_DO1_ByteAddr; //    VAR.Byteaddr_DO_1
      SLW   3; 
      L     #Var_DO1_BitAddr; //    VAR.Bitaddr_DO_1
      SLW   5; 
      SRW   5; 
      OW    ; 
      T     #tmpDWOutpPointer; 
      =     A [#tmpDWOutpPointer]; // -> DO_1 ON    [ <= DO 511.7]
      SPA   ED10; //END;
// --<DO_1 > 511.7>--------------
PA10: L     #Var_DO1_ByteAddr; //    VAR.Byteaddr_DO_1
      SLW   3; 
      T     #tmpDWOutpPointer; 
      L     DBB [#tmpDWOutpPointer]; // -> act. DB_DO.DBB (DO 7....0)
      T     #tmpWOutpValue; 
      U     #Info.Obj_DO1_Set; // )   INF.DO_1_set
      SPBN  ED10; 
      L     #Var_DO1_BitAddr; // ) Set bit
      L     1; 
      SLW   ; 
      L     #tmpWOutpValue; 
      OW    ; 
      T     PAB [#tmpDWOutpPointer]; // -> act. DB_DO.DBB (DO 7....0)
ED10: NOP   0; 
NETWORK
TITLE = CONTROL DIGITAL OUTPUT 2

      U     #Error.Cfg_Fault; //    ERR.cfg_fault
      SPB   ED11; //END;
      L     #Var_DO2_ByteAddr; //    VAR.Byteaddr_DO_2
      L     #Var_DO2_BitAddr; //    VAR.Bitaddr_DO_2
      +I    ; 
      L     0; 
      <=I   ; //    IF DO_1 = 0,0
      R     #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      SPB   ED11; //END;
      L     #Var_DO2_ByteAddr; //    VAR.byte_addr_DO_2
      L     511; 
      >I    ; //    IF byte_addr. > 511
      SPB   PA11; //DB;
// --<DO_1 <= 511.7>-------------
      U     #Info.Obj_DO2_Set; //    INF.obj_DO_2_set
      L     #Var_DO2_ByteAddr; //    VAR.Byteaddr_DO_2
      SLW   3; 
      L     #Var_DO2_BitAddr; //    VAR.Bitaddr_DO_2
      SLW   5; 
      SRW   5; 
      OW    ; 
      T     #tmpDWOutpPointer; 
      =     A [#tmpDWOutpPointer]; // -> DO_2_ON    [ <= DO 511.7]
      SPA   ED11; //END;
// --<DO_2 > 511.7>--------------
PA11: L     #Var_DO2_ByteAddr; //    VAR.Byteaddr_DO_2
      SLW   3; 
      T     #tmpDWOutpPointer; 
      L     DBB [#tmpDWOutpPointer]; // -> act. DB_DO.DBB (DO 7....0)
      T     #tmpWOutpValue; 
      U     #Info.Obj_DO2_Set; // )   INF.DO_2_set
      SPBN  ED11; 
      L     #Var_DO2_BitAddr; // ) Set bit
      L     1; 
      SLW   ; 
      L     #tmpWOutpValue; 
      OW    ; 
      T     PAB [#tmpDWOutpPointer]; // -> act. DB_DO.DBB (DO 7....0)
ED11: NOP   0; 
NETWORK
TITLE = CONTROL ANALOG OUTPUT 1

      U     #Error.Cfg_Fault; //    ERR.cfg_fault
      SPB   ED12; //END;
      L     #Var_AO1_ByteAddr; //    VAR.addr_AO_1
      L     0; 
      <=I   ; //    IF DO_1 = 0,0
      ON    #Var_ObjState.ManMode; //    INF.obj_man_mode
      R     #Info.Obj_AO1_Set; //    INF.obj_AO_1_set
      SPB   ED12; //END;
// Calculate Output address offset
      U     #Info.Obj_Ready; // )  INF.obj_ready
      =     #Info.Obj_AO1_Set; // )->INF.obj_AO_1_set
      SPB   VALU; 
      L     0; //  )
      SPA   RE12; //  )===> clear AO
VALU: L     #Par_AO1; // )  PAR.AO_1_man_mode_value_%%
RE12: T     #tmpWOutpValue; // -> AO_1
      L     511; 
      L     #Var_AO1_ByteAddr; //    VAR.Byteaddr_AO_1
      <=I   ; //    IF byte_addr. > 511
      SLW   3; //Get Bit-Address
      T     #tmpDWOutpPointer; 
      SPB   PA12; //DB;
// --<AO_1 <= 511>-------------
      L     #tmpWOutpValue; 
      T     AW [#tmpDWOutpPointer]; // -> AO_1    [ <= AO 511]
      SPA   ED12; //END;
// --<AO_1 > 511>--------------
PA12: L     #tmpWOutpValue; 
      T     PAW [#tmpDWOutpPointer]; // -> act. DB_DO.DBB (AO >511)
ED12: NOP   0; 
NETWORK
TITLE = ERROR SUMMARY

      L     DIW  104; //    VAR.error_word
      L     2#1111111; 
      UW    ; 
      L     0; 
      >I    ; 
      =     #Error.Summary; // -> ERR.summary
      R     #Info.Obj_Ready; // -> reset INF.obj_ready
NETWORK
TITLE = INITIALIZING

      U     #Error.Cfg_Fault; // )  ERR.cfgFault
      ON    #Var_ObjState.ManMode; // )  INF.obj_man_mode
      SPB   RE14; //RES;        // )
      UN    #Info.Obj_Ready; // )  INF.obj_ready
      R     #Var_ObjState.ManMode; // )->reset INF.obj_man_mode
      U     #Info.Obj_DO1_Set; // )  INF.obj_DO_1_set
      =     #Var_ObjState.DO1_Set; // )->
      U     #Info.Obj_DO2_Set; // )  INF.obj_DO_2_set
      =     #Var_ObjState.DO2_Set; // )->
      U     #Info.Obj_DO3_Set; // )  INF.obj_DO_3_set
      =     #Var_ObjState.DO3_Set; // )->
      U     #Info.Obj_DO4_Set; // )  INF.obj_DO_4_set
      =     #Var_ObjState.DO4_Set; // )->
      U     #Info.Obj_AO1_Set; // )  INF.obj_AO_1_set
      =     #Var_ObjState.AO1_Set; // )->
      L     #Var_ObjDBNo; 
      T     #tmpWDBNo; 
      AUF   DB [#tmpWDBNo]; 
      L     #Var_ObjAR1; // )  Abs.Address of act. Object
      LAR1  ; 
      L     DIW  126; // )  obj_status
      T     DBW [AR1,P#20.0]; // )-> Object_State
RE14: U     #Info.Obj_Ready; //    INF.obj_ready
      SPB   ED14; //END;
      L     0; // )
      T     DIB  106; // )-> reset VAR.info_byte
      T     #Var_DO1_ByteAddr; 
      T     #Var_DO2_ByteAddr; 
      T     #Var_DO3_ByteAddr; 
      T     #Var_DO4_ByteAddr; 
      T     #Var_DO1_BitAddr; 
      T     #Var_DO2_BitAddr; 
      T     #Var_DO3_BitAddr; 
      T     #Var_DO4_BitAddr; 
      T     #Var_AO1_ByteAddr; 
      T     DIW  126; // -> reset Var_ObjState
ED14: SET   ; 
      R     #KeyStatus.ActiveBit; // -> reset HT4.Activ-Bit
NETWORK
TITLE = CYCLE TIME EXTENSION

      U     "SYS_infLog1"; 
      BEB   ; // !! USED IF ONLY MAINTENANCE
LOOP: L     #Var_CycleTimeExt; //    MOTOR CONTROL SOFTWARE
      +     1; //    INSTALLED IN PLC !!
      T     #Var_CycleTimeExt; 
      L     25000; 
      <I    ; 
      SPB   LOOP; 
      L     0; 
      T     #Var_CycleTimeExt; 
END_FUNCTION_BLOCK

